<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>六月小记</title>
    <link href="/2023/07/22/%E5%85%AD%E6%9C%88%E5%B0%8F%E8%AE%B0/"/>
    <url>/2023/07/22/%E5%85%AD%E6%9C%88%E5%B0%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文以回忆的方式记录大学最后一个月所发生的事，以此纪念我的大学生活。</p><h2 id="2023-6-18"><a href="#2023-6-18" class="headerlink" title="2023-6-18"></a>2023-6-18</h2><p>这一天是毕业典礼的日子。因为有免费的毕业餐，这天早上我七点多就起了床，我还记得我当时选择的早餐是肉夹馍和稀饭（或者说是汤），之后回到宿舍因为太困还小眯了一会，接着便打起了游戏，快到饭点时和同学一起去了食堂吃完了最后一顿免费毕业餐，接着乘坐了12：40的校车前往中心参加毕业典礼，尤其印象深刻的是我的学士服的帽子上的穗掉了，幸运的是坐在我后面的同学多一个，这样才没有在上台的时候有些尴尬。<br>下午的毕业典礼结束后，我和同学们一起去吃了麦当劳，本来我自己想去吃汉堡王的，但感觉要多走好几步便放弃了，因为之前说好了晚上吃宵夜，所以麦当劳我就只点了鸡块。<br>毕业晚会的节目说实话有些无聊，几个唱歌的节目我还听了下，其他的魔术、相声啥的挺没意思的，中途便和同学离场，骑自行车前往看好的一家吃宵夜的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>考研这一年</title>
    <link href="/2023/05/09/%E8%80%83%E7%A0%94%E8%BF%99%E4%B8%80%E5%B9%B4/"/>
    <url>/2023/05/09/%E8%80%83%E7%A0%94%E8%BF%99%E4%B8%80%E5%B9%B4/</url>
    
    <content type="html"><![CDATA[<p>#前言<br>谨以此文，记录我这一年的考研生活<br>#开端</p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>May5</title>
    <link href="/2022/05/05/May5/"/>
    <url>/2022/05/05/May5/</url>
    
    <content type="html"><![CDATA[<p>今天凌晨3点有皇马对曼城的欧冠，半决赛第二回合，第一回合曼城主场4:3皇马，虽然都说曼城场面压制皇马，进球应该不止四个，所以即使回到了主场，皇马也很难翻盘，但我始终感觉皇马在主场能够翻盘。今天的第二回合前六十多分钟双方一直毫无建树，直到双方第一次换人后马赫雷斯进了一球，比分被拉到了5:3，然后再到八十多分钟皇马仍没有进球，这时候我就已经想回去睡觉了，实在太困，但我仍然大胆预测，皇马能在伤停补时前进一球，伤停补时时再进一球。果不其然，我也不知道是玄学还是怎样，罗德里戈在90分钟和91分钟连续进两球，成功把比赛拖入加时，最后加时本泽马禁区倒地获得点球，成功罚中，至结束双方再无任何进球，皇马成功逆转曼城，我的同学，一个曼城球迷，在皇马扳平比赛后直接沉默了。</p><p>三点起，六点再去睡，预约的图书馆座位应该在八点半之前到，结果一觉睡到八点四十，强行起来，手在抖、腿是软的。</p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>最近</title>
    <link href="/2022/05/03/%E6%9C%80%E8%BF%91/"/>
    <url>/2022/05/03/%E6%9C%80%E8%BF%91/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b1c59d8a858351cf3a5ac7644182ce73ef400fb70dbf4f396a2d706cc1a32ccb">2068ad9a79c36fd413fbed9bda09e3e97c3ac1dc1bc90ea7093af45ed106c1b4774b69cff0649700b110e757001fb8f96b1e0c08a22321f4d1505b1f7ed57892c22776c9acf212656a536150def5d14c8f7c03bcb8e541c85bc9d679a5ff681bacd50c0e431f9c6005a2af1150058e03f05ba306fad93223e0e558b55922b3097c5f42d0eea6583e9a5301d4770130c44ef40be7432a2eafd6da08dc28cc327e70ce35066e88b9b98f5ac1055134c8949342f66ad53cdc282b8c9928a54b72ac525d98319b56af2fcd97945155428ac487460f79d2d5aa579380e09d663d814036f168d1ebe75fdb60dc6d3a94624cff6ff5e7f8717d5cd2a542bf590130e6235226aa359134d4893a701c692e52d13dcecc5fbbecfe383dea713af9359a766476af89b12eb1e64029f5a26702e455e174050bfa82de2e5a5065f47b83e391d8e0031cb4e022dbab9c2707e79a7b251af8d7529ef0baf47821d7598fd2438912cc6e9ec23ecc1566a89e951d0229ee8d45ba6b595d10bbcfdd31357b0a4ddbeff1b3c978cdc277b70fe5abeeb161e4f003c541b7a2a8c6f4c506cdafe217dd64b0fd91a633750e417e066f11ac1aeb3bc30e69d91c8ee93be10ab1796429502c072da01cf219dca918b1d920e84eb17a5e097fbfcf91fd93a3a9eda3bbcf9b6ab1d6563fd1955130f89573c21fe91fedfbe18b89436a4cda1f0666736ec82146d91002ad60835fbc0a601c969239414631151f31cd1d43833260e7234fbc6766ab9b447b2f9389606eaab627b9e2c4655bdde969a2371b4fed84a04cfdc958c18521a575539b84341e8db237426e2f561fec3714a4a5cb309c1efef193c970713bb2f2876698587e613a64b1c9e19c66a80798df1dc47cb1e0fc6b90bc609dafd072d8a9b76de902e9026bb3aa2c91b38f6f5bd8bd9c2185a2124a8cd2d368d05dd38641b882722944ecbdc76ccf858bb2faed9a52612cbeb885793b637be7ce74b3e5d824fb5a05b98725b0a4409c803ffc3db300013144b8eff17041a4b9f93580473bf10c22dd0b1c1d5fdbbd270e0bfcfbdf95cfc4af816c5d15a97604914d657167372e56c2f96149faee97612c7a217dcb5fd778d4da28c84cd362e48355962dfd74bbd53c81d57d0b2f6e524355d686a21fb0cc9be396c625f576e577c1238554c1d147352fe419a7c89178a578a18b808e0d14f35ae2a4c5125bd3e4a9b868b6503f1de3cf32a2001235f38d7109cb468a46b195e56f6342245ebff8fdc7e7e99f0bb6b4d85724d960eec5233619b7bda1adeb8a2abeaf2e1856e12d46d664665d3a3c1ce53be11ec3a611f56a97af26c49441faa3f874e71e64671c55c6faf9dfe24bedae590b883e8f3763dd2140614b86180e26b8ea33eb9f5e9a9291d3ada488ec6cea89b6d0581a979b76fd23b62fa1a30a3512c709a276fa09771c30ac67422a967ef958c462e9b2f2b098711acef49d34404403d5794cd5a26b398cc33742ee0b54a8af5d5fb654e63b0ea4716184ab12bb6f15c5b18bdb98843e4e50825cdafe1b22137816b7a1b74cfde25eebc9e22da47d97a3f183b8f3a0c34eec08bc8eea97ba09ddf73e86c0546ec9559007f43c34d3217ea70cde2d759b14796fca1f915552ecaf901e6c2064766e5b8578da6aeb2e69a2204bb5452aa8385e54f8010f8ba87df786fa5ee508986bd3777e9017f650d9bcfd3099f110e30d12e662669699b56cc4fa3b353dff13efeb0342f6e9ab8186a60970f6973463cf2b9a0c7d536e908a4628bbfa5a2df3144d67887d96bb06edeb785de70dfa02f3e9b1c24e3011090a1662371a4d03a7ae73b153c4541944ece77d3889995cef323f21eaf2bde2cf89ff326cc2998499ea45655d2a3aac363f57fc896052dba5b0b54d51066b273689f98a93df4394d3dc53159aa6c3f5f25f3e368ff6e0cd7c04b75c0e45c4b3144cac20296787ccb749b87de0f62b174fbb7c1a4a9d1b8f58f964b954b0f431d1e39eeb96b940a9694c948753c4ecf8ebdfd628db0f920558c9a9804ef798caf2257ca90d45574564c4c3b5e232c4d578d7ad5c435c819d1f1442a16b3ca003a4cdd77118b049254ccea4a6e4f5f1a5d9065759ce275b41ba176fb40147b4092ad43a0055a562bd73f0619c6f48a126e2804ac6042e40801e1f317f4b0e32d37199b5799a2a46374770d3f558d48948d1e742174d800964c7ea0e3b982e3d9a7535fa9311ea80234081c3be712c52cba07fbe7b65eb947fef4c1aa924467449b8e23193dbc411d8102717d2959656d14cbaef2eda9ab3f65e6e16d8123a3bdecb5588daae9d21bf67b90bc341063318332bd29ccc1c24ba492e768e4994f006e4c7420a34008ebeae6f51fdb5f0e60767ec9901d7034e19c9f1e6428fdeeea6df20b034faec8a29491284a1e2d9504404f0634d453e743e294e7f4afa34257bd2ac7b84dc8bcc7ee068f0c1c7ec0eb586acaaee1ad07f52ca60c19dcaf44a9f10e52179ecf53f69eab96f29212cd9682694790f1a084b1e81773bca2f087408a890c9db1ae8bd4b6d7fd60ff358a3a347d402ef60ae10a79c1e9521cd2a3a7e1621e824d45ae6d9e197aec70ec10c5de5f54e8683e5a1d08a60c3a234697447095ae77d86865cffe25e63e2c729c31576e662c71a94be04957298845b561068dcc43023b89839cdafe825c605470f1b259557e9d5fe4d2892939527e4a2d01caefad951bc18a9a9d83911260051877da7effae91f9f689ad8acc3f92c1a1a2e64506f3659908cb88a9c54eaca982acab504b8d40c090410cd2e15434b0cb87d736f926f2aea944701f8af5d5266d904913d10fde20472fc8249c0779f2f236990478b3da823055fed3f0a4b8609998eb67017c3c0c2f56e3309d31a18df0c3f2194b86a8876ccc65be60efcfa168b96f7aca25ff0aca5ec4c52b33eecf3faf4033f83ff84dd7129059b1fe7b6f2c2f0c9442d1a3dcead2a0868e836b0971dfc98815eacb25b2b19caf1c6771e81a091819ccd2dc8100979c3b34c6907436d1c7d5ea324d457459351736ed5aa82f1591fd90931e8e9038de1d4f2ae59c42bcf05597606d07b98a71a0ad6750416e66a1df81f8ca36b34f7582d557c3fc39bc7beca26db00d85a9a8f6fbf9a20da4fcc82963adf07fded9e473916ebd4e74650d222f36d6133240f213b9f1121601f1a72c39d3739916117458a854a0743e385a16e76b440dd1f9155a3a80d9c9e07c2b69d593c508391ddd90bef843e326d03c3af975a29c7395a55feecf31a7043fdfbad892dc353c289d7f65cf1a48fe14302d3597819af8f5cf26c7173aa19070259caafb7df3eb35cb202ace60e2aeb99ea4040a5f1cfcef5cf39121779ead76b21ae32b52611b51f105fc18f8d3cfad3f9d700561b8bba1747726364006e8d092c9030ef10b0037777c2e6db48c0073de724a46af35b56f8893a9213885261a223bad6e1391cf6bcc9b5baf01baa3145c6a4211752cbff501e8633cab5d3f89b389bafd84315b985f7cad94535aa0cd70debfed9b2082311f6dba072774b4aebccdf8d4f79ff468b75c2aa5db9cdea3b53030f1e906662480ad74dd3c4d07aafec6f23ca4b39979bcf4cb3c6324ffb56963fcb651caadbf273667fd09a02169deb99b74e32da345d3259d823d655134287b24bc3bcdfba1e23a377316c75e4659827134000aa30d0c10ea509bcc2ad4c5f4357b7e6a3a9f4951202ad90c6bb0f2aa87a234d9e7ac3ee606bab9017a70577e1ead04c6f41dfba9557ee6d13d6024e0f2eebf50aa29f71571dbd5b83ed4d0fd65e9ba7a5db87875b8a4c5ebc0df90b37401e86c8193cd50ee91decd9d94d2f147b79871675b34a17f543b517bfe0fda45729ec535d492f6bc8bd9640788c1f80756e48a2e06cb802b0c62679270804bdbc1a87aafe421270538834dbcb8ec2ae038d9e2e4d0c49d43655ca787b8bb458cd0ca85262231fc156e88fb334c72ae4fde24ed8710ca8589bbcb5fc53aeac4d49d82b70716a4f5ebe567c8129db9a66cd66de3d41d7fa02c56b0c8665d3c3501151544e65c78e6184bc6e10168a0405bfab8c933b5dd61702b7b67693a1b62324d5d843117801dfffa655637124948b2bfbd025c9e872e7dca6994bad2ceb35748c6e773cf60142c45c13482c66cf00889258c6d31ab72b1b530375ed2e751d145ca357d2ca3acd59007a13cd0c453b2a81c865d8b4bfa4122fe1620925e73660d0c04d7f38af5714425bec129093b237ab2ddaa1739128432e4137b5d83189e8ffd0abb1a6c7866767c59c5658298ec81f13d9dd2aaef0f64b990868211b303555a43f61cfc8315ea197937d12adf0bb0a1c72a6021b8eb160b7a8276d9c7be3cc278c68826da81ba51cc7d8cb768f4076114459265b0a665d13c26d7c5740130963798b4c62a4c320c3219a0664359d5565f8c1e3801bfcddb0c21d03e3985f58c523e2176606bc16e704e01d4e566638ae5f49</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>利用Picgo和GitHub搭建图床</title>
    <link href="/2021/07/22/picgo-image/"/>
    <url>/2021/07/22/picgo-image/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>刚开始写博客时，文章中的图片我总是在博客写好后一张张上传到我的服务器中，后来我觉得这样既麻烦又占用服务器的空间，于是我转向了图床，我选择用另一台服务器搭建图床，将图片上传到图床上，然后通过外链来使用我所要用的图片，但这样过了一段时间后，当我的服务器到期时，如果我不选择续费，那么储存在上面的图片也将消失，如果选择搬迁又要在文章中更改图片的外链，这样一来就十分麻烦。最终我找到了一个自动化程度高、并且不需要担心图片丢失的方法来存储图片——利用Picgo+GitHub搭建一个好用的图床。</p><p>以下便是具体的操作步骤。</p><h1 id="GitHub方面"><a href="#GitHub方面" class="headerlink" title="GitHub方面"></a>GitHub方面</h1><h2 id="新建一个GitHub仓库"><a href="#新建一个GitHub仓库" class="headerlink" title="新建一个GitHub仓库"></a>新建一个GitHub仓库</h2><p>打开GitHub，点击New repository。</p><p><img src="https://cdn.jsdelivr.net/gh/ntgoaywh/picgo/img/image-20210722170922637.png" alt="image-20210722170922637"></p><p>Repository name任意填，Description写不写都行，选择Public，最后点击Create repository。</p><p><img src="https://cdn.jsdelivr.net/gh/ntgoaywh/picgo/img/image-20210722171456242.png" alt="image-20210722171456242"></p><h2 id="获取Token"><a href="#获取Token" class="headerlink" title="获取Token"></a>获取Token</h2><p>点击个人头像–Settings–Developer settings–Personal access tokens，然后点击Generate new token，Note任意填写，Select scopes只需要勾选第一个repo即可，最后点击Generate token</p><p><img src="https://cdn.jsdelivr.net/gh/ntgoaywh/picgo/img/image-20210722171848314.png" alt="image-20210722171848314"></p><p><img src="https://cdn.jsdelivr.net/gh/ntgoaywh/picgo/img/image-20210722172016238.png" alt="image-20210722172016238"></p><p>这时便会生成token，一定要把它复制下来并保存好，因为它只出现一次。</p><p><img src="https://cdn.jsdelivr.net/gh/ntgoaywh/picgo/img/image-20210722172143874.png" alt="image-20210722172143874"></p><h1 id="Picgo方面"><a href="#Picgo方面" class="headerlink" title="Picgo方面"></a>Picgo方面</h1><h2 id="安装Picgo"><a href="#安装Picgo" class="headerlink" title="安装Picgo"></a>安装Picgo</h2><p>Picgo的下载地址为：<a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p><p>Windows下载exe，Mac下载dmg，下载完成后安装即可。</p><h2 id="配置Picgo"><a href="#配置Picgo" class="headerlink" title="配置Picgo"></a>配置Picgo</h2><p>这是Picgo的界面，简介美观。</p><p><img src="https://cdn.jsdelivr.net/gh/ntgoaywh/picgo/img/image-20210722172551098.png" alt="image-20210722172551098"></p><p>点击图床设置– GitHub图床，设定仓库名这一栏：你的GitHub用户名/你的仓库名</p><p>设定分支名这一栏：main或者master或其他你自己设定的分支（默认为main）</p><p>设定Token这一栏：刚才生成的Token</p><p>指定存储路径这一栏：可留空，如果你想放在文件夹中，填写文件夹的名字再加上反斜杠/即可。</p><p>设定自定义域名这一栏：可留空，如果你想使用jsdelivr的cdn服务加快图片打开速度，那么你可以填写：<a href="https://cdn.jsdelivr.net/gh/GitHub">https://cdn.jsdelivr.net/gh/GitHub</a>用户名/仓库名。</p><p>总体内容如下图所示，最后点击确定即可。</p><p><img src="https://cdn.jsdelivr.net/gh/ntgoaywh/picgo/img/image-20210722172652468.png" alt="image-20210722172652468"></p><h1 id="图床使用"><a href="#图床使用" class="headerlink" title="图床使用"></a>图床使用</h1><p>一般情况下，当我们想上传图片时，只需将图片拖动到Picgo的界面上传或者直接点击剪贴板图床上传（一般用于截图）。</p><p><img src="https://cdn.jsdelivr.net/gh/ntgoaywh/picgo/img/image-20210722173508025.png" alt="image-20210722173508025"></p><h2 id="快速上传（基本自动化）"><a href="#快速上传（基本自动化）" class="headerlink" title="快速上传（基本自动化）"></a>快速上传（基本自动化）</h2><p>我平时主要使用Typora写作，在Typora的设置中选择图像，在插入图片时这一栏选择上传图片，在上传服务这一栏选择PicGo.app,这样当我们截图并将图片粘贴到Typora中时，图片便会自动上传至GitHub，无需再打开Picgo的界面进行上传，此时Typora文章中的所有图片地址均显示为外链，这个方法在我看来是非常好用的并且强烈推荐的，省去了多余的步骤，实现了基本的自动化。</p><p><img src="https://cdn.jsdelivr.net/gh/ntgoaywh/picgo/img/image-20210722173718490.png" alt="image-20210722173718490"></p>]]></content>
    
    
    <categories>
      
      <category>服务搭建</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MacBook使用体验</title>
    <link href="/2021/07/21/macbook-usage/"/>
    <url>/2021/07/21/macbook-usage/</url>
    
    <content type="html"><![CDATA[<h1 id="第一天晚上（7-18）"><a href="#第一天晚上（7-18）" class="headerlink" title="第一天晚上（7.18）"></a>第一天晚上（7.18）</h1><p>因为是中午到的，下午又要去实验室，只拆开了电脑进行了简单的配置，白天没怎么用，晚上六点左右才开始正式使用。首先安装了基本的软件（QQ、微信、MS套件等等），体验了非常好奇的随航sidecar功能，个人体验非常好，感觉如果想要保护好MacBook，还需要购买一个内胆包，避免出现划痕。碰到了一个问题，由于M1没有网线接口，所以需要用拓展坞进行连接，但使用了两个拓展坞后，出现了无反应和连接上无法识别的问题，估计是驱动的问题，这几天在京东上找下适合MacBook的拓展坞，其实拓展坞使用频率比较小，我个人主要用就是为了插U盘和网线，而且网线一般在需要下比较大的软件时才需要用，平时学校的Wi-Fi勉强能用😂。</p><h1 id="第二天（7-19）"><a href="#第二天（7-19）" class="headerlink" title="第二天（7.19）"></a>第二天（7.19）</h1><p>今天我主要还是安装了一些之前在win上常用的软件，同时继续体验随航，逐渐弄清楚了随航的相关使用方法，的确特别好用，延迟特别低，几乎感受不到，也非常流畅，就像在Mac上操作一样。晚上安装了IINA这款Mac上的视频播放软件，它能够直接识别视频url并在线播放，如果在Chrome上安装了IINA的拓展，打开一个视频网站，会发现页面地址栏有一个小图标点击它，并允许打开IINA，等待加载后就可以在IINA里观看无广告的视频。</p><p>但是，在使用IINA的过程中，我碰到了许多问题，但最终还是被我一一解决🙂，以下我就简单的记录下经验。</p><h2 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h2><p>因为要想使用IINA在线播放视频的功能，需要用到YouTube-dl，而在Mac上下载YouTube-dl一般需要在命令行上使用Homebrew进行安装，我是新买的MacBook，还没有安装Homebrew，所以需要先安装Homebrew，使用如下命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;<br></code></pre></td></tr></table></figure><p>在安装的同时按照提示输入密码，完成相关要求。</p><h2 id="安装YouTube-dl"><a href="#安装YouTube-dl" class="headerlink" title="安装YouTube-dl"></a>安装YouTube-dl</h2><p>安装完Homebrew后，就可以直接安装YouTube-dl了，使用命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install youtube-dl<br></code></pre></td></tr></table></figure><p>同样等待安装完成。</p><h2 id="配置IINA"><a href="#配置IINA" class="headerlink" title="配置IINA"></a>配置IINA</h2><p>在偏好设置中点击网络,点击启用YouTube-dl，并填入YouTube-dl路径，YouTube-dl的路径可通过在终端输入where youtube-dl得到。同时若想通过IINA播放YouTube等国外网站上的视频，还需要设置HTTP代理，在HTTP代理后填入127.0.0.1:’HTTP的端口号’。</p><p>有一个无法忽视的问题，就是在终端安装Homebrew和用Homebrew安装YouTube-dl时，经常会出现443等错误，这是GitHub在国内无法正常访问以及Homebrew的源在国外的原因，要想解决可以给终端设置代理，这里可自行上网查找。</p><p>我这里分享下我发现的一个小惊喜，因为M1可以安装iOS上的应用，所以当我安装了Shadowrocket后，我发现终端自动走了代理，能够ping通Google，从GitHub上下东西速度也和从国内网站上下东西相当，这个时候使用终端就非常的舒适了。</p><p><img src="https://cdn.jsdelivr.net/gh/ntgoaywh/picgo/img/image-20210720223032548.png" alt="image-20210720223032548"></p><p>小插曲：今天晚上看同学在安装win11，但在睡前还没装完，明天起来看看win11。</p><h1 id="第三天（7-20）"><a href="#第三天（7-20）" class="headerlink" title="第三天（7.20）"></a>第三天（7.20）</h1><p>今天上午主要是在寻找一个Mac上的好用的写latex的软件，后来我选择了Mactex，看了许多方案后，最终就暂时先用最简单的Mactex配置，暂时不使用大多数人推荐的Sublime text和skim。好吧，主要是Sublime text要付费，我其实全都配置好了，发现要付费我就把它给删了，主要是现阶段我用latex的频率比较低，还没必要购买。</p><p>然后今天还下载了超级右键，按下鼠标右键后就可以新建各种类型的文档，有win那味了。</p><p><img src="https://cdn.jsdelivr.net/gh/ntgoaywh/picgo/img/image-20210720222642209.png" alt="image-20210720222642209"></p><p>不得不说开发超级右键的这家公司确实不错，很良心，我还在使用的一个截屏软件iShot也是由这家公司写的，也很好用。</p><p>再说一句，随航这个功能我真的是❤️上了，是真的好用。</p><p>因为平时有写博客的爱好，所以我又下载了picgo这款图片上传软件，同时搭配GitHub作为我的图床，当我截屏后可以直接将图片上传到我的GitHub仓库，同时还会获得图片到外链，能够插入到文章中。</p><p>Typora能够使用Picgo作为其默认的图片上传工具，当我在Typora中粘贴图片时，它会自动调用Picgo将图片上传到GitHub上，这时图片的地址就由本地地址变为外链，这样当我将文章发布在我的博客上时，不需要再手动上传图片了，直接调用图片外链即可。</p><p><img src="https://cdn.jsdelivr.net/gh/ntgoaywh/picgo/img/image-20210721012428192.png" alt="image-20210721012428192"></p><p>闲的没事把课表一项项手动导入到了自带的日历中….</p><p>一个个点开Mac上自带的软件，打开词典时发现词典能够直接查询维基百科，但是因为国内无法使用维基，所以词典上的维基百科也就相当于没有。这个问题决定明天解决，现在太晚了…</p><h1 id="第四天（7-21）"><a href="#第四天（7-21）" class="headerlink" title="第四天（7.21）"></a>第四天（7.21）</h1><p>上午我查找了词典正常使用维基百科的解决办法，网上的解决方法一般是通过下载Proxifier然后添加socks5端口，添加规则，改变一些配置，最终便能正常使用维基百科，但我发现了一个很大的问题，就是使用了<strong>Proxifier for Mac v3</strong>后，Mac的随航功能无法使用，这对我平时的使用有非常大的影响，虽说也能够解决，但一想到每次都要打开这个软件最终我选择了放弃，使用前一个版本的<strong>Proxifier</strong>不会产生上述问题，但前一个版本的只支持Intel，不支持M1😞。</p><p>最终，我发现surge开启了增强模式后能够直接使用维基百科，实际使用后也发现的确是这样，但surge需要付费买断，我决定先试用14天后再决定是否买断，毕竟词典的维基百科功能平时也不会用的太多。准备等回家后尝试下surge的网关模式，体验下Mac做软路由是什么样的感觉。</p><p><img src="https://cdn.jsdelivr.net/gh/ntgoaywh/picgo/img/image-20210721173547562.png" alt="image-20210721173547562"></p><p>到现在，还有一个问题没有解决或者说是疑惑没有得到解答，就是关于Mac的终端代理，我试过surge给出的终端代理命令，也找过网上的相关教程，在我使用curl cip.cc后，返回的IP仍然是本地IP而不是代理的IP，这让我很是疑惑，但终端使用起来又像是开启了代理，这还需要我进一步的查查资料，才能找到正确的方法。</p><p>晚上的时候下载了CS:GO，想看下M1上的游戏体验怎么样，迫于网速原因还没下载完，很奇怪的一点，steam下游戏居然是走的proxy而不是direct。</p><p>晚上在tg群上了Spotify的家庭车，Spotify有一个很有趣的功能，就是能通过Mac直接控制iPad的播放、暂停等等，当在iPad上播放音乐时，Mac上也会同步显示，反过来也是一样，延迟几乎为0。现在我在iPad上播放Spotify上的歌曲，然后在Mac上下载了lyricsxX显示播放歌曲的歌词，算是解决了Spotify Mac版没有歌词的缺点。</p><p>从今天开始，我将主要使用Safari，我已经把Chrome上的书签以及密码导入到Safari，Mac上使用Safari体验还算不错，主要是我觉得它的UI要好于Chrome。当我想把一个YouTube账户所订阅的频道导出并导入到另一个YouTube账户时，我发现YouTube自带的导出所有频道的功能没有了🥲，一年前明明都还有的….最终可通过安装油猴配合<a href="https://greasyfork.org/fr/scripts/418574-export-youtube-subscriptions-to-rss-opml">一个脚本</a>便可成功导出，但在我尝试后发现不能导出全部的频道，不知道是为什么。</p><h1 id="第五天（7-22）"><a href="#第五天（7-22）" class="headerlink" title="第五天（7.22）"></a>第五天（7.22）</h1><p>今天在YouTube上发现了一个清华的博主，点进去一看发现是台湾的国立清华大学，看完了一个视频，感觉还挺有意思的，一个爱学习的大三学生—<a href="https://www.youtube.com/channel/UCIr83ylpcdwj-uki4Z4EF_Q">MushroomWang</a>，长得也挺好看的😌</p><h1 id="第六天（7-23）"><a href="#第六天（7-23）" class="headerlink" title="第六天（7.23）"></a>第六天（7.23）</h1><p>这两天也没什么去尝试什么新的东西，昨天晚上在用pycharm装一些库，结果其他都装好了，一个scikit-learn装了半天都没装完，电脑还发热特别严重，最终我就放弃了，奇怪，M1不是不怎么发热的吗？前天下了setapp，感觉里面的大部分软件使用频率确实不太高，只有几个用的还算多，但如果直接买断这些软件，钱算下来比每季都订阅还要少，所以我觉得只用Downie，MarginNote，Paste的话，直接买断就好了，没必要一直订阅，这几天我也在用surge，先体验两周再决定是否买断。</p><p>关于AirPods：前几天看一直都是预计7月28日～8月4日到达，今天早上突然收到信息变为预计7月28日～7月30日，晚上又收到信息预计7月25日或之前到达！！！上官网查询后发现已经从北京发货了，用顺丰送的，走的航空路线，快的话明天就可以到了😃</p><h1 id="第七天（7-24）"><a href="#第七天（7-24）" class="headerlink" title="第七天（7.24）"></a>第七天（7.24）</h1><p>今天中午AirPods居然就到了，真的快，总体上使用没什么问题，但自动切换这个功能却无法实现，我不论是更新系统还是重新登陆iCloud都无法解决，准备有时间去Apple店里问问，线上的解决办法看来看去就这几个。</p><p>看了会python，但又看不进去，有点担心九月的二级了。</p><p>晚上我重启了一遍Mac，发现自动切换功能可以用了， 但从iPhone或者iPad上切换到Mac上却不行，和我下午在网上看的一模一样，苹果的这个功能做的确实稀烂。</p><p>晚上电脑休眠了4个多小时后，我打开Spotify想听歌发现无法播放歌曲，我以为是Spotify的问题，后来当我打开Twitch、YouTube发现都无法播放视频并且网络没有任何问题时，我猜测是电脑出了问题，于是我重启了电脑，发现就能正常播放了，我上网查了下，这是macOS系统的一个bug，我看网上的文章都是19年的了，一个bug居然几年了还没修好😔。<a href="https://www.cnblogs.com/Cherry-Linux/p/9303898.html">Mac突然没有声音但是重启后可以恢复</a></p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Macbook购买记录</title>
    <link href="/2021/07/12/buy-macbook/"/>
    <url>/2021/07/12/buy-macbook/</url>
    
    <content type="html"><![CDATA[<h2 id="7月12号"><a href="#7月12号" class="headerlink" title="7月12号"></a>7月12号</h2><p>今天总算下单了心心念念了好几个月的MacBook M1 Air (16GB+512GB)，现在安心等待发货。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210712223806.png"></p><h2 id="7月14号"><a href="#7月14号" class="headerlink" title="7月14号"></a>7月14号</h2><p>已准备发货</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210714120553.png"></p><h2 id="7月16号"><a href="#7月16号" class="headerlink" title="7月16号"></a>7月16号</h2><p>已发货</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210716132029.png"></p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210716132126.png"></p><h1 id="7月17日"><a href="#7月17日" class="headerlink" title="7月17日"></a>7月17日</h1><p><img src="https://cdn.jsdelivr.net/gh/ntgoaywh/picgo/img/20210721174812.png"></p><h1 id="7月18日"><a href="#7月18日" class="headerlink" title="7月18日"></a>7月18日</h1><p>如上图所示，在官网显示的预计日期的第一天达到，中午邮政一来我就立马去取快递了，接下来就可以好好体验下MacBook了🥳，之后还会更新一篇MacBook使用体验，每天都会写一些内容。</p><p>补充：在7月18号这天我总算联系上了Apple的客服，在9点一上班时就向他们的微信公众号发送了请求，直接一次联系成功，客服已经为我安排了补发耳机。</p><h1 id="7月20日"><a href="#7月20日" class="headerlink" title="7月20日"></a>7月20日</h1><p>今天上Apple官网查询耳机的信息，惊奇的发现居然已经出现了订单，就是到达日期有一点晚了….</p><p><img src="https://cdn.jsdelivr.net/gh/ntgoaywh/picgo/img/20210721175244.png"></p><h1 id="7月23日"><a href="#7月23日" class="headerlink" title="7月23日"></a>7月23日</h1><p>反转了，今天早上突然收到信息变为预计7月28日～7月30日，晚上又收到信息预计7月25日或之前到达！！！上官网查询后发现已经从北京发货了，用顺丰送的，走的航空路线，快的话明天就可以到了</p><p><img src="https://cdn.jsdelivr.net/gh/ntgoaywh/picgo/img/20210723235303.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ntgoaywh/picgo/img/20210723235412.png"></p><p><img src="https://blog.jkfff.com/wp-content/uploads/2021/07/image-1-1024x654.png"></p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>如何提高国内访问GitHub的速度达到3MB/S以上（轻松解决）</title>
    <link href="/2021/05/07/github-proxy/"/>
    <url>/2021/05/07/github-proxy/</url>
    
    <content type="html"><![CDATA[<p><strong>为什么GitHub下载速度这么慢？</strong></p><p>GitHub，我们都知道是世界上最大的开源及私有软件项目的托管平台，全世界每天有海量优秀的开源软件在这里产生，而 GitHub 在国内很多时候获取到的下载链接是亚马逊的服务器。</p><p>中国因为不可言说的原因，经常抽疯或龟速。想要加快 GitHub 下载速度就需要用到 GitHub 国内加速服务，对于有条件的可以使用代理加快访问速度，而没有条件的就可以用到以下解决方案，实现加速：</p><ul><li>  1.GitHub 镜像访问</li><li>  2. GitHub文件加速</li><li>  3. Github 加速下载</li><li>  4. 加速你的 Github</li><li>  <strong>5. 谷歌浏览器GitHub加速插件(推荐)</strong></li><li>  6. GitHub raw 加速</li><li>  7. GitHub + Jsdelivr</li><li>  8. 通过Gitee中转fork仓库下载</li><li>  9. 通过修改HOSTS文件进行加速</li></ul><p>详细说明：</p><h2 id="1-GitHub-镜像访问"><a href="#1-GitHub-镜像访问" class="headerlink" title="1. GitHub 镜像访问"></a>1. GitHub 镜像访问</h2><p>这里提供两个最常用的镜像地址：</p><ul><li>  <a href="https://github.com.cnpmjs.org/">github.com.cnpmjs.org</a></li><li>  <a href="https://hub.fastgit.org/">hub.fastgit.org</a></li></ul><p>也就是说上面的镜像就是一个克隆版的 GitHub，你可以访问上面的镜像网站，网站的内容跟 GitHub 是完整同步的镜像，然后在这个网站里面进行下载克隆等操作。</p><h2 id="2-GitHub-文件加速"><a href="#2-GitHub-文件加速" class="headerlink" title="2. GitHub 文件加速"></a>2. GitHub 文件加速</h2><p>利用 Cloudflare Workers 对 github release 、archive 以及项目文件进行加速，部署无需服务器且自带CDN.</p><ul><li>  <a href="https://gh.api.99988866.xyz/">gh.api.99988866.xyz</a></li><li>  <a href="https://g.ioiox.com/">g.ioiox.com</a></li></ul><p>以上网站为演示站点，如无法打开可以查看开源项目：gh-proxy-GitHub(<a href="https://hunsh.net/archives/23/">hunsh.net/archives/23…</a>) 文件加速自行部署。</p><h2 id="3-Github-加速下载"><a href="#3-Github-加速下载" class="headerlink" title="3. Github 加速下载"></a>3. Github 加速下载</h2><p>打开以下网站，只需要复制当前 GitHub 地址粘贴到输入框中就可以代理加速下载！</p><p>地址：<a href="http://toolwa.com/github/">toolwa.com/github/</a></p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210506235642.png"></p><h2 id="4-加速你的-Github"><a href="#4-加速你的-Github" class="headerlink" title="4. 加速你的 Github"></a>4. 加速你的 Github</h2><p><a href="https://github.zhlh6.cn/">github.zhlh6.cn</a></p><p>输入 Github 仓库地址，使用生成的地址进行 git ssh 等操作</p><h2 id="5-谷歌浏览器-GitHub-加速插件-推荐-方便快捷"><a href="#5-谷歌浏览器-GitHub-加速插件-推荐-方便快捷" class="headerlink" title="5. 谷歌浏览器 GitHub 加速插件(推荐-方便快捷)"></a>5. 谷歌浏览器 GitHub 加速插件(推荐-方便快捷)</h2><p>如果可以直接访问谷歌商店，可以下载GitHub 加速工具，安装。</p><p>不方便的可以这里下载安装：</p><p>链接：<a href="https://pan.baidu.com/s/1b3xzNrJbkl3Q3N-n9gQW6A">pan.baidu.com/s/1b3xzNrJb…</a> </p><p>提取码：tm97</p><h2 id="6-GitHub-raw-加速"><a href="#6-GitHub-raw-加速" class="headerlink" title="6. GitHub raw 加速"></a>6. GitHub raw 加速</h2><p>GitHub raw 域名并非 github.com 而是 raw.githubusercontent.com，上方的 GitHub 加速如果不能加速这个域名，那么可以使用 Static CDN 提供的反代服务。</p><p>将 raw.githubusercontent.com 替换为 raw.staticdn.net 即可加速。</p><h2 id="7-GitHub-Jsdelivr"><a href="#7-GitHub-Jsdelivr" class="headerlink" title="7. GitHub + Jsdelivr"></a>7. GitHub + Jsdelivr</h2><p>jsdelivr 唯一美中不足的就是它不能获取 exe 文件以及 Release 处附加的 exe 和 dmg 文件。</p><p>也就是说如果 exe 文件是附加在 Release 处但是没有在 code 里面的话是无法获取的。所以只能当作静态文件 cdn 用途，而不能作为 Release 加速下载的用途。</p><h2 id="8-通过-Gitee-中转-fork-仓库下载"><a href="#8-通过-Gitee-中转-fork-仓库下载" class="headerlink" title="8. 通过 Gitee 中转 fork 仓库下载"></a>8. 通过 Gitee 中转 fork 仓库下载</h2><p>网上有很多相关的教程，这里简要的说明下操作。</p><p>访问 gitee 网站：<a href="https://gitee.com/">gitee.com/</a> 并登录，在顶部选择“从 GitHub/GitLab 导入仓库” 如下：</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/1.png"></p><p>在导入页面中粘贴你的Github仓库地址，点击导入即可：</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/2.png"></p><p>等待导入操作完成，然后在导入的仓库中下载浏览对应的该 GitHub 仓库代码，你也可以点击仓库顶部的“刷新”按钮进行 Github 代码仓库的同步。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/3.png"></p><h2 id="9-通过修改-HOSTS-文件进行加速"><a href="#9-通过修改-HOSTS-文件进行加速" class="headerlink" title="9. 通过修改 HOSTS 文件进行加速"></a>9. 通过修改 HOSTS 文件进行加速</h2><p>手动把cdn和ip地址绑定。</p><p>第一步：获取 github 的 global.ssl.fastly 地址访问：<a href="http://github.global.ssl.fastly.net.ipaddress.com/#ipinfo">github.global.ssl.fastly.net.ipaddress.com/#ipinfo</a> 获取cdn和ip域名：</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210507000053.png"></p><p>得到：199.232.69.194 <a href="https://github.global.ssl.fastly.net/">github.global.ssl.fastly.net</a></p><p>第二步：获取github.com地址</p><p>访问：<a href="https://github.com.ipaddress.com/#ipinfo">github.com.ipaddress.com/#ipinfo</a> 获取cdn和ip：</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210507000142.png"></p><p>得到：140.82.114.4 <a href="http://github.com/">github.com</a></p><p>第三步：修改 host 文件映射上面查找到的 IP</p><p>windows系统：</p><p>1、修改C:\Windows\System32\drivers\etc\hosts文件的权限，指定可写入：右击-&gt;hosts-&gt;属性-&gt;安全-&gt;编辑-&gt;点击Users-&gt;在Users的权限“写入”后面打勾。如下：</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/4.png"></p><p>然后点击确定。</p><p>2、右击-&gt;hosts-&gt;打开方式-&gt;选定记事本（或者你喜欢的编辑器）-&gt;在末尾处添加以下内容：</p><ol><li> <code>199.232.69.194 github.global.ssl.fastly.net</code></li><li> <code>140.82.114.4 github.com</code></li></ol>]]></content>
    
    
    <categories>
      
      <category>服务搭建</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>以数指定年、月、日的日期打印出来</title>
    <link href="/2021/05/02/python-index/"/>
    <url>/2021/05/02/python-index/</url>
    
    <content type="html"><![CDATA[<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs routeros">months=[<br>    <span class="hljs-string">&#x27;Januray&#x27;</span>,<br>    <span class="hljs-string">&#x27;February&#x27;</span>,<br>    <span class="hljs-string">&#x27;March&#x27;</span>,<br>    <span class="hljs-string">&#x27;April&#x27;</span>,<br>    <span class="hljs-string">&#x27;May&#x27;</span>,<br>    <span class="hljs-string">&#x27;June&#x27;</span>,<br>    <span class="hljs-string">&#x27;July&#x27;</span>,<br>    <span class="hljs-string">&#x27;August&#x27;</span>,<br>    <span class="hljs-string">&#x27;September&#x27;</span>,<br>    <span class="hljs-string">&#x27;October&#x27;</span>,<br>    <span class="hljs-string">&#x27;November&#x27;</span>,<br>    <span class="hljs-string">&#x27;December&#x27;</span><br>]<br>endings=[<span class="hljs-string">&#x27;st&#x27;</span>,<span class="hljs-string">&#x27;nd&#x27;</span>,<span class="hljs-string">&#x27;rd&#x27;</span>]+17*[<span class="hljs-string">&#x27;th&#x27;</span>]\<br>    +[<span class="hljs-string">&#x27;st&#x27;</span>,<span class="hljs-string">&#x27;nd&#x27;</span>,<span class="hljs-string">&#x27;rd&#x27;</span>]+7*[<span class="hljs-string">&#x27;th&#x27;</span>]\<br>    +[<span class="hljs-string">&#x27;st&#x27;</span>]<br><span class="hljs-attribute">year</span>=input(&#x27;Year:&#x27;)<br><span class="hljs-attribute">month</span>=input(&#x27;Month(1-12):&#x27;)<br><span class="hljs-attribute">day</span>=input(&#x27;Day(1-31):&#x27;)<br><span class="hljs-attribute">month_number</span>=int(month)<br><span class="hljs-attribute">day_number</span>=int(day)<br><br>month_name = months[month_number-1]<br><span class="hljs-attribute">ordinal</span>=day+endings[day_number-1]<br><span class="hljs-builtin-name">print</span>(month_name+<span class="hljs-string">&#x27; &#x27;</span>+ordinal+<span class="hljs-string">&#x27;,&#x27;</span>+year)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>The difference between Supervised Learning and Unsupervised Learning</title>
    <link href="/2021/05/01/the-difference-between-supervised-learning-and-unsupervised/"/>
    <url>/2021/05/01/the-difference-between-supervised-learning-and-unsupervised/</url>
    
    <content type="html"><![CDATA[<p>Today I watched the video made by Andrew Ng about the Supervised Learning and Unsupervised Learning, I want to write a summary to tell what is Supervised Learning and what is Unsupervised Learning.</p><h1 id="Supervised-Learning"><a href="#Supervised-Learning" class="headerlink" title="Supervised Learning"></a>Supervised Learning</h1><p>In supervised learning, we are given a data set and already know what our correct output should look like, having the idea that there is a relationship between the input and the output.</p><p>Supervised learning problems are categorized into “regression” and “classification” problems. Regression means predicting the output. Classification means we are trying map input variables into discrete categories</p><p>Eg: Housing price prediction</p><p>Breast cancer(malignant,begin)</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210501210921.png" alt="1"></p><h1 id="Unsupervised-Learning"><a href="#Unsupervised-Learning" class="headerlink" title="Unsupervised Learning"></a>Unsupervised Learning</h1><p>Unsupervised learning allows us to approach problems with little or no idea what our results should look like. We can derive structure from data where we don’t necessarily know the effect of the variables.</p><p>In unsupervised learning, we’re given data that looks different than data that looks like this that doesn’t have any labels or that all has the same label or really no labels.</p><p>Clustering algorithm problem is the symbol of Unsupervised Learning.</p><p>Eg: Cocktail party problem algorithm</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210501210843.png" alt="2"></p><h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1><p>In short, in Supervised Learning, we know clear expected output. But in Unsupervised Learning, there is no expectation of the output.</p>]]></content>
    
    
    <categories>
      
      <category>Machine Learning</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Machine Learning</title>
    <link href="/2021/05/01/machine-learning/"/>
    <url>/2021/05/01/machine-learning/</url>
    
    <content type="html"><![CDATA[<blockquote><p>From today, I will start to study the machine learning course taught by Professor Andrew Ng. Here I will record my study notes and experience.</p></blockquote><h1 id="Week-1"><a href="#Week-1" class="headerlink" title="Week 1"></a><strong>Week 1</strong></h1><h2 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome"></a><strong>Welcome</strong></h2><ul><li>  What’s machine learning?</li></ul><p>There’s a science of getting computers to learn without being [explicitly programmed](<a href="https://intellipaat.com/community/7509/difference-between-machine-learning-and-explicit-programming#:~:text=Explicitly%20programmed%3A%20Writing%20out%20the,to%20you%20about%20Machine%20Learning.">https://intellipaat.com/community/7509/difference-between-machine-learning-and-explicit-programming#:~:text=Explicitly programmed%3A Writing out the,to you about Machine Learning.)（显式编程）</a>%EF%BC%88%E6%98%BE%E5%BC%8F%E7%BC%96%E7%A8%8B%EF%BC%89)</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><h3 id="Machine-Learning"><a href="#Machine-Learning" class="headerlink" title="Machine Learning"></a>Machine Learning</h3><ul><li>  Grew out of work in AI</li><li>  New capability for computers</li></ul><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><ul><li>  Database mining <code>Large datasets from growth of automation/web E.g., Web click data(网络点击数据), medical records, biology, engineering</code></li><li>  Applications can’t program by hand(不能通过手工编程实现) <code>E.g., Autonomous helicopter, handwriting recognition(手写识别), most of Natural Language Processing(NLP)（自然语言处理）, Computer Vision(计算机视觉).</code></li><li>  Self-customizing programs <code>E.g., Amazon Netflix product recommendations</code></li><li>  Understanding human learning(brain, real AI)</li></ul><p><a href="https://www.notion.so/What-is-Machine-Learning-de50f4597ece49d0bbe2e872bedbcf50">What is Machine Learning</a></p><p>Machine Learning definition</p><ul><li>  Arthur Samuel. Machine Learning: Field of study that gives computers the ability to learn without being explicitly programmed.</li><li>  Tom Mitchell Well -posed Learning Problem: A computer program is said to learn from experience E with respect to some task T and some performance measure P, if its performance on T, as measured by P, improves with experience E.</li></ul><p>Machine learning algorithms:</p><ul><li>  Supervised learning(监督学习)</li><li>  Unsupervised learning(无监督学习)</li><li>  Others: Reinforcement learning(强化学习), recommender systems(推荐系统).</li><li>  Also talk about: Practical advice for applying learning algorithms</li></ul><h3 id="Supervised-Learning"><a href="#Supervised-Learning" class="headerlink" title="Supervised Learning"></a>Supervised Learning</h3><p>Eg1: Housing price prediction</p><p>“right answers” given</p><p>This is also called a regression problem</p><p>Regression: Predict continuous valued output(price)</p><p>Eg2: Breast cancer(malignant, begin)</p><ul><li>  Classification Discrete valued output(0 or 1)</li></ul>]]></content>
    
    
    <categories>
      
      <category>Machine Learning</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>It is required that your private key files are NOT accessible by others的解决办法</title>
    <link href="/2021/04/28/private-key-files-are-not-accessible/"/>
    <url>/2021/04/28/private-key-files-are-not-accessible/</url>
    
    <content type="html"><![CDATA[<p>今天在Ubuntu上想通过终端ssh直接连接我的服务器，我使用的是密钥登录，然而当我输入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">ssh -<span class="hljs-selector-tag">i</span> cali<span class="hljs-selector-class">.pem</span> ubuntu<span class="hljs-keyword">@my</span> ip<br></code></pre></td></tr></table></figure><p>后，出现Are you sure you want to continue connecting (yes/no)? ，我输入了yes后，却无法连接，出现了</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">It <span class="hljs-built_in">is</span> required that your <span class="hljs-keyword">private</span> <span class="hljs-keyword">key</span> files are <span class="hljs-built_in">NOT</span> accessible <span class="hljs-keyword">by</span> others.<br></code></pre></td></tr></table></figure><p>这里的错误是由于密钥的权限过大所引起的，解决方法为chmod 600。</p><p>直接在终端输入</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chmod</span> <span class="hljs-number">600</span> cali.pem<br></code></pre></td></tr></table></figure><p>这里的cali.pem是我的密钥名称。</p><p>然后再执行一遍ssh登录命令。</p><p>最终便可以远程登录成功。</p>]]></content>
    
    
    <categories>
      
      <category>LInux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu安装Anaconda时出现的一些问题</title>
    <link href="/2021/04/28/ubuntu-anaconda/"/>
    <url>/2021/04/28/ubuntu-anaconda/</url>
    
    <content type="html"><![CDATA[<p>今天给电脑安装了Ubuntu，在给Ubuntu安装Anaconda后，在终端输入conda可检测Anaconda是否成功安装，若提示没有该命令，那么需要输入source ~/.bashrc 来更新环境变量，如果发现这样还是没用，那么需要添加环境变量，</p><p>编辑~/.bashrc文件，在最后面加上</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">export PATH=<span class="hljs-regexp">/home/</span>limttkx<span class="hljs-regexp">/anaconda3/</span>bin:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure><p><img src="https://blogjkfff-1302429038.cos.ap-beijing.myqcloud.com/img/4281.jpg"></p><p>保存退出后，再次输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><p>然后输入 <strong>conda list</strong> 测试是否成功，到这为止算是没有问题。</p><p>安装了Anaconda后，终端的界面会有一些改变，在用户名前会多出（base），这时因为Anaconda自动加入了命令到 ~/.bashrc中， 在我们打开终端的时候自动 执行了 <strong>conda activate base</strong> 命令。</p><p><img src="https://blogjkfff-1302429038.cos.ap-beijing.myqcloud.com/img/4282.png" alt="2"></p><p>一个命令又可以回去：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">conda deactivate</span><br></code></pre></td></tr></table></figure><p>但是如果使用了上述命令，在终端输入Python进入命令行后，之前安装的Anaconda就无法起到作用了。</p><p>进入Python后也有了一点小改变，会出现Anaconda,Inc的字样。</p><p><img src="https://blogjkfff-1302429038.cos.ap-beijing.myqcloud.com/img/4283.png"></p><p>如果安装Anaconda是在非root环境下进行的，当我们使用sudo -i进入root用户后，输入conda会提示没有该命令，这时只需同样编辑~/.bashrc文件，在末尾加上<strong>export PATH=/home/limttkx/anaconda3/bin:$PATH</strong>，便可成功使用Anaconda了。</p><p>最后要注意一点，export PATH=/home/limttkx/anaconda3/bin:$PATH中的limttkx是我的Ubuntu系统的用户名，这里要根据自己设置的用户名来进行更改。</p>]]></content>
    
    
    <categories>
      
      <category>LInux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu中出现无法连接dl.google.com:80</title>
    <link href="/2021/04/27/ubuntu-dl-google-com-80/"/>
    <url>/2021/04/27/ubuntu-dl-google-com-80/</url>
    
    <content type="html"><![CDATA[<h1 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h1><p>Ubuntu 20.04</p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>执行</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">sudo apt-<span class="hljs-keyword">get</span> <span class="hljs-keyword">update</span><br></code></pre></td></tr></table></figure><p>命令时，发现出现以下错误：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Could <span class="hljs-keyword">not</span> <span class="hljs-keyword">connect</span> <span class="hljs-keyword">to</span> dl.google.com:<span class="hljs-number">80</span> (<span class="hljs-number">6.6</span><span class="hljs-number">.6</span><span class="hljs-number">.6</span>), <span class="hljs-keyword">connection</span> timed <span class="hljs-keyword">out</span><br></code></pre></td></tr></table></figure><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>这里通过修改/etc/hosts文件来解决这个问题，先输入</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>hosts<br></code></pre></td></tr></table></figure><p>在hosts文件下面添加一下内容：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">#Download 下载 <br><span class="hljs-number">203.208.41.32</span> dl.google.com <br><span class="hljs-number">203.208.41.32</span> dl-ssl.google.com<br><br>#Groups <br><span class="hljs-number">203.208.41.32</span> groups.google.com<br><br>#Google URL Shortener <br><span class="hljs-number">203.208.41.32</span> goo.gl<br><br>#Google App Engine <br><span class="hljs-number">203.208.41.32</span> appengine.google.com<br></code></pre></td></tr></table></figure><p>修改完成后，使ping命令来测试，结果如下图：</p><p><img src="https://blogjkfff-1302429038.cos.ap-beijing.myqcloud.com/img/pinggoogle.png"></p><p>表示问题成功解决，再次sudo apt-get update时成功。</p>]]></content>
    
    
    <categories>
      
      <category>LInux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>安装ubuntu和windows双系统出现ACPI error、花屏等问题的解决办法</title>
    <link href="/2021/04/26/ubuntu-acpi-bios-error/"/>
    <url>/2021/04/26/ubuntu-acpi-bios-error/</url>
    
    <content type="html"><![CDATA[<p>今天在给Win10的电脑安装Ubuntu时出现了下图所示的问题，显示ACPI BIOS Error，acpi=off，并且出现了很多乱码，在网上搜索半天后，使用了许多办法，最终找到了正确的解决办法。</p><p><img src="https://blogjkfff-1302429038.cos.ap-beijing.myqcloud.com/img/error.jpg"></p><p>解决方案：</p><ol><li> 出现ubuntu安装界面时无需选择任何选项，按e进入一个新界面，新的界面会显示如下的内容：</li></ol><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gradle">setparams  <span class="hljs-string">&#x27;Ubuntu&#x27;</span><br><br>​           <br><br>        set gfxpayload=keep<br><br>        linux <span class="hljs-regexp">/casper/</span>vmlinuz <span class="hljs-keyword">file</span>=<span class="hljs-regexp">/cdrom/</span>pressed/ubuntu.seed maybe-ubiquity quiet splash ---<br><br>​                initrd                   <span class="hljs-regexp">/casper/i</span>nitrd<br></code></pre></td></tr></table></figure><p>2. 将<code>splash</code>后的<code>---</code>换成<code>nomodeset</code>，注意splash与—之间有空格，按F10保存即可。</p><p>3. 后续还要装显卡驱动，博主装的是ubuntu20，自带N卡驱动，所以没有后续了。</p>]]></content>
    
    
    <categories>
      
      <category>LInux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>汇编语言程序设计：用户输入‘1’时显示数字0~9，输入‘2’时显示学号，其他输入时程序退出</title>
    <link href="/2021/04/25/asm-1/"/>
    <url>/2021/04/25/asm-1/</url>
    
    <content type="html"><![CDATA[<p>题目具体为：获取用户输入，并根据用户输入的内容显示不同内容。其中，用户输入‘1’时显示数字0~9，输入‘2’时显示学号，其他输入时程序退出。</p><p>提示：</p><p>INT 21H 功能调用使用说明如下：<br>（1）入口：AH＝00H 或AH＝4CH<br>功能：程序终止<br>（2）入口：AH＝01H<br>功能：读键盘输入到AL中并回显<br>（3）入口：AH＝02H，DL=数据<br>功能：写DL中的数据到显示屏<br>（4）入口：AH＝08H<br>功能：读键盘输入到AL中无回显<br>（5）入口：AH＝09H，DS:DX=字符串首地址，字符串以 ‘$’ 结束<br>功能：显示字符串，直到遇到 ‘$’ 为止</p><p>以下为源码</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.MODEL</span> SMALL   <br><span class="hljs-meta">.STACK</span> <span class="hljs-number">16H</span>   <br><span class="hljs-meta">.DATA</span> <br>MSE <span class="hljs-built_in">DB</span> <span class="hljs-number">30H</span>,<span class="hljs-number">31H</span>,<span class="hljs-number">32H</span>,<span class="hljs-number">33H</span>,<span class="hljs-number">34H</span>,<span class="hljs-number">35H</span>,<span class="hljs-number">36H</span>,<span class="hljs-number">37H</span>,<span class="hljs-number">38H</span>,<span class="hljs-number">39H</span>,<span class="hljs-string">&#x27;$&#x27;</span>    <br>NUM <span class="hljs-built_in">DB</span> <span class="hljs-string">&#x27;202000010001（此处填写自己的学号）&#x27;</span>,<span class="hljs-number">0Dh</span>,<span class="hljs-number">0AH</span>,<span class="hljs-string">&#x27;$&#x27;</span><br><span class="hljs-meta">.CODE</span>   <br><span class="hljs-meta">.STARTUP</span> <br>MAIN PROC <span class="hljs-built_in">FAR</span>      <br><span class="hljs-keyword">CALL</span> INPUT   <br><span class="hljs-keyword">CALL</span> SHOWSTR   <br><span class="hljs-keyword">JMP</span> MAIN   <br><span class="hljs-symbol">EXIT:</span> <span class="hljs-keyword">MOV</span> <span class="hljs-number">AH</span>,<span class="hljs-number">4CH</span>    <br><span class="hljs-keyword">INT</span> <span class="hljs-number">21H</span> <br>MAIN ENDP   <br><br>INPUT PROC <span class="hljs-built_in">NEAR</span>    <br><span class="hljs-keyword">MOV</span> <span class="hljs-number">AH</span>, <span class="hljs-number">08H</span>   <br><span class="hljs-keyword">INT</span> <span class="hljs-number">21H</span>   <br><span class="hljs-keyword">RET</span> <br>INPUT ENDP <br> <br>SHOWSTR PROC <span class="hljs-built_in">NEAR</span>   <br><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">SI</span>, OFFSET  MSE <br><span class="hljs-keyword">CMP</span> <span class="hljs-built_in">AL</span>,<span class="hljs-number">31H</span><br><span class="hljs-keyword">JZ</span> STEP1<br><span class="hljs-keyword">JNZ</span> STEP2<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">STEP1:</span> <span class="hljs-keyword">MOV</span> <span class="hljs-built_in">DX</span>,OFFSET MSE<br><span class="hljs-keyword">MOV</span> <span class="hljs-number">AH</span> ,<span class="hljs-number">9</span><br><span class="hljs-keyword">INT</span> <span class="hljs-number">21H</span><br><span class="hljs-keyword">JMP</span> A<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">STEP2:</span> <span class="hljs-keyword">CMP</span> <span class="hljs-built_in">AL</span>,<span class="hljs-number">32H</span><br><span class="hljs-keyword">JZ</span> STEP3<br><span class="hljs-keyword">JNZ</span> STEP4<br><span class="hljs-keyword">JMP</span> A<br><span class="hljs-symbol">STEP3:</span> <span class="hljs-keyword">MOV</span> <span class="hljs-built_in">SI</span>, OFFSET NUM<br><span class="hljs-keyword">CMP</span> <span class="hljs-built_in">AL</span>,<span class="hljs-number">01H</span><br><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">DX</span>,OFFSET NUM<br><span class="hljs-keyword">MOV</span> <span class="hljs-number">AH</span>,<span class="hljs-number">9</span><br><span class="hljs-keyword">INT</span> <span class="hljs-number">21H</span><br><span class="hljs-keyword">JMP</span> A<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">STEP4:</span> <span class="hljs-keyword">MOV</span> <span class="hljs-number">AH</span>, <span class="hljs-number">00H</span><br><span class="hljs-keyword">INT</span> <span class="hljs-number">21H</span><br><span class="hljs-keyword">JMP</span> A<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">A:</span> <span class="hljs-keyword">RET</span>   <br> <br>SHOWSTR ENDP  <br>END <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>汇编语言</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Deep Learning Notes</title>
    <link href="/2021/04/24/deep-learning-notes/"/>
    <url>/2021/04/24/deep-learning-notes/</url>
    
    <content type="html"><![CDATA[<h1 id="Course-1-Neural-Networks-and-Deep-Learning"><a href="#Course-1-Neural-Networks-and-Deep-Learning" class="headerlink" title="Course 1: Neural Networks and Deep Learning"></a>Course 1: Neural Networks and Deep Learning</h1><ul><li>Course 1: Neural Networks and Deep Learning<ul><li>Week 1: Introduction to Deep Learning<ul><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#learning-objectives">Learning Objectives</a></li><li>Introduction to Deep Learning<ul><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#what-is-a-neural-network">What is a neural network</a></li><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#supervised-learning-with-neural-networks">Supervised learning with neural networks</a></li><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#why-is-deep-learning-taking-off">Why is deep learning taking off</a></li></ul></li></ul></li><li>Week 2: Neural Networks Basics<ul><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#learning-objectives-1">Learning Objectives</a></li><li>Logistic Regression as a Neural Network<ul><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#binary-classification">Binary Classification</a></li><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#logistic-regression">Logistic Regression</a></li><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#logistic-regression-cost-function">Logistic Regression Cost Function</a></li><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#gradient-descent">Gradient Descent</a></li><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#derivatives">Derivatives</a></li><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#computation-graph">Computation Graph</a></li><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#derivatives-with-a-computation-graph">Derivatives with a Computation Graph</a></li><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#logistic-regression-gradient-descent">Logistic Regression Gradient Descent</a></li><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#gradient-descent-on-m-examples">Gradient Descent on m Examples</a></li><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#derivation-of-dldz">Derivation of dL/dz</a></li></ul></li><li>Python and Vectorization<ul><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#vectorization">Vectorization</a></li><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#vectorizing-logistic-regression">Vectorizing Logistic Regression</a></li><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#broadcasting-in-python">Broadcasting in Python</a></li><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#a-note-on-pythonnumpy-vectors">A note on python/numpy vectors</a></li><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#quick-tour-of-jupyteripython-notebooks">Quick tour of Jupyter/iPython Notebooks</a></li><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#explanation-of-logistic-regression-cost-function-optional">Explanation of logistic regression cost function (optional)</a></li></ul></li></ul></li><li>Week 3: Shallow Neural Networks<ul><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#learning-objectives-2">Learning Objectives</a></li><li>Shallow Neural Network<ul><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#neural-networks-overview">Neural Networks Overview</a></li><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#neural-network-representation">Neural Network Representation</a></li><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#computing-a-neural-networks-output">Computing a Neural Network’s Output</a></li><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#vectorizing-across-multiple-examples">Vectorizing across multiple examples</a></li><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#activation-functions">Activation functions</a></li><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#why-do-you-need-non-linear-activation-functions">Why do you need non-linear activation functions</a></li><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#derivatives-of-activation-functions">Derivatives of activation functions</a></li><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#gradient-descent-for-neural-networks">Gradient descent for Neural Networks</a></li><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#random-initialization">Random initialization</a></li></ul></li></ul></li><li>Week 4: Deep Neural Networks<ul><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#learning-objectives-3">Learning Objectives</a></li><li>Deep Neural Network<ul><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#deep-l-layer-neural-network">Deep L-layer neural network</a></li><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#forward-propagation-in-a-deep-network">Forward Propagation in a deep network</a></li><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#getting-your-matrix-dimensions-right">Getting your matrix dimensions right</a></li><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#why-deep-representations">Why deep representations</a></li><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#building-blocks-of-deep-neural-networks">Building blocks of deep neural networks</a></li><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#forward-and-backward-propagation">Forward and Backward Propagation</a></li><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#parameters-vs-hyperparameters">Parameters vs Hyperparameters</a></li></ul></li><li>  <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/readme.md#what-does-this-have-to-do-with-the-brain">What does this have to do with the brain</a></li></ul></li></ul></li></ul><h2 id="Week-1-Introduction-to-Deep-Learning"><a href="#Week-1-Introduction-to-Deep-Learning" class="headerlink" title="Week 1: Introduction to Deep Learning"></a>Week 1: Introduction to Deep Learning</h2><h3 id="Learning-Objectives"><a href="#Learning-Objectives" class="headerlink" title="Learning Objectives"></a>Learning Objectives</h3><ul><li>  Discuss the major trends driving the rise of deep learning</li><li>  Explain how deep learning is applied to <a href="https://en.wikipedia.org/wiki/Supervised_learning">supervised learning</a></li><li>  List the major categories of models (CNNs, RNNs, etc.), and when they should be applied</li><li>  Assess appropriate use cases for deep learning</li></ul><h3 id="Introduction-to-Deep-Learning"><a href="#Introduction-to-Deep-Learning" class="headerlink" title="Introduction to Deep Learning"></a>Introduction to Deep Learning</h3><h4 id="What-is-a-neural-network"><a href="#What-is-a-neural-network" class="headerlink" title="What is a neural network"></a>What is a neural network</h4><p>It is a powerful learning algorithm(算法) inspired by how the brain works. Here is a definition from <a href="https://www.mathworks.com/discovery/neural-network.html">mathworks</a>:</p><p><img src="https://github.com/lijqhs/deeplearning-notes/raw/main/C1-Neural-Networks-and-Deep-Learning/img/neural-network.svg" alt="neural-network"></p><p><em>image source: <a href="https://www.mathworks.com/discovery/neural-network.html">mathworks</a></em></p><blockquote><p>A neural network (also called an artificial neural network) is an adaptive system that learns by using interconnected nodes or neurons in a layered structure that resembles a human brain. A neural network can learn from data—so it can be trained to recognize patterns, classify data, and forecast future events.</p><p>A neural network breaks down the input into layers of abstraction. It can be trained using many examples to recognize patterns in speech or images, for example, just as the human brain does. Its behavior is defined by the way its individual elements are connected and by the strength, or weights, of those connections. These weights are automatically adjusted during training according to a specified learning rule until the artificial neural network performs the desired task correctly.</p><p>A neural network combines several processing layers, using simple elements operating in parallel and inspired by biological nervous systems. It consists of an input layer, one or more hidden layers, and an output layer. In each layer there are several nodes, or neurons, with each layer using the output of the previous layer as its input, so neurons interconnect the different layers. Each neuron typically has weights that are adjusted during the learning process, and as the weight decreases or increases, it changes the strength of the signal of that neuron.</p><p>神经网络(也被称为人工神经网络)是一种自适应系统，通过使用类似于人类大脑的分层结构中的互连节点或神经元进行学习。神经网络可以从数据中学习——它可以被训练来识别模式、分类数据和预测未来的事件。</p><p>神经网络将输入分解成抽象层。例如，它可以用许多例子来训练，以识别语言或图像中的模式，就像人类的大脑一样。它的行为是由各个元素的连接方式以及这些连接的强度或权重来定义的。这些权重在训练过程中根据指定的学习规则自动调整，直到人工神经网络正确地执行所需的任务。</p><p>神经网络结合了几个处理层，使用简单的元素并行运作，并受到生物神经系统的启发。它由一个输入层、一个或多个隐藏层和一个输出层组成。每一层都有几个节点或神经元，每一层都将前一层的输出作为输入，因此神经元将不同的层连接起来。每个神经元都有在学习过程中调整的权重，随着权重的减少或增加，它会改变该神经元的信号强度。</p></blockquote><h4 id="Supervised-learning-with-neural-networks"><a href="#Supervised-learning-with-neural-networks" class="headerlink" title="Supervised learning with neural networks"></a>Supervised learning with neural networks</h4><p>In supervised learning, we are given a data set and already know what our correct output should look like, having the idea that there is a relationship between the input and the output.</p><p>Supervised learning problems are categorized into “regression（回归分析）” and “classification（分类）” problems(Statistical classification). In a regression problem, we are trying to predict results within a <strong>continuous output</strong>, meaning that we are trying to map input variables to some continuous function. In a classification problem, we are instead trying to predict results in a <strong>discrete output</strong>. In other words, we are trying to map input variables into discrete categories.</p><p><em>Examples of supervised learning applications</em>:</p><p>Input(X)</p><p>Output(y)</p><p>Application</p><p>Home features</p><p>Price</p><p>Real Estate</p><p>Ad, user info</p><p>Click on ad? (0/1)</p><p>Online Advertising</p><p>Image</p><p>Object (1,…,1000)</p><p>Photo tagging</p><p>Audio</p><p>Text transcript</p><p>Speech recognition</p><p>English</p><p>Chinese</p><p>Machine translation</p><p>Image, Radar（雷达） info</p><p>Position of other cars</p><p>Autonomous driving</p><p><em>Structured vs unstructured data</em></p><ul><li>  Structured data refers to things that has a defined meaning such as price, age</li><li>  Unstructured data refers to thing like pixel, raw audio, text.</li></ul><h4 id="Why-is-deep-learning-taking-off"><a href="#Why-is-deep-learning-taking-off" class="headerlink" title="Why is deep learning taking off"></a>Why is deep learning taking off</h4><p>Deep learning is taking off due to a large amount of data available through the digitization of the society, faster computation and innovation in the development of neural network algorithm.</p><p><em>Two things have to be considered to get to the high level of performance</em>:</p><ol><li> Being able to train a big enough neural network</li><li> Huge amount of labeled data</li></ol><h2 id="Week-2-Neural-Networks-Basics"><a href="#Week-2-Neural-Networks-Basics" class="headerlink" title="Week 2: Neural Networks Basics"></a>Week 2: Neural Networks Basics</h2><h3 id="Learning-Objectives-1"><a href="#Learning-Objectives-1" class="headerlink" title="Learning Objectives"></a>Learning Objectives</h3><ul><li>  Build a logistic regression model structured as a shallow neural network</li><li>  Build the general architecture of a learning algorithm, including parameter initialization, cost function and gradient calculation, and optimization implemetation (gradient descent)</li><li>  Implement computationally efficient and highly vectorized versions of models</li><li>  Compute derivatives for logistic regression, using a backpropagation mindset</li><li>  Use Numpy functions and Numpy matrix/vector operations</li><li>  Work with iPython Notebooks</li><li>  Implement vectorization across multiple training examples</li></ul><h3 id="Logistic-Regression-as-a-Neural-Network"><a href="#Logistic-Regression-as-a-Neural-Network" class="headerlink" title="Logistic Regression as a Neural Network"></a>Logistic Regression as a Neural Network</h3><h4 id="Binary-Classification"><a href="#Binary-Classification" class="headerlink" title="Binary Classification"></a>Binary Classification</h4><p>Week2 focuses on the basics of neural network programming, especially some important techniques, such as how to deal with m training examples in the computation and how to implement forward and backward propagation. To illustrate this process step by step, Andrew Ng took a lot of time explaining how Logistic regression is implemented for a binary classification, here a Cat vs. Non-Cat classification, which would take an image as an input and output a label to propagation whether this image is a cat (label 1) or not (label 0).</p><p>An image is store in the computer in three separate matrices corresponding to the Red, Green, and Blue color channels of the image. The three matrices have the same size as the image, for example, the resolution of the cat image is 64 pixels x 64 pixels, the three matrices (RGB) are 64 by 64 each. To create a feature vector, x, the pixel intensity values will be “unroll” or “reshape” for each color. The dimension of the input feature vector x is <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/img/n_x_64_64_3_12288.svg"></a>.</p><h4 id="Logistic-Regression"><a href="#Logistic-Regression" class="headerlink" title="Logistic Regression"></a>Logistic Regression</h4><blockquote><p>Logistic regression is useful for situations in which you want to be able to predict the presence or absence of a characteristic or outcome based on values of a set of predictor variables. It is similar to a linear regression model but is suited to models where the dependent variable is dichotomous. Logistic regression coefficients can be used to estimate odds ratios for each of the independent variables in the model. Logistic regression is applicable to a broader range of research situations than discriminant analysis. (from <a href="https://www.ibm.com/support/knowledgecenter/en/SSLVMB_26.0.0/statistics_mainhelp_ddita/spss/regression/idh_lreg.html">ibm knowledge center</a>)</p></blockquote><p>A detailed guide on <a href="https://machinelearningmastery.com/logistic-regression-for-machine-learning/">Logistic Regression for Machine Learning</a> by Jason Brownlee is the best summary of this topic for data science engineers.</p><p>Andrew Ng’s course on Logistic Regression here focuses more on LR as the simplest neural network, as its programming implementation is a good starting point for the deep neural networks that will be covered later.</p><h4 id="Logistic-Regression-Cost-Function"><a href="#Logistic-Regression-Cost-Function" class="headerlink" title="Logistic Regression Cost Function"></a>Logistic Regression Cost Function</h4><p>In Logistic regression, we want to train the parameters <code>w</code> and <code>b</code>, we need to define a cost function.</p><p><a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/img/lr-eqn.svg"></a>, where <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/img/lr-sigmoid.svg"></a>Given <a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/img/lr-input.svg"></a>, we want<a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/img/lr-target.svg"></a></p><p>The loss function measures the discrepancy between the prediction (𝑦̂(𝑖)) and the desired output (𝑦(𝑖)). In other words, the loss function computes the error for a single training example.</p><p><img src="https://github.com/lijqhs/deeplearning-notes/raw/main/C1-Neural-Networks-and-Deep-Learning/img/lr-loss-function.png" alt="lr-loss-function"></p><p>The cost function is the average of the loss function of the entire training set. We are going to find the parameters 𝑤 𝑎𝑛𝑑 𝑏 that minimize the overall cost function.</p><p><img src="https://github.com/lijqhs/deeplearning-notes/raw/main/C1-Neural-Networks-and-Deep-Learning/img/lr-cost-function.png" alt="lr-cost-function"></p><p>The loss function measures how well the model is doing on the single training example, whereas the cost function measures how well the parameters w and b are doing on the entire training set.</p><h4 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h4><p>As you go through any course on machine learning or deep learning, gradient descent the concept that comes up most often. It is used when training models, can be combined with every algorithm and is easy to understand and implement.</p><p>The goal of the training model is to minimize the loss function, usually with randomly initialized parameters, and using a gradient descent method with the following main steps. Randomization of parameters initialization is not necessary in logistic regression (zero initialization is fine), but it is necessary in multilayer neural networks.</p><ol><li> Start calculating the cost and gradient for the given training set of (x,y) with the parameters w and b.</li><li> update parameters w and b with pre-set learning rate: w_new =w_old – learning_rate * gradient_of_at(w_old) Repeat these steps until you reach the minimal values of cost function.</li></ol><p>The fancy image below comes from <a href="https://www.analyticsvidhya.com/blog/2020/10/what-does-gradient-descent-actually-mean/">analytics vidhya</a>.</p><p><img src="https://github.com/lijqhs/deeplearning-notes/raw/main/C1-Neural-Networks-and-Deep-Learning/img/gradient-descent.jpeg" alt="gradient-descent"></p><h4 id="Derivatives"><a href="#Derivatives" class="headerlink" title="Derivatives"></a>Derivatives</h4><p>Derivatives are crucial in backpropagation during neural network training, which uses the concept of computational graphs and the chain rule of derivatives to make the computation of thousands of parameters in neural networks more efficient.</p><h4 id="Computation-Graph"><a href="#Computation-Graph" class="headerlink" title="Computation Graph"></a>Computation Graph</h4><p>A nice illustration by <a href="https://colah.github.io/posts/2015-08-Backprop/">colah’s blog</a> can help better understand.</p><p>Computational graphs are a nice way to think about mathematical expressions. For example, consider the expression e=(a+b)∗(b+1). There are three operations: two additions and one multiplication. To help us talk about this, let’s introduce two intermediary variables, c and d so that every function’s output has a variable. We now have:</p><p>c=a+b<br>d=b+1<br>e=c∗d</p><p>To create a computational graph, we make each of these operations, along with the input variables, into nodes. When one node’s value is the input to another node, an arrow goes from one to another.</p><p><img src="https://github.com/lijqhs/deeplearning-notes/raw/main/C1-Neural-Networks-and-Deep-Learning/img/tree-def.png" alt="tree-def"></p><h4 id="Derivatives-with-a-Computation-Graph"><a href="#Derivatives-with-a-Computation-Graph" class="headerlink" title="Derivatives with a Computation Graph"></a>Derivatives with a Computation Graph</h4><p>If one wants to understand derivatives in a computational graph, the key is to understand derivatives on the edges. If a directly affects c, then we want to know how it affects c. If a changes a little bit, how does c change? We call this the partial derivative of c with respect to a.</p><p><img src="https://github.com/lijqhs/deeplearning-notes/raw/main/C1-Neural-Networks-and-Deep-Learning/img/tree-eval-derivs.png" alt="tree-eval-derivs"></p><h4 id="Logistic-Regression-Gradient-Descent"><a href="#Logistic-Regression-Gradient-Descent" class="headerlink" title="Logistic Regression Gradient Descent"></a>Logistic Regression Gradient Descent</h4><p>Andrew did logistic regreesion gradient descent computation using the computation graph in order to get us familiar with computation graph ideas for neural networks.</p><h4 id="Gradient-Descent-on-m-Examples"><a href="#Gradient-Descent-on-m-Examples" class="headerlink" title="Gradient Descent on m Examples"></a>Gradient Descent on m Examples</h4><p>The cost function is computed as an average of the <code>m</code> individual loss values, the gradient with respect to each parameter should also be calculated as the mean of the <code>m</code> gradient values on each example.</p><p>The calculattion process can be done in a loop through m examples.</p><p>J=0<br>dw=np.zeros(n)<br>db=0<br>​<br>for i in range(m):<br>  z[i] = w.transpose() * x[i] + b<br>  a[i] = sigmoid(z[i])<br>  J = J + (-[y[i]*log(a[i])+(1-y[i])*log(1-a[i])])<br>  dz[i] = a[i] - y[i]      </p><h1 id="inner-loop-for-n-features-later-will-be-optimized-by-vectorization"><a href="#inner-loop-for-n-features-later-will-be-optimized-by-vectorization" class="headerlink" title="inner loop for n features, later will be optimized by vectorization"></a>inner loop for n features, later will be optimized by vectorization</h1><p>  for j in range(n):<br>    dw[j] = dw[j] + x[i][j] * dz[i]<br>  <br>  db = db + dz[i]<br>  <br>j = j / m<br>dw = dw / m<br>db = db / m</p><p>After gradient computation, we can update parameters with a learning rate <code>alpha</code>.</p><p># vectorization should also applied here<br>for j in range(n):<br>  w[j] = w[j] - alpha * dw[j]<br>b = b - alpha * db</p><p>As you can see above, to update parameters one step, we have to go throught all the <code>m</code> examples. This will be mentioned again in later videos. Stay tuned!</p><h4 id="Derivation-of-dL-dz"><a href="#Derivation-of-dL-dz" class="headerlink" title="Derivation of dL/dz"></a>Derivation of dL/dz</h4><p>You may be wondering why <code>dz=a-y</code> in the above code is calculated this way and where it comes from. Here is a <a href="https://www.coursera.org/learn/neural-networks-deep-learning/discussions/weeks/2/threads/ysF-gYfISSGBfoGHyLkhYg">detailed derivation process of dl/dz</a> on discussion forum.</p><h3 id="Python-and-Vectorization"><a href="#Python-and-Vectorization" class="headerlink" title="Python and Vectorization"></a>Python and Vectorization</h3><h4 id="Vectorization"><a href="#Vectorization" class="headerlink" title="Vectorization"></a>Vectorization</h4><p>Both GPU and CPU have parallelization instructions. They’re sometimes called SIMD instructions, which stands for a single instruction multiple data. The rule of thumb to remember is whenever possible avoid using explicit four loops.</p><h4 id="Vectorizing-Logistic-Regression"><a href="#Vectorizing-Logistic-Regression" class="headerlink" title="Vectorizing Logistic Regression"></a>Vectorizing Logistic Regression</h4><p>If we stack all the <code>m</code> examples of <code>x</code> we have a input matrix <code>X</code> with each column representing an example. So by the builtin vectorization of numpy we can simplify the above gradient descent calculation with a few lines of code which can boost the computational efficiency definitely.</p><p>Z = np.dot(w.T, X) + b<br>A = sigmoid(Z)<br>dz = A - Y<br>​<br># in constrast to the inner loop above, vectorization is used here to boost computation<br>dw = 1/m * np.dot(X, dz.T)<br>db = 1/m * np.sum(dz)  </p><p>Update parameters:</p><p>w = w - alpha * dw<br>b = b - alpha * db</p><h4 id="Broadcasting-in-Python"><a href="#Broadcasting-in-Python" class="headerlink" title="Broadcasting in Python"></a>Broadcasting in Python</h4><p>The term broadcasting describes how numpy treats arrays with different shapes during arithmetic operations. Subject to certain constraints, the smaller array is “broadcast” across the larger array so that they have compatible shapes. Broadcasting provides a means of vectorizing array operations so that looping occurs in C instead of Python. More detailed examples on <a href="https://numpy.org/doc/stable/user/theory.broadcasting.html#array-broadcasting-in-numpy">numpy.org</a>.</p><p><img src="https://github.com/lijqhs/deeplearning-notes/raw/main/C1-Neural-Networks-and-Deep-Learning/img/theory.broadcast_2.gif" alt="theory.broadcast_2.gif"></p><h4 id="A-note-on-python-numpy-vectors"><a href="#A-note-on-python-numpy-vectors" class="headerlink" title="A note on python/numpy vectors"></a>A note on python/numpy vectors</h4><p>Do not use rank 1 arrays:</p><p># an example of rank 1 array<br>a = np.random.randn(5)<br>a.shape<br># (5,)</p><p>Instead, we should use these:</p><p>a = np.random.randn(5,1)<br>a = np.random.randn(1,5)</p><p>Or, just reshape the first case if necessary:</p><p>a = a.reshape(5,1)<br>a.shape<br># (5,1)</p><h4 id="Quick-tour-of-Jupyter-iPython-Notebooks"><a href="#Quick-tour-of-Jupyter-iPython-Notebooks" class="headerlink" title="Quick tour of Jupyter/iPython Notebooks"></a>Quick tour of Jupyter/iPython Notebooks</h4><p>The Jupyter Notebook is an open-source web application that allows you to create and share documents that contain live code, equations, visualizations and narrative text. Uses include: data cleaning and transformation, numerical simulation, statistical modeling, data visualization, machine learning, and much more.</p><p>JupyterLab is a web-based interactive development environment for Jupyter notebooks, code, and data. JupyterLab is flexible: configure and arrange the user interface to support a wide range of workflows in data science, scientific computing, and machine learning. JupyterLab is extensible and modular: write plugins that add new components and integrate with existing ones.</p><p>See <a href="https://jupyter.org/">jupyter.org</a></p><p>pip install jupyterlab</p><p>To open jupyter lab, run</p><p>jupyter-lab</p><h4 id="Explanation-of-logistic-regression-cost-function-optional"><a href="#Explanation-of-logistic-regression-cost-function-optional" class="headerlink" title="Explanation of logistic regression cost function (optional)"></a>Explanation of logistic regression cost function (optional)</h4><p>But so to summarize, by minimizing this cost function J(w,b) we’re really carrying out maximum likelihood estimation with the logistic regression model because minimizing the loss corresponds to maximizing the log of the probability.</p><p><img src="https://github.com/lijqhs/deeplearning-notes/raw/main/C1-Neural-Networks-and-Deep-Learning/img/prob-conditional.svg" alt="prob"></p><p><img src="https://github.com/lijqhs/deeplearning-notes/raw/main/C1-Neural-Networks-and-Deep-Learning/img/prob-cost.svg" alt="prob-cost"></p><h2 id="Week-3-Shallow-Neural-Networks"><a href="#Week-3-Shallow-Neural-Networks" class="headerlink" title="Week 3: Shallow Neural Networks"></a>Week 3: Shallow Neural Networks</h2><h3 id="Learning-Objectives-2"><a href="#Learning-Objectives-2" class="headerlink" title="Learning Objectives"></a>Learning Objectives</h3><ul><li>  Describe hidden units and hidden layers</li><li>  Use units with a non-linear activation function, such as tanh</li><li>  Implement forward and backward propagation</li><li>  Apply random initialization to your neural network</li><li>  Increase fluency in Deep Learning notations and Neural Network Representations</li><li>  Implement a 2-class classification neural network with a single hidden layer</li></ul><h3 id="Shallow-Neural-Network"><a href="#Shallow-Neural-Network" class="headerlink" title="Shallow Neural Network"></a>Shallow Neural Network</h3><h4 id="Neural-Networks-Overview"><a href="#Neural-Networks-Overview" class="headerlink" title="Neural Networks Overview"></a>Neural Networks Overview</h4><p>This is a simple 2-layer neural network.</p><p><img src="https://github.com/lijqhs/deeplearning-notes/raw/main/C1-Neural-Networks-and-Deep-Learning/img/neural-network-2-layer.png" alt="neural-network-2-layer"></p><p>Using computation graph, the forward computation process is like this.</p><p><img src="https://github.com/lijqhs/deeplearning-notes/raw/main/C1-Neural-Networks-and-Deep-Learning/img/neural-network-2-layer-forward.png" alt="neural-network-2-layer-forward"></p><h4 id="Neural-Network-Representation"><a href="#Neural-Network-Representation" class="headerlink" title="Neural Network Representation"></a>Neural Network Representation</h4><p>A neural network consists of three types of layers: input layer, hidden layer and output layer. Input layer is not counted in the number of layers of one neural network. When we talk about training a neural network, basically we are training parameters associated with the hidden layers and the output layer.</p><ul><li>  Input layer: input features (x1, x2, x3, …) stack up vertically</li><li>  Hidden layer(s): values for the nodes are not observed</li><li>  Output layer: responsilble for generating the predicted value</li></ul><p><img src="https://github.com/lijqhs/deeplearning-notes/raw/main/C1-Neural-Networks-and-Deep-Learning/img/nn-representation.png" alt="nn-representation"></p><h4 id="Computing-a-Neural-Network’s-Output"><a href="#Computing-a-Neural-Network’s-Output" class="headerlink" title="Computing a Neural Network’s Output"></a>Computing a Neural Network’s Output</h4><p><img src="https://github.com/lijqhs/deeplearning-notes/raw/main/C1-Neural-Networks-and-Deep-Learning/img/nn-computation.png" alt="nn-computation"></p><p>In the above example, <code>z[1]</code> is the result of linear computation of the input values and the parameters of the hidden layer and <code>a[1]</code> is the activation as a sigmoid function of <code>z[1]</code>.</p><p>Generally, in a two-layer neural network, if we have <code>nx</code> features of input <code>x</code> and <code>n1</code> neurons of hidden layer and one output value, we have the following dimensions of each variable. Specifically, we have <code>nx=3, n1=4</code> in the above network.</p><p>variable</p><p>shape</p><p>description</p><p><code>x</code></p><p><code>(nx,1)</code></p><p>input value with <code>nx</code> features</p><p><code>W[1]</code></p><p><code>(n1,nx)</code></p><p>weight matrix of first layer, i.e., hidden layer</p><p><code>b[1]</code></p><p><code>(n1,1)</code></p><p>bias terms of hidden layer</p><p><code>z[1]</code></p><p><code>(n1,1)</code></p><p>result of linear computation of hidden layer</p><p><code>a[1]</code></p><p><code>(n1,1)</code></p><p>activation of hidden layer</p><p><code>W[2]</code></p><p><code>(1,n1)</code></p><p>weight matrix of second layer, i.e., output layer here</p><p><code>b[2]</code></p><p><code>(1,1)</code></p><p>bias terms of output layer</p><p><code>z[2]</code></p><p><code>(1,1)</code></p><p>result of linear computation of output layer</p><p><code>a[2]</code></p><p><code>(1,1)</code></p><p>activation of output layer, i.e., output value</p><p>We should compute <code>z[1], a[1], z[2], a[2]</code> for each example <code>i</code> of <code>m</code> examples:</p><p>for i in range(m):<br>  z[1][i] = W[1]*x[i] + b[1]<br>  a[1][i] = sigmoid(z[1][i])<br>  z[2][i] = W[2]*a[1][i] + b[2]<br>  a[2][i] = sigmoid(z[2][i])</p><h4 id="Vectorizing-across-multiple-examples"><a href="#Vectorizing-across-multiple-examples" class="headerlink" title="Vectorizing across multiple examples"></a>Vectorizing across multiple examples</h4><p>Just as we have already been familiar with vectorization and broadcasting in the logistic regression, we can also apply the same method to the neural networks training. Inevitably, we have to go through the <code>m</code> examples of input values in the process of computation. Stacking them together is good idea. So we have the following vectorizing variables with only small differences as before.</p><p>variable</p><p>shape</p><p>description</p><p><code>X</code></p><p><code>(nx,m)</code></p><p>input values with <code>nx</code> features</p><p><code>W[1]</code></p><p><code>(n1,nx)</code></p><p>weight matrix of first layer, i.e., hidden layer</p><p><code>b[1]</code></p><p><code>(n1,1)</code></p><p>bias terms of hidden layer</p><p><code>Z[1]</code></p><p><code>(n1,m)</code></p><p>results of linear computation of hidden layer</p><p><code>A[1]</code></p><p><code>(n1,m)</code></p><p>activations of hidden layer</p><p><code>W[2]</code></p><p><code>(1,n1)</code></p><p>weight matrix of second layer, i.e., output layer here</p><p><code>b[2]</code></p><p><code>(1,1)</code></p><p>bias terms of output layer</p><p><code>Z[2]</code></p><p><code>(1,1)</code></p><p>results of linear computation of output layer</p><p><code>A[2]</code></p><p><code>(1,1)</code></p><p>activations of output layer, i.e., output value</p><p>Now we can compute <code>Z[1], A[1], Z[2], A[2]</code> all at once.</p><p>Z[1] = W[1]*X + b[1]<br>A[1] = sigmoid(Z[1])<br>Z[2] = W[2]*A[1] + b[2]<br>A[2] = sigmoid(Z[2])</p><h4 id="Activation-functions"><a href="#Activation-functions" class="headerlink" title="Activation functions"></a>Activation functions</h4><p>So far, we know that a non-linear function is applied in the output step of each layer. Actually there are several common activation functions which are also popular.</p><p><a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/img/sigmoid-latex.svg"><img src="https://github.com/lijqhs/deeplearning-notes/raw/main/C1-Neural-Networks-and-Deep-Learning/img/sigmoid-latex.svg" alt="a=1/(1+np.exp(-z))"></a></p><h4 id="Why-do-you-need-non-linear-activation-functions"><a href="#Why-do-you-need-non-linear-activation-functions" class="headerlink" title="Why do you need non-linear activation functions"></a>Why do you need non-linear activation functions</h4><blockquote><p>If we only allow linear activation functions in a neural network, the output will just be a linear transformation of the input, which is not enough to form a universal function approximator. Such a network can just be represented as a matrix multiplication, and you would not be able to obtain very interesting behaviors from such a network.</p></blockquote><p>A good explanation on <a href="https://stackoverflow.com/questions/9782071/why-must-a-nonlinear-activation-function-be-used-in-a-backpropagation-neural-net">Stack Overflow</a>.</p><h4 id="Derivatives-of-activation-functions"><a href="#Derivatives-of-activation-functions" class="headerlink" title="Derivatives of activation functions"></a>Derivatives of activation functions</h4><p><a href="https://github.com/lijqhs/deeplearning-notes/blob/main/C1-Neural-Networks-and-Deep-Learning/img/sigmoid-latex.svg"><img src="https://github.com/lijqhs/deeplearning-notes/raw/main/C1-Neural-Networks-and-Deep-Learning/img/sigmoid-latex.svg" alt="a=1/(1+np.exp(-z))"></a></p><h4 id="Gradient-descent-for-Neural-Networks"><a href="#Gradient-descent-for-Neural-Networks" class="headerlink" title="Gradient descent for Neural Networks"></a>Gradient descent for Neural Networks</h4><p>Again we will have a single hidden layer in our neural network, this section focuses on the equations we need to implement in order to get back-propagation or to get gradient descent working. Suppose we have nx input features, n1 hidden units and n2 output units in our examples. In the previous vectorization section we have n2 equals one. Here we will have a more general representation in order to give ourselves a smoother transition to the next week of the course.</p><p><em>Variables</em>:</p><p>variable</p><p>shape</p><p>description</p><p><code>X</code></p><p><code>(nx,m)</code></p><p>input values with <code>nx</code> features</p><p><code>Z[1]</code></p><p><code>(n1,m)</code></p><p>results of linear computation of hidden layer</p><p><code>A[1]</code></p><p><code>(n1,m)</code></p><p>activations of hidden layer</p><p><code>Z[2]</code></p><p><code>(n2,1)</code></p><p>results of linear computation of output layer</p><p><code>A[2]</code></p><p><code>(n2,1)</code></p><p>activations of output layer, i.e., output value</p><p><em>Parameters</em>:</p><p>variable</p><p>shape</p><p>description</p><p><code>W[1]</code></p><p><code>(n1,nx)</code></p><p>weight matrix of first layer, i.e., hidden layer</p><p><code>b[1]</code></p><p><code>(n1,1)</code></p><p>bias terms of hidden layer</p><p><code>W[2]</code></p><p><code>(n2,n1)</code></p><p>weight matrix of second layer, i.e., output layer here</p><p><code>b[2]</code></p><p><code>(n2,1)</code></p><p>bias terms of output layer</p><p><em>Forward propagation</em> computes all the variable values of each layer, which will also be used in the backpropagation computation.</p><p>Z[1] = W[1]*X + b[1]<br>A[1] = sigmoid(Z[1])<br>Z[2] = W[2]*A[1] + b[2]<br>A[2] = sigmoid(Z[2])</p><p><em>Backpropagation</em> computes the derivatives of parameters by the chain rule.</p><p># backpropagation<br>dZ[2] = A[2] - Y  # get this with combination of the derivative of cost function and g’[2]<br>dW[2] = 1/m * np.matmul(dZ[2], A[1].T)<br>db[2] = 1/m * np.sum(dZ[2], axis=1, keepdims=True)<br>dZ[1] = np.multiply(np.matmul(W[2].T, dZ[2]), g’[1](Z[1]))  # derivative of activation is used here<br>dW[1] = 1/m * np.matmul(dZ[1], X.T)<br>db[1] = 1/m * np.sum(dZ[1])</p><h1 id="update-parameters"><a href="#update-parameters" class="headerlink" title="update parameters"></a>update parameters</h1><p>W[1] = W[1] - learning_rate * dW[1]<br>b[1] = b[1] - learning_rate * db[1]<br>W[2] = W[2] - learning_rate * dW[2]<br>b[2] = b[2] - learning_rate * db[2]</p><p><em>Repeat</em> forward propagation and backpropagation a lot of times until the parameters look like they’re converging.</p><h4 id="Random-initialization"><a href="#Random-initialization" class="headerlink" title="Random initialization"></a>Random initialization</h4><p>Initialization of parameters:</p><p>W[1] = np.random.randn((n1,nx)) * 0.01  # randomized small numbers<br>b[1] = np.zeros((n1,1))                 # zeros is fine for bias terms<br>W[2] = np.random.randn((n2,n1)) * 0.01<br>b[2] = np.zeros((n2,1))</p><p><em>Why randomized initialization?</em></p><p>In order to break the symmetry for hidden layers.</p><blockquote><p>Imagine that you initialize all weights to the same value (e.g. zero or one). In this case, each hidden unit will get exactly the same signal. E.g. if all weights are initialized to 1, each unit gets signal equal to sum of inputs (and outputs sigmoid(sum(inputs))). If all weights are zeros, which is even worse, every hidden unit will get zero signal. No matter what was the input - if all weights are the same, all units in hidden layer will be the same too.</p></blockquote><p>See some interesting discussion on <a href="https://stackoverflow.com/questions/20027598/why-should-weights-of-neural-networks-be-initialized-to-random-numbers">Stack Overflow</a>.</p><p><em>Why small numbers?</em></p><p>This is for sigmoid or tanh activation function. If weight parameters are initially large, we are more likely to get large values of <code>z</code> calculated by <code>z=wx+b</code>. If we check this in the graph of sigmoid(tanh) function, we can see the slope in large <code>z</code> is very close to zero, which would slow down the learning process since parameters are updated by only a very small amount each time.</p><h2 id="Week-4-Deep-Neural-Networks"><a href="#Week-4-Deep-Neural-Networks" class="headerlink" title="Week 4: Deep Neural Networks"></a>Week 4: Deep Neural Networks</h2><h3 id="Learning-Objectives-3"><a href="#Learning-Objectives-3" class="headerlink" title="Learning Objectives"></a>Learning Objectives</h3><ul><li>  Describe the successive block structure of a deep neural network</li><li>  Build a deep L-layer neural network</li><li>  Analyze matrix and vector dimensions to check neural network implementations</li><li>  Use a cache to pass information from forward to back propagation</li><li>  Explain the role of hyperparameters in deep learning</li></ul><h3 id="Deep-Neural-Network"><a href="#Deep-Neural-Network" class="headerlink" title="Deep Neural Network"></a>Deep Neural Network</h3><h4 id="Deep-L-layer-neural-network"><a href="#Deep-L-layer-neural-network" class="headerlink" title="Deep L-layer neural network"></a>Deep L-layer neural network</h4><p>Technically logistic regression is a 1-layer neural network. Deep neural networks, with more layers, can learn functions that shallower models are often unable to.</p><p>Here <code>L</code> denotes the number of layers in a deep neural network. Some notations:</p><p>notation</p><p>description</p><p><code>n[0]</code></p><p>number of neurons in the input layer</p><p><code>n[l]</code></p><p>number of neurons in the <code>lth</code> layer, <code>l</code> from 1 to L</p><p><code>W[l]</code></p><p>weights of the l-layer of shape <code>(n[l], n[l-1])</code></p><p><code>b[l]</code></p><p>bias term of the l-layer of shape <code>(n[l], 1)</code></p><p><code>Z[l]</code></p><p>affine result of the l-layer of shape <code>(n[l], m)</code>, <code>Z[l]=W[l]A[l-1]+b[l]</code></p><p><code>g[l]</code></p><p>activation function of the l-layer</p><p><code>A[l]</code></p><p>activation output of the l-layer of shape <code>(n[l], m)</code>, <code>A[l]=g[l](Z[l])</code></p><h4 id="Forward-Propagation-in-a-deep-network"><a href="#Forward-Propagation-in-a-deep-network" class="headerlink" title="Forward Propagation in a deep network"></a>Forward Propagation in a deep network</h4><p>With <code>A[0]=X</code>, forward propagation is generalized as:</p><p>Z[l] = W[l]*A[l-1] + b[l]<br>A[l] = sigmoid(Z[l])</p><p><em>Backpropagation</em> computes the derivatives of parameters by the chain rule.</p><p># backpropagation<br>dZ[2] = A[2] - Y  # get this with combination of the derivative of cost function and g’[2]<br>dW[2] = 1/m * np.matmul(dZ[2], A[1].T)<br>db[2] = 1/m * np.sum(dZ[2], axis=1, keepdims=True)<br>dZ[1] = np.multiply(np.matmul(W[2].T, dZ[2]), g’[1](Z[1]))  # derivative of activation is used here<br>dW[1] = 1/m * np.matmul(dZ[1], X.T)<br>db[1] = 1/m * np.sum(dZ[1])</p><h1 id="update-parameters-1"><a href="#update-parameters-1" class="headerlink" title="update parameters"></a>update parameters</h1><p>W[1] = W[1] - learning_rate * dW[1]<br>b[1] = b[1] - learning_rate * db[1]<br>W[2] = W[2] - learning_rate * dW[2]<br>b[2] = b[2] - learning_rate * db[2]</p><h4 id="Getting-your-matrix-dimensions-right"><a href="#Getting-your-matrix-dimensions-right" class="headerlink" title="Getting your matrix dimensions right"></a>Getting your matrix dimensions right</h4><p>matrix</p><p>dimension</p><p><code>W[l]</code></p><p><code>(n[l], n[l-1])</code></p><p><code>b[l]</code></p><p><code>(n[l], 1)</code></p><p><code>Z[l]</code></p><p><code>(n[l], m)</code></p><p><code>A[l]</code></p><p><code>(n[l], m)</code></p><p><code>dW[l]</code></p><p><code>(n[l], n[l-1])</code></p><p><code>db[l]</code></p><p><code>(n[l], 1)</code></p><p><code>dZ[l]</code></p><p><code>(n[l], m)</code></p><p><code>dA[l]</code></p><p><code>(n[l], m)</code></p><h4 id="Why-deep-representations"><a href="#Why-deep-representations" class="headerlink" title="Why deep representations"></a>Why deep representations</h4><ul><li>  Deep neural network with multiple hidden layers might be able to have the earlier layers learn lower level simple features and then have the later deeper layers then put together the simpler things it’s detected in order to detect more complex things like recognize specific words or even phrases or sentences.</li><li>  If there aren’t enough hidden layers, then we might require exponentially more hidden units to compute in shallower networks.</li></ul><h4 id="Building-blocks-of-deep-neural-networks"><a href="#Building-blocks-of-deep-neural-networks" class="headerlink" title="Building blocks of deep neural networks"></a>Building blocks of deep neural networks</h4><p><img src="https://github.com/lijqhs/deeplearning-notes/raw/main/C1-Neural-Networks-and-Deep-Learning/img/nn_frame.png" alt="nn framework"></p><p><em>Implementation steps</em>:</p><ol><li> Initialize parameters / Define hyperparameters</li><li>Loop for num_iterations:<ol><li> Forward propagation</li><li> Compute cost function</li><li> Backward propagation</li><li> Update parameters (using parameters, and grads from backprop)</li></ol></li><li> Use trained parameters to predict labels</li></ol><h4 id="Forward-and-Backward-Propagation"><a href="#Forward-and-Backward-Propagation" class="headerlink" title="Forward and Backward Propagation"></a>Forward and Backward Propagation</h4><p>In the algorithm implementation, outputting intermediate values as caches (basically <code>Z</code> and <code>A</code>) of each forward step is crucial for backward computation.</p><p><img src="https://github.com/lijqhs/deeplearning-notes/raw/main/C1-Neural-Networks-and-Deep-Learning/img/backprop_flow.png" alt="forward and backward"></p><h4 id="Parameters-vs-Hyperparameters"><a href="#Parameters-vs-Hyperparameters" class="headerlink" title="Parameters vs Hyperparameters"></a>Parameters vs Hyperparameters</h4><p><em>Parameters</em>:</p><ul><li>  weight matrices <code>W</code> of each layer</li><li>  bias terms <code>b</code> of each layer</li></ul><p><em>Hyper parameters</em>:</p><ul><li>  number of hidden units <code>n[l]</code></li><li>  learning rate</li><li>  number of iteration</li><li>  number of layers <code>L</code></li><li>  choice of activation functions</li></ul><h3 id="What-does-this-have-to-do-with-the-brain"><a href="#What-does-this-have-to-do-with-the-brain" class="headerlink" title="What does this have to do with the brain"></a>What does this have to do with the brain</h3><p>About this topic, I think the following Andrew’s explanation is the best summary:</p><blockquote><p>I do think that maybe the few that computer vision has taken a bit more inspiration from the human brain than other disciplines that also apply deep learning, but I personally use the analogy to the human brain less than I used to.</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Machine Learning</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>从零开始搭建一个属于自己的博客(纯小白教程)</title>
    <link href="/2021/02/11/blog-da-jian/"/>
    <url>/2021/02/11/blog-da-jian/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>趁着寒假有时间，我回顾了我搭建博客的过程，于是想分享下自己的经验，写一篇小白也能看懂的教程，让每个人都能够搭建属于自己的博客。</p><h1 id="所需条件"><a href="#所需条件" class="headerlink" title="所需条件"></a>所需条件</h1><p>一个博客首先需要一台服务器（VPS/独服），虚拟主机也可以，能将博客托管在上面，同时还需要一个能访问到它的域名，也就是要取一个名字。有了服务器和域名，再加上相关的脚本，一个博客就能成功搭建。</p><h1 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h1><h2 id="服务器选购"><a href="#服务器选购" class="headerlink" title="服务器选购"></a>服务器选购</h2><p>服务器（VPS）我选择在腾讯云 <a href="https://cloud.tencent.com/">https://cloud.tencent.com/</a> 购买，这里我选择购买腾讯云的轻量应用服务器。</p><p>首先腾讯云的账号自行注册，这里可以使用微信登录并注册，注意要完成实名认证。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210209014036.png" alt="1"></p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210209014143.png" alt="2"></p><p>因为使用香港以及国外服务器是不需要备案的，所以这里避免备案以及后续一些不必要的麻烦我们选择购买香港地域的，当然新加坡和硅谷地区也可以，这里还考虑到香港离大陆是最近的，访问速度最快。</p><p>镜像方面我们选择系统镜像，具体的系统看个人喜好，我一般选择Debian，注意：因为版权的原因，选择Windows系统是要贵一点的。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210209014608.png" alt="3"></p><p>实例套餐方面，选择最低一档24元一个月的就足够搭建博客了，实例名称随意，购买时长可先选择一个月试试效果，所有选择完后，勾选同意协议，点击立即购买。</p><p><img src="https://blog.jkfff.com/wp-content/uploads/2021/02/image-20210209014839381-1024x487.png"></p><p>点击提交订单</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210209130757.png" alt="5"></p><p>选择付款方式，这里我们选择在线支付，可以用微信、QQ钱包、银行卡等支付，方便快捷。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210209130639.png" alt="6"></p><p>点击下一步，跳转到新页面，选择微信扫码支付</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210209131013.png" alt="7"></p><p>支付成功后点击返回，再点击进入控制台。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210209131205.png" alt="8"></p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210209131308.png" alt="9"></p><p>在控制台我们便可以看到刚刚购买的轻量服务器。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210209131440.png" alt="10"></p><p>点击服务器名称进入管理页面，在这里可以看到服务器的相关信息</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210209131650.png" alt="11"></p><p>此时点击远程登录</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210209132121.png" alt="11"></p><p>点击重置密码，自己设定一个复杂的密码，避免被人盗用。当然自己也可以绑定一个密钥，更加安全，这个方法之后再说。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210209132215.png" alt="12"></p><p>然后输入新密码，确认新密码，其他保持默认，注意密码的设定规则。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210209132549.png" alt="12"></p><p>密码输入完毕后，点击下一步，勾选同意强制关机，再点击重置密码，等待几分钟便可重置成功。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210209132837.png" alt="13"></p><p>到这里为止，服务器的选购环节算完成了。</p><h2 id="服务器登录及配置"><a href="#服务器登录及配置" class="headerlink" title="服务器登录及配置"></a>服务器登录及配置</h2><p>服务器的登录需要用到SSH工具，这里我们选用FinalShell :<a href="https://www.hostbuf.com/">https://www.hostbuf.com/</a></p><h3 id="Win版下载地址"><a href="#Win版下载地址" class="headerlink" title="Win版下载地址"></a>Win版下载地址</h3><p><a href="http://www.hostbuf.com/downloads/finalshell_install.exe">http://www.hostbuf.com/downloads/finalshell_install.exe</a></p><h3 id="macOS下载地址"><a href="#macOS下载地址" class="headerlink" title="macOS下载地址"></a>macOS下载地址</h3><p><a href="http://www.hostbuf.com/downloads/finalshell_install.pkg">http://www.hostbuf.com/downloads/finalshell_install.pkg</a></p><p>点击上方链接下载并安装后，打开软件</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210209134145.png" alt="14"></p><p>没有其他的需求，免费版的就已经够用了。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210209134359.png" alt="15"></p><h3 id="添加服务器"><a href="#添加服务器" class="headerlink" title="添加服务器"></a>添加服务器</h3><p>按下图顺序依次点击，然后点击<strong>SSH连接(Linux)。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210209134625.png" alt="16"></p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210209134910.png" alt="17"></p><p>其他保持默认，最后点击确定，添加好的服务器就会出现在连接管理器的列表里。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210010159.png" alt="18"></p><p>此时，双击添加的服务器——腾讯云香港，出现下方的界面时点击接受并保存，进入服务器命令行操作界面。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210012829.png" alt="25"></p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210010709.png" alt="19"></p><h3 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h3><p>一般拿到服务器，我的习惯是先dd系统，Linux dd系统就相当于Windows里的重装系统，因为有些商家的服务器系统模板有些问题或者有一些监控，这里为了避免出现问题，我们选择dd以更换为一个纯净的Linux系统。</p><p>我的博客曾分享过Linux dd的脚本：<a href="https://ioli.cc/38.html"><a href="https://ioli.cc/38.html">Linux系统下，一键安装Centos6-7、Debian7-10、Ubuntu14-18、Windows等</a></a>，这里直接拿来使用。</p><p>我选择dd Debian10，命令为</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -N --no-check-certificate https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/veip007/</span>dd<span class="hljs-regexp">/master/</span>dd-gd.sh &amp;&amp; chmod +x dd-gd.sh &amp;&amp; ./dd-gd.sh<br></code></pre></td></tr></table></figure><p>复制以上命令，返回到FinalXshell操作界面，点击鼠标右键选择粘贴。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210011433.png" alt="20"></p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210011515.png" alt="21"></p><p>然后按下回车键，系统便会自动进入dd流程。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210011618.png" alt="22"></p><p>当出现镜像包选择时，输入7，选择Debian 10，记住dd完后的服务器密码为<strong>cxthhhhh.com</strong>，然后按下回车键，接下来便是耐心的等待dd完成，系统会自动断开连接。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210012106.png" alt="23"></p><p>系统断开连接10分钟后再连接，视性能差异时间或长或短，重新连接只需点击操作界面下方的闪电图标，</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210012439.png" alt="24"></p><p>如果dd已经完成，点击闪电图标重新连接会出现安全警告，同样点击接受并保存，若点击后又断开只需再点击闪电图标直到连接上为止。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210012829.png" alt="26"></p><p>因为dd了系统，服务器的密码发生了改变，需要重新输入密码，此时需输入上方所需要记住的密码<strong>cxthhhhh.com</strong>，但是无需记住密码。</p><p><img src="https://blog.jkfff.com/wp-content/uploads/2021/02/image-20210210013239856.png"></p><p>输入密码后点击确定，会重新进入操作界面，同样的，若出现断开连接现象，只需多点击闪电图标直到连接上为止。</p><p>进入后为如下界面。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210013513.png" alt="27"></p><p>此时输入</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">apt-<span class="hljs-keyword">get</span> <span class="hljs-keyword">update</span> -y<br></code></pre></td></tr></table></figure><p>来更新下系统。</p><p>因为之前的密码太弱而且是公共密码，此时再更改服务器密码，</p><p>输入</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">passwd root</span><br></code></pre></td></tr></table></figure><p>会让你输入新的密码并重复一遍，更改完成后会显示下图所示的界面。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210013743.png" alt="28"></p><p>然后点击下方的齿轮图标进入服务器信息编辑界面。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210013935.png" alt="29"></p><p>按图示操作更改密码并应用保存，然后关闭页面。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210014402.png" alt="30"></p><p>到此为止服务器的配置工作也算完成了，接下来便是环境的部署。</p><h2 id="服务器环境部署"><a href="#服务器环境部署" class="headerlink" title="服务器环境部署"></a>服务器环境部署</h2><h3 id="宝塔面板安装"><a href="#宝塔面板安装" class="headerlink" title="宝塔面板安装"></a>宝塔面板安装</h3><p>首先，对于小白我是推荐使用宝塔面板的，搭建网站博客等等操作通过宝塔面板都可以轻松的完成。</p><p>进入宝塔官网：<a href="https://www.bt.cn/">https://www.bt.cn/</a>，点击立即安装。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210014742.png" alt="31"></p><p>然后会弹出相关的脚本界面。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210014823.png" alt="32"></p><p>因为服务器是Debian10系统，便复制Debian安装命令。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -O install.sh http:<span class="hljs-regexp">//</span>download.bt.cn<span class="hljs-regexp">/install/i</span>nstall-ubuntu_6.<span class="hljs-number">0</span>.sh &amp;&amp; bash install.sh<br></code></pre></td></tr></table></figure><p>然后同样粘贴在命令行操作界面，点击回车，便会自动开始安装宝塔面板。</p><p>但此时出现如下错误</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210015050.png" alt="33"></p><p>wget未安装，我们只需输入</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-builtin-name">get</span> install -y wget<br></code></pre></td></tr></table></figure><p>如果是Centos系统，我们则需输入</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y wget<br></code></pre></td></tr></table></figure><p>等待wget安装后再执行一遍宝塔安装命令，此时再输入y便可成功安装。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210015307.png" alt="34"></p><p>成功安装便会显示如下界面</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210015657.png" alt="35"></p><p>其中的外网面板地址便是宝塔面板的登录地址，这里我们需要在防火墙处开放8888端口以能正常访问到服务界面。</p><h3 id="开放防火墙"><a href="#开放防火墙" class="headerlink" title="开放防火墙"></a>开放防火墙</h3><p>登录自己的腾讯云，进入控制台，点击轻量应用服务器。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210152712.png" alt="34"></p><p>再点击服务器名称进入管理界面。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210152758.png" alt="35"></p><p>点击防火墙，添加规则，在端口处填入8888，点击确定后会添加此条规则。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210152852.png" alt="35"></p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210152946.png" alt="36"></p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210153050.png" alt="37"></p><h3 id="进入宝塔服务界面"><a href="#进入宝塔服务界面" class="headerlink" title="进入宝塔服务界面"></a>进入宝塔服务界面</h3><p>在浏览器中输入上面安装宝塔面板后给出的外网登录地址，按下回车会进入登录界面，需要输入账号和密码，也就是前面所给的账号密码，输入完成后点击登录，然后会进入用户协议界面，翻到最下面，勾选<strong>我已阅读并同意“《用户协议》”</strong>，点击进入面板。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210153436.png" alt="38"></p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210153754.png" alt="39"></p><p>进入后会自动跳出推荐安装套件，这里我们选择左边的LNMP，把PHP的版本调成最新的PHP7.4，其他的保持不变，然后点击一键安装，此时后台就会自动开始安装LNMP。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210154123.png" alt="40"></p><p>点击一键安装后会弹出消息盒子，这里我们可以知道安装的进度，然后点击右上角关闭页面。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210154308.png" alt="41"></p><p>关闭消息盒子后会提示让我们强制绑定宝塔官网账号，这里我们可不绑定，用一行命令即可关闭强制登录。</p><p>在服务器的命令行操作界面，执行以下脚本，解决强制登录提醒。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">rm -f <span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/panel/</span>data/bind.pl<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210154639.png" alt="42"></p><p>执行完毕后，刷新网页，强制登录的提示就没有了，此时耐心等待LNMP的安装即可。</p><p>安装完成后在消息盒子处可看到各项任务完成时间。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210224332.png" alt="43"></p><h2 id="域名购买"><a href="#域名购买" class="headerlink" title="域名购买"></a>域名购买</h2><p>LNMP一般安装需要一些时间，趁这个时间我们去选购一个域名，同样登录腾讯云，打开首页，将鼠标放在产品上，并点击域名注册这一选项。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210225535.png" alt="43"></p><p>搜索一个自己喜欢并且没有被注册的域名，挑选好后缀，将其加入购物车，最后购买付款，注意购买的域名需要实名认证，这里填写好自己的个人信息即可。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210225652.png" alt="44"></p><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>只有将一个域名解析到服务器的IP上，我们才能够通过域名访问到我们的博客，这里使用DNSPOD进行域名解析。</p><p><a href="https://console.cloud.tencent.com/cns">腾讯云-控制台 (tencent.com)</a></p><p>进入DNS解析控制台，选择好域名，点击解析，进入解析页面。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210231430.png" alt="45"></p><p>这里我们将这个主域名解析到我们的服务器IP上，具体步骤参考我下面给出的图。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210231827.png" alt="46"></p><p>不同的主机记录对应不同的域名，主机记录为@是主域名，其余的记录均为子域名。</p><p>完成以上步骤后，等待10分钟就会解析成功。同时按下Win键+S，然后在出现的搜索框中输入cmd打开命令提示符，在命令提示符中输入</p><p>ping+空格+我们所解析的域名</p><p>若成功返回为服务器的IP，则说明我们的域名解析已经完成。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210234435.png" alt="45"></p><h2 id="添加网站"><a href="#添加网站" class="headerlink" title="添加网站"></a>添加网站</h2><p>进入宝塔面板管理界面，点击网站。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210234944.png" alt="46"></p><p>添加站点，按下图步骤进行，要记好数据库名、用户名和数据库密码。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210235244.png" alt="47"></p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210235407.png" alt="47"></p><p>添加完站点后，部署SSL证书，点击未部署，具体操作按下图所示。</p><p><img src="https://blog.jkfff.com/wp-content/uploads/2021/02/image-20210210235525402-1024x57.png"></p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210210235631.png" alt="48"></p><p>Let’s Encrypt证书是免费的SSL证书，有效期为三个月，在宝塔面板上申请该证书三个月到期后会自动续期。</p><p>申请完证书后，勾选右上角的强制HTTPS，使得网站打开时能够出现一把锁。</p><p>关闭证书申请页面，进入网站根目录。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210211000825.png" alt="47"></p><p>博客的类型我们选择WordPress，进入WordPress官网的下载页面：<a href="https://cn.wordpress.org/download/">下载 WordPress.org China 简体中文</a></p><p>复制最新版本的下载链接：<a href="https://cn.wordpress.org/latest-zh_CN.zip">https://cn.wordpress.org/latest-zh_CN.zip</a></p><p>点击远程下载，下载最新版本的WordPress。</p><p><img src="https://blog.jkfff.com/wp-content/uploads/2021/02/image-20210211001853574-1024x524.png"></p><p>选择下载的压缩包，点击选项“解压”。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210211002007.png" alt="50"></p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210211002234.png" alt="51"></p><p>点击进入解压出来的文件夹。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210211002406.png" alt="52"></p><p>全选文件，复制所有文件。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210211003325.png" alt="53"></p><p>再返回到网站根目录，点击粘贴。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210211003446.png" alt="54"></p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210211003544.png" alt="55"></p><p>粘贴完成后，基本步骤已经全部完成。</p><h3 id="添加伪静态"><a href="#添加伪静态" class="headerlink" title="添加伪静态"></a>添加伪静态</h3><p>点击网站设置，设置伪静态。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210211010132.png" alt="63"></p><h2 id="进入博客"><a href="#进入博客" class="headerlink" title="进入博客"></a>进入博客</h2><p>在浏览器的地址栏输入博客的域名，回车后会进入WordPress的配置页面。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210211004010.png" alt="56"></p><p>点击现在就开始，会让我们输入数据库名等信息。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210211004314.png" alt="57"></p><p>若已忘记，可点击宝塔面板管理界面的数据库，在那可查看数据库的信息。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210211004423.png" alt="58"></p><p>信息填完后，点击提交，再点击现在安装，最后给博客取一下名字，点击安装WordPress。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210211004608.png" alt="59"></p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210211004846.png" alt="60"></p><p>安装完成后，点击登录，输入刚才设定的用户名和密码，最后再点击登录。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210211005141.png" alt="61"></p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210211005223.png" alt="62"></p><p>登录后会进入博客的后台管理界面，点击文章可以自己写文章，WordPress的玩法很多，其他的操作便由自己去探索。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210211005345.png" alt="63"></p><h3 id="更换博客主题"><a href="#更换博客主题" class="headerlink" title="更换博客主题"></a>更换博客主题</h3><p>首先去网上找一个自己觉得好看的主题，这里我推荐一个 <a href="https://github.com/mashirozx/Sakura">mashirozx/Sakura: A Wonderful WordPress Theme: 樱花庄的白猫博客主题 (github.com)</a></p><p>在release界面可下载最新的安装包：<a href="https://github.com/mashirozx/Sakura/archive/v3.3.9.zip">下载链接</a></p><p>进入网站根目录，点击wp-content，再点击themes，再点击远程下载，复制主题包的下载链接，点击确认。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210211010844.png" alt="65"></p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210211011009.png" alt="66"></p><p>下载完成后解压。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210211011124.png" alt="67"></p><p>进入博客后台界面，点击外观，再主题页面选择我们下载的主题Sakura，点击启用。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210211011437.png" alt="68"></p><p>此时再打开我们的博客地址，主题已经发生了改变。其余各式各样的配置参考主题作者所写的文章：<a href="https://2heng.xin/theme-sakura/#toc-head-30">WordPress 主题 Sakura ? 樱花庄的白猫 (2heng.xin)</a></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>依次完成以上步骤，一个博客便能成功搭建。在如今微博、知乎、B站、抖音等平台能让我们方便记录生活或学习的情况下，我觉得拥有一个自己的博客是一个非常有意义的事情，在自己的博客上可以畅所欲言，不用受这些平台的约束，自己想写什么就写什么。</p><p>这篇文章拖了快两周，总算在除夕的这天凌晨完成，也算是一个年度经验总结。</p>]]></content>
    
    
    <categories>
      
      <category>建站知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>微软Office相关订阅全介绍</title>
    <link href="/2021/02/06/introduction-of-office-subscription/"/>
    <url>/2021/02/06/introduction-of-office-subscription/</url>
    
    <content type="html"><![CDATA[<p>Office有许多版本，可以分为个人版/企业版。帐号有分2个版本，分别是个人帐号/企业子帐号 ，企业版有一个概念叫做全局。可以理解为一个企业。一个全局底下有许多帐号，有不同权限。其中管理员可以任意新增/删除/查看其他帐号/他们底下的任意档案 还有概念叫订阅的。不像个人帐号，企业子帐号什么都不能干，登入以后就是一个空白页面。需要有订阅才能用服务。 没有购买任何订阅的全局叫做空全局，没有管理员的全局叫做无管理全局 订阅底下则包含许多服务，不同的订阅包含不同的服务。 像A1包含outlook onedrive等等，A1P比A1多了桌面板office。</p><p>管理员可以购买订阅，按人头算钱，然后分配给其他子帐号。 企业子帐号要有订阅，才能使用office outlook onedrive之类的功能。 本篇文章里的全部帐号类型都是企业子帐号</p><h1 id="教育tag"><a href="#教育tag" class="headerlink" title="教育tag"></a>教育tag</h1><ul><li>  微软后台给全局打的标记，有教育tag，非营利tag，政府tag之类的</li><li>  只有有标记了教育tag的全局能购买教育订阅</li></ul><h2 id="教育订阅"><a href="#教育订阅" class="headerlink" title="教育订阅"></a>教育订阅</h2><ul><li>  微软给教育单位一些优惠，给学生使用。 A1/A3/A5之类的，其中A1的价格是0元</li><li>  只有有标记了教育tag的全局能购买教育订阅</li><li>  有许多人假装自己是教育机构，弄到教育订阅</li><li>  一旦被微软发现你不是正规教育机构，直接翻车</li></ul><h2 id="教育域名"><a href="#教育域名" class="headerlink" title="教育域名"></a>教育域名</h2><ul><li>edu.xx 类<ul><li>  微软为了加速审核，有部分域名加入了白名单。只要你用 edu.xx 的域名注册，会直接通过教育资格审核，拿到教育tag</li><li>  有些edu域名审核不严，白票的人太多，微软随后又ban掉一些 edu.xx 了。例如edu.ge/edu.rs都过不了微软的教育验证</li></ul></li><li>普通域名类<ul><li>  很久以前，有些国家没有教育域名。学校就直接用 org/com/.xx之类的域名了。</li><li>  例如香港科技大学，用的是 ust.hk ，而不是 ust.edu.hk</li><li>  那些学校和微软申请教育资格，微软就顺便把域名加入教育白名单了</li><li>  在此之后那些国家推出了教育域名，于是有部分大学就换成 edu.xx 域名了</li><li>  以前的普通域名，又有一部份就被废弃了。可以被我们注册/购买</li><li>  但是这些域名还在白名单里面。我们就叫他教育域名。 A1贩子扫描了一大堆</li></ul></li><li>A1P域名<ul><li>  这个我就真的不清楚来源了</li><li>  我只知道有些域名的教育资格不太一样</li><li>  一般都是下发A1许可，但是有的域名下发A1P许可(非常稀有)</li><li>  我猜当初那些学校有和微软签什么协议吧?不知道有没有大佬说明一下?</li></ul></li></ul><h2 id="自助网页"><a href="#自助网页" class="headerlink" title="自助网页"></a>自助网页</h2><ul><li>  早些年，微软舔学校，搞了个<a href="https://www.microsoft.com/en-us/education/products/office">自助网页</a>。只要你输入教育域名的信箱，微软就自动帮你开一个无管理全局，然后帮你开一个子帐号。</li><li>  学校网管可以DNS验证，接管这个全局，但是大部分学校根本不理</li><li>  很多edu信箱可以注册无管理全局的子帐号，就是这样来的</li><li>  现在网页还留着，但是功能已经大幅限缩，不再开新全局了</li><li>  现在的自助网页，首先会先检查这个域名是不是已经有全局，如果没全局，就不再开新全局了。如果已经有全局，而且有教育订阅，就帮你开个号，给你一个教育订阅</li><li>  重点来了，如果有全局，没订阅(或是订阅满了)。而你的域名有教育资格，微软会直接给这个全局下发500个A1/A1P订阅。一开始是1500000，白票的人太多变成5000，去年5月变成500</li><li>  自助网页只看域名，不看tag。无tag教育订阅就是这样来的。</li><li>  这种操作手法，我们称为偷渡</li><li>而且还有这种操作<ul><li>  全局绑定教育一个域名</li><li>  用上面方法偷渡许可</li><li>  解绑域名</li><li>  回到步骤1，绑另一个全局</li><li>  A1贩子不知道用这方法，刷了几百个全局出来卖</li><li>  此方法已被封，现在一旦解绑域名，不仅域名直接移出白名单，还附赠删订阅+掉tag</li></ul></li></ul><h2 id="正规注册"><a href="#正规注册" class="headerlink" title="正规注册"></a>正规注册</h2><ul><li>  现在微软已经不再自动开全局了。学校必须透过<a href="https://signup.microsoft.com/signup?OfferId=6c1a80e7-cc3f-4e01-baaf-385fbda7cdfc,f31e46de-fe53-4a3e-ae1d-d6ffda791387&DL=STANDARDWOFFPACK_FACULTY">这个连结</a>来申请注册。</li><li>  申请通过以后，全局能够获取教育tag。</li><li>  有教育域名可以直接通过申请，没有的话就要准备文件，提交人工申请审核</li><li>  取得了教育tag以后，才能购买教育许可。其中A1许可的价格是0元，最多购买1500000份</li></ul><h2 id="教育许可"><a href="#教育许可" class="headerlink" title="教育许可"></a>教育许可</h2><ul><li>A1<ul><li>  最常见的许可。订阅价格0元</li><li>  onedrive，1T(预设)/5T(管理员扩容)/25T(找微软客服扩容)</li><li>  outlook，当域名邮箱使用</li></ul></li><li>A1P<ul><li>  学校签协议送的许可</li><li>  比上面多了桌面板office 365的服务</li></ul></li><li>A3<ul><li>  比上面多了Minecraft教育版</li><li>  微软去年5月曾经不小心把A3的价格设定成0元，大家狂买。后来恢复正常。</li><li>  微软也发现很多人白票，立刻严查! 当时买到的高机率被封</li><li>  不过没被封的就真的永久0元了</li></ul></li></ul><p>还有一些手段例如MPN/经销商购买之类，能够弄到A5之类的订阅</p><h1 id="翻车"><a href="#翻车" class="headerlink" title="翻车"></a>翻车</h1><ul><li>  微软发现你这个全局不是正规教育机构，就会封禁你，俗称翻车</li><li>翻车分为几个种类<ul><li>掉许可<ul><li>  许可不见了</li><li>  看起来是最轻程度的惩罚</li><li>  我没遇过这种的，有大佬能说说吗?</li></ul></li><li>封掉你全局管理<ul><li>  一开始都是这样封的</li><li>  但是mjj们很快学会了，新增一个特权管理帐户</li><li>  特权管理不是全局管理。但是能新增别的全局管理</li></ul></li><li>封掉你全部管理<ul><li>  微软很快就发现特权管理了，就改成封掉你全部的管理</li><li>  只要是个管理就封号</li><li>  但是mjj们很快学会了。改用自助网页刷子号</li><li>  但是就算没有管理，只要域名还在，自助网页就能运作</li><li>  只要架一个域名邮箱，就能继续刷子号(无管理)</li></ul></li><li>全部帐号封禁<ul><li>  微软很快就发现自助网页刷子号了</li><li>  全部帐号封禁，不管你是不是管理</li><li>  为了避免误封，影响到全校师生，一般封禁只封管理，正规学校提就能供资料找回。这样被封禁期间，学生不受影响</li><li>  微软确定这个全局100%不是正规订阅，才会这样封</li><li>  但是mjj们很快学会了。改用API解封</li><li>  去AAD新增一组API Key，事先给这个API授权，全局管理权限</li><li>  就算全部用户都被封了，但是API不是用户。因为API还有权限，可以再新增全局管理，拿回控制</li></ul></li><li>把你SPO quota设定成0<ul><li>  微软发现API解封了。现在索性不封你帐号了，封了也被各种找回</li><li>  office后端，几乎全部的服务都是基于 Share Point Online架构的，以下简称SPO</li><li>  onedrive / outlook / sites / teams 等等里面的一切纪录/文件，都是位于SPO里面的档案</li><li>  而SPO是有每日额度限制的</li><li>  后端直接把你的quota设定成0，你就几乎什么都用不了了</li><li>  一般说的OD不能用/OD挂掉，就是这一类</li><li>  而这个quota我们是完全无法修改的，只能在微软后台更改</li><li>  这下算是一劳永逸了。不用管你有什么找回帐号的方法，反正帐号也不能正常用了</li><li>  A1P以上的，还能激活office365桌面板。 A1子号就真的完全没用了</li></ul></li></ul></li></ul><h1 id="开发者订阅"><a href="#开发者订阅" class="headerlink" title="开发者订阅"></a>开发者订阅</h1><ul><li>  微软的生态系很大，充满了各种API</li><li>  为了鼓励开发者们免费帮微软开发各种app，微软开了一扇方便之门，帮开发者们弄了个开发者订阅</li><li>  为了方便开发者们开发各式app，不要遇到奇怪的限制。 开发者订阅几乎解锁了全部服务，除了一些比较贵的服务例外。例如打电话/激活windows之类</li><li>  开发者分2类，一类是免费开发者，可以去<a href="https://developer.microsoft.com/en-us/microsoft-365/dev-program">这里注册</a>。</li><li>  一种是付费开发者，要购买MSDN。能获得更多的开发资源，例如Azure额度之类，作为开发/测试用途</li><li>  开发者订阅仅限开发用途</li></ul><h2 id="常见的开发者订阅"><a href="#常见的开发者订阅" class="headerlink" title="常见的开发者订阅"></a>常见的开发者订阅</h2><ul><li>E3 MSDN<ul><li>  2018年附近，微软给MSDN开发者提供了E3 MSDN订阅</li><li>  时限永久，很快就关闭注册渠道，绝版了</li><li>  现在看来，是最稳的永久订阅。几乎不会翻车。真的翻车，唯一的理由是微软说仅限开发用途，你违反协议</li><li>  因为微软当初就承诺永久，而且不像A1之类，仅限教育机构。非教育机构注册，被抓到会翻车</li></ul></li><li>E5 MSDN<ul><li>  现在微软给的是E5 MSDN，没有时限</li><li>  不过你MSDN订阅过期，这个订阅一起失效</li></ul></li><li>E3 开发者<ul><li>  微软给免费开发者提供的订阅，时限1年</li></ul></li><li>E5 开发者<ul><li>  微软给免费开发者提供的订阅，时限90天，可续期</li><li>  微软写说会侦测这个帐号底下的行为。 API呼叫纪录，各种服务使用情况之类的</li><li>  微软判断这个帐号是拿来开发app的，才会自动续期</li><li>  实际续期还是各种玄学。有人天天刷API还是没过，有人什么事都没做自动续期</li></ul></li><li>上面这些订阅，全部都<ul><li>  25人份订阅</li><li>  有outlook</li><li>  有桌面板office365</li><li>  有onedrive 1T(预设)/5T(管理员扩容)/25T(找微软客服扩容)</li></ul></li></ul><h1 id="其他订阅"><a href="#其他订阅" class="headerlink" title="其他订阅"></a>其他订阅</h1><ul><li>E3 SY<ul><li>  微软曾经不小心开放购买，价格0元</li><li>  已关闭购买渠道，已绝版</li><li>  听说大量被封禁</li><li>  功能等同E3</li></ul></li><li>Teams free<ul><li>  要使用Teams，必须要有订阅</li><li>用个人帐号开通Teams时，微软在后台的操作是:<ul><li>  开一个全局</li><li>  下发50万Trams free订阅</li><li>  把你提升为管理员</li></ul></li><li>  然后你就有订阅了，才能在Teams操作。你可以去aad把那个微软自动开的全局接管，就能看到Teams free订阅了</li><li>  这个订阅几乎什么都没有</li><li>  有Teams使用权限(废话)</li><li>  没有outlook</li><li>  没有桌面板office365</li><li>  倒是有onedrive 2G(预设)/1T(管理员扩容)</li><li>  全局SPO总容量1T。此容量全局共用，不管你开几个子号都没用。就是这1T</li><li>  管理可以设定单一帐号限制25T，但是全局容量只有1T，你看到SPO设定限制25T是假的</li></ul></li><li>Teams exploratory<ul><li>  要使用Teams，必须要有订阅</li><li>  用企业子帐号开通Teams时，如果那个全局没有Teams订阅，就会自动下发100个Teams exploratory订阅，有效期一年</li><li>  一年过了会怎样我也不知道</li><li>  有outlook</li><li>  有onedrive 1T(预设)/5T(管理员扩容)</li><li>  没有桌面板office365</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>资源分享</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>给 Windows Terminal配置代理</title>
    <link href="/2021/02/05/windows-terminal-proxy/"/>
    <url>/2021/02/05/windows-terminal-proxy/</url>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>前言</p><p>今天突然想到Windows Terminal也是可以走代理的，于是在网上查阅了相关资料，在这里分享下我所用的方法。</p><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><p>有一个坑是，<strong>cmd</strong>，<strong>Git Bash</strong>，<strong>PowerShell</strong> 设置的方式不同，这里分开来说。</p><h2 id="Cmd"><a href="#Cmd" class="headerlink" title="Cmd"></a>Cmd</h2><p><strong>cmd</strong> 中用 <code>set http_proxy</code> 设置</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">http_proxy</span>=http://127.0.0.1:1080set <span class="hljs-attribute">https_proxy</span>=http://127.0.0.1:1080​set <span class="hljs-attribute">http_proxy_user</span>=userset <span class="hljs-attribute">http_proxy_pass</span>=pass​set <span class="hljs-attribute">https_proxy_user</span>=userset <span class="hljs-attribute">https_proxy_pass</span>=pass​# 恢复<span class="hljs-builtin-name">set</span> <span class="hljs-attribute">http_proxy</span>=set <span class="hljs-attribute">https_proxy</span>=​# Ubuntu 下命令为 export# <span class="hljs-builtin-name">export</span> <span class="hljs-attribute">http_proxy</span>=http://127.0.0.1:1080<br></code></pre></td></tr></table></figure><p>就是<strong>前两条命令</strong>。</p><h2 id="Git-Bash"><a href="#Git-Bash" class="headerlink" title="Git Bash"></a>Git Bash</h2><p><strong>Git Bash</strong> 中用 <code>export http_proxy</code> 设置</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">https_proxy</span>=http://127.0.0.1:1081export <span class="hljs-attribute">http_proxy</span>=http://127.0.0.1:1081# orexport <span class="hljs-attribute">ALL_PROXY</span>=socks5://127.0.0.1:1080​# 恢复unset https_proxyunset http_proxyunset ALL_PROXY<br></code></pre></td></tr></table></figure><h2 id="PowerShell"><a href="#PowerShell" class="headerlink" title="PowerShell"></a>PowerShell</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> NOTE: registry keys <span class="hljs-keyword">for</span> IE 8, may vary <span class="hljs-keyword">for</span> other versions<span class="hljs-variable">$regPath</span> = <span class="hljs-string">&#x27;HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings&#x27;</span>​<span class="hljs-keyword">function</span> Clear-Proxy&#123;    Set-ItemProperty -Path <span class="hljs-variable">$regPath</span> -Name ProxyEnable -Value 0    Set-ItemProperty -Path <span class="hljs-variable">$regPath</span> -Name ProxyServer -Value <span class="hljs-string">&#x27;&#x27;</span>    Set-ItemProperty -Path <span class="hljs-variable">$regPath</span> -Name ProxyOverride -Value <span class="hljs-string">&#x27;&#x27;</span>​    [Environment]::SetEnvironmentVariable(<span class="hljs-string">&#x27;http_proxy&#x27;</span>, <span class="hljs-variable">$null</span>, <span class="hljs-string">&#x27;User&#x27;</span>)    [Environment]::SetEnvironmentVariable(<span class="hljs-string">&#x27;https_proxy&#x27;</span>, <span class="hljs-variable">$null</span>, <span class="hljs-string">&#x27;User&#x27;</span>)&#125;​<span class="hljs-keyword">function</span> Set-Proxy&#123;    <span class="hljs-variable">$proxy</span> = <span class="hljs-string">&#x27;http://example.com&#x27;</span>​    Set-ItemProperty -Path <span class="hljs-variable">$regPath</span> -Name ProxyEnable -Value 1    Set-ItemProperty -Path <span class="hljs-variable">$regPath</span> -Name ProxyServer -Value <span class="hljs-variable">$proxy</span>    Set-ItemProperty -Path <span class="hljs-variable">$regPath</span> -Name ProxyOverride -Value <span class="hljs-string">&#x27;&lt;local&gt;&#x27;</span>​    [Environment]::SetEnvironmentVariable(<span class="hljs-string">&#x27;http_proxy&#x27;</span>, <span class="hljs-variable">$proxy</span>, <span class="hljs-string">&#x27;User&#x27;</span>)    [Environment]::SetEnvironmentVariable(<span class="hljs-string">&#x27;https_proxy&#x27;</span>, <span class="hljs-variable">$proxy</span>, <span class="hljs-string">&#x27;User&#x27;</span>)&#125;</span><br></code></pre></td></tr></table></figure><p><strong>纠结于应该用</strong><code>set</code><strong>还是 <code>export</code> 还有一个判断方法是，敲一下这两个命令，如果返回一个长长的列表，就表示应该用这个命令，反之，如果返回找不到这个命令，就不应该用这个命令。</strong></p><h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h2><ol><li> 一定要加 <code>http://</code>，直接写域名或者 IP 不行。</li><li> <strong>http</strong> 和 <strong>https</strong> 都要设置。</li></ol><p>然后如果想验证是否成功配置了代理的话，用 <code>ping</code> 命令是不可以的</p><h2 id="查询代理是否存在"><a href="#查询代理是否存在" class="headerlink" title="查询代理是否存在"></a>查询代理是否存在</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">envgrep -<span class="hljs-selector-tag">I</span> proxy<br></code></pre></td></tr></table></figure><h1 id="ping-还是不行的原因"><a href="#ping-还是不行的原因" class="headerlink" title="ping 还是不行的原因"></a>ping 还是不行的原因</h1><p>ping的协议不是http，也不是https，是ICMP协议。</p><h1 id="验证方式"><a href="#验证方式" class="headerlink" title="验证方式"></a>验证方式</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -vv http:<span class="hljs-regexp">//</span>www.google.com<br></code></pre></td></tr></table></figure><p>用这条命令来验证，如果返回如下结果表示代理设置成功。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210205002117.png"></p>]]></content>
    
    
    <categories>
      
      <category>服务搭建</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>微软开发者E5续期教程</title>
    <link href="/2021/02/02/renew-office-e5/"/>
    <url>/2021/02/02/renew-office-e5/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>微软开发者计划E5只有三个月的有效期，但是我们可以通过调用API的方式使自己的账号保持活跃，从而成功续期，以下我就来介绍一个Github上的项目AutoApiP。</p><h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><p><a href="https://github.com/ntgoaywh/AutoApiP">AutoApiP—E5自动续期</a></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul><li>  E5自动续期程序，但是<strong>不保证续期</strong></li><li>  设置了<strong>周六日(UTC时间)不启动</strong>自动调用，周1-5每6小时自动启动一次 （修改看教程）</li></ul><h2 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h2><ul><li>  AutoApiP：<a href="https://github.com/wangziyingwen/AutoApiP">https://github.com/wangziyingwen/AutoApiP</a></li><li>  AutoApiSecret：<a href="https://github.com/wangziyingwen/AutoApiSecret">https://github.com/wangziyingwen/AutoApiSecret</a></li><li>错误及解决办法/续期相关知识/更新日志：<a href="https://github.com/wangziyingwen/Autoapi-test">https://github.com/wangziyingwen/Autoapi-test</a><ul><li>  P版错误说明已更新进程序，详细请运行后看action日志报告</li></ul></li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li>准备工具：<ul><li>E5开发者账号（非个人/私人账号）<ul><li>  管理员号 ———— 必选</li><li>  子号 ———— 可选 （不清楚微软是否会统计子号的活跃度，想弄可选择性补充运行）</li></ul></li><li>  rclone软件，<a href="https://downloads.rclone.org/v1.53.3/rclone-v1.53.3-windows-amd64.zip">下载地址 rclone.org</a> ，(windows 64）</li><li>  教程图片看不到请科学上网</li></ul></li><li>步骤大纲：<ul><li>  微软方面的准备工作 （获取应用id、密码、密钥）</li><li>  GIHTHUB方面的准备工作 （获取Github密钥、设置secret）</li><li>  试运行</li></ul></li></ul><h4 id="微软方面的准备工作"><a href="#微软方面的准备工作" class="headerlink" title="微软方面的准备工作"></a>微软方面的准备工作</h4><ul><li><strong>第一步，注册应用，获取应用id、secret</strong><ul><li>1）点击打开<a href="https://aad.portal.azure.com/">仪表板</a>，左边点击<strong>所有服务</strong>，找到<strong>应用注册</strong>，点击+<strong>新注册</strong><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210203132004.png" alt="1"></li><li>2）填入名字，受支持账户类型前三任选，重定向填入 <a href="http://localhost:53682/">http://localhost:53682/</a> ，点击<strong>注册</strong><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210203132431.png" alt="2"></li><li>3）复制应用程序（客户端）ID到记事本备用(<strong>获得了应用程序ID</strong>！)，点击左边管理的<strong>证书和密码</strong>，点击+<strong>新客户端密码</strong>，点击添加，复制新客户端密码的<strong>值</strong>保存（<strong>获得了应用程序密码</strong>！）<img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210203133105.png" alt="3"><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210203133207.png" alt="4"></li><li>  4）点击左边管理的<strong>API权限</strong>，点击+<strong>添加权限</strong>，点击常用Microsoft API里的<strong>Microsoft Graph</strong>(就是那个蓝色水晶)， 点击<strong>委托的权限</strong>，然后在下面的条例选中下列需要的权限，最后点击底部<strong>添加权限赋予api权限的时候，选择以下几个（全选Read也行）</strong>        </li></ul></li></ul><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs fortran">Calendars.<span class="hljs-keyword">ReadWrite</span>、Contacts.<span class="hljs-keyword">ReadWrite</span>、Directory.<span class="hljs-keyword">ReadWrite</span>.<span class="hljs-built_in">All</span>、<br>        <br>       Files.<span class="hljs-keyword">ReadWrite</span>.<span class="hljs-built_in">All</span>、MailboxSettings.<span class="hljs-keyword">ReadWrite</span>、Mail.<span class="hljs-keyword">ReadWrite</span>、<br>        <br>       Notes.<span class="hljs-keyword">ReadWrite</span>.<span class="hljs-built_in">All</span>、People.Read.<span class="hljs-built_in">All</span>、Sites.<span class="hljs-keyword">ReadWrite</span>.<span class="hljs-built_in">All</span>、<br>        <br>       Tasks.<span class="hljs-keyword">ReadWrite</span>、User.<span class="hljs-keyword">ReadWrite</span>.<span class="hljs-built_in">All</span><br></code></pre></td></tr></table></figure><ul><li><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210203133605.png" alt="4"><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210203134208.png" alt="7"><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210203134309.png" alt="8"><ul><li>  5）添加完自动跳回到权限首页，点击<strong>代表授予管理员同意</strong>如若是<strong>子号</strong>运行，请用管理员账号登录<a href="https://aad.portal.azure.com/">仪表板</a>找到<strong>子号注册的应用</strong>，点击“代表管理员授权”。<img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210203134550.png" alt="9"></li></ul></li><li><strong>第二步，获取refresh_token(微软密钥)</strong><ul><li>  1）进入rclone.exe所在文件夹，shift+右键，在此处打开powershell，输入下面<strong>修改后</strong>的内容，回车后跳出浏览器，登入e5账号，点击接受，回到powershell窗口，看到一串东西。</li></ul></li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./rclone</span> authorize <span class="hljs-string">&quot;onedrive&quot;</span> <span class="hljs-string">&quot;应用程序(客户端)ID&quot;</span> <span class="hljs-string">&quot;应用程序密码&quot;</span><br></code></pre></td></tr></table></figure><ul><li>  2）在那一串东西里找到 “refresh_token”：” ，从双引号开始选中到 “,”expiry”:2021 为止（就是refresh_token后面双引号里那一串，不要双引号），如下图，右键复制保存（<strong>获得了微软密钥</strong>）<img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210203135108.png" alt="10"></li></ul><hr><h4 id="GITHUB方面的准备工作"><a href="#GITHUB方面的准备工作" class="headerlink" title="GITHUB方面的准备工作"></a>GITHUB方面的准备工作</h4><ul><li>  <strong>第一步，fork本项目</strong>登陆/新建github账号，回到本项目页面，点击右上角fork本项目的代码到你自己的账号，然后你账号下会出现一个一模一样的项目，接下来的操作均在你的这个项目下进行。<img src="https://github.com/wangziyingwen/ImageHosting/raw/master/AutoApi/fork.png" alt="image"><a href="https://github.com/wangziyingwen/ImageHosting/blob/master/AutoApi/fork.png"></a></li><li><strong>第二步，新建github密钥</strong><ul><li>1）进入你的个人设置页面 (右上角头像 Settings，不是仓库里的 Settings)，选择 Developer settings -&gt; Personal access tokens -&gt; Generate new token<img src="https://github.com/wangziyingwen/ImageHosting/raw/master/AutoApi/Settings.png" alt="image"><a href="https://github.com/wangziyingwen/ImageHosting/blob/master/AutoApi/Settings.png"></a><img src="https://github.com/wangziyingwen/ImageHosting/raw/master/AutoApi/token.png" alt="image"><a href="https://github.com/wangziyingwen/ImageHosting/blob/master/AutoApi/token.png"></a></li><li>  2）设置名字为 <strong>GH_TOKEN</strong> , 然后勾选repo，点击 Generate token ，最后<strong>复制保存</strong>生成的github密钥（<strong>获得了github密钥</strong>，一旦离开页面下次就看不到了！）<img src="https://github.com/wangziyingwen/ImageHosting/raw/master/AutoApiP/repo.png" alt="image"><a href="https://github.com/wangziyingwen/ImageHosting/blob/master/AutoApiP/repo.png"></a></li></ul></li><li><strong>第三步，新建secret</strong><ul><li>  1）依次点击页面上栏右边的 Setting -&gt; 左栏 Secrets -&gt; 右上 New repository secret，新建4个secret： <strong>GH_TOKEN、MS_TOKEN、CLIENT_ID、CLIENT_SECRET</strong><img src="https://github.com/wangziyingwen/ImageHosting/raw/master/AutoApiP/setting.png" alt="image"><a href="https://github.com/wangziyingwen/ImageHosting/blob/master/AutoApiP/setting.png"></a><img src="https://github.com/wangziyingwen/ImageHosting/raw/master/AutoApiP/secret2.png" alt="image"><a href="https://github.com/wangziyingwen/ImageHosting/blob/master/AutoApiP/secret2.png"></a><strong>(以下填入内容注意前后不要有空格空行)</strong></li></ul></li></ul><h5 id="GH-TOKEN"><a href="#GH-TOKEN" class="headerlink" title="GH_TOKEN"></a>GH_TOKEN</h5><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">github密钥 (第三步获得)，例如获得的密钥是abc.<span class="hljs-built_in">..xyz</span>，则在secret页面直接粘贴进去，不用做任何修改，只需保证前后没有空格空行<br></code></pre></td></tr></table></figure><hr><h5 id="MS-TOKEN"><a href="#MS-TOKEN" class="headerlink" title="MS_TOKEN"></a>MS_TOKEN</h5><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">微软密钥（第二步获得的<span class="hljs-built_in">ref</span>resh_token）<br></code></pre></td></tr></table></figure><h5 id="CLIENT-ID"><a href="#CLIENT-ID" class="headerlink" title="CLIENT_ID"></a>CLIENT_ID</h5><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">应用程序ID <span class="hljs-comment">(第一步获得)</span><br></code></pre></td></tr></table></figure><h5 id="CLIENT-SECRET"><a href="#CLIENT-SECRET" class="headerlink" title="CLIENT_SECRET"></a>CLIENT_SECRET</h5><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">应用程序密码 <span class="hljs-comment">(第一步获得)</span><br></code></pre></td></tr></table></figure><p>试运行</p><ul><li>  1）点击上栏中间的Action进入运行日志页面，中间应该有个绿色按钮（I understand my workflow…），点击。</li></ul><p>自动刷新后，会看到左边有两个流程，一个Auto Api Pro，一个Update Token （这两个流程名字前面应该是有两个黄色感叹号的）。 分别点进去，然后会看到有个黄条（this schedule was disabled……），点击 enable workflow 按钮，<strong>两个流程都要按这个！</strong></p><p>（不确定是否都需要进行这一步，我自己做视频教程的时候发现有的。如果你没有，直接忽略并往下进行，能正常运行就可以了 ）</p><ul><li>  2）点击两次右上角的星星（star，就是fork按钮的隔壁）启动action，再点击上面的Action选择Auto Api Pro流程 -&gt; build -&gt; runapi 就能看到每次的运行日志，看看运行状况</li></ul><p>（必需点进去build里面的run api看下，api有没有调用到位，有没有出错。外面的Auto Api打勾只能说明运行是正常的，我们还需要确认api调用成功了，就像图里的一样）</p><p><img src="https://github.com/wangziyingwen/ImageHosting/raw/master/AutoApi/%E6%97%A5%E5%BF%97.png" alt="image"></p><ul><li>  3）再点两次星星，查看是否能再次成功运行然后点击Action里的 update token 流程 -&gt; build -&gt; update token ，日志里显示“微软密钥上传成功”。 同时，依次点击页面上栏右边的 Setting -&gt; 左栏 Secrets（也就是Github方面准备的第三步的secret页面），应该能看到MS_TOKEN显示刚刚update了（这一步是为了保证重新上传到secret的token是正确的）</li></ul><h4 id="教程最后"><a href="#教程最后" class="headerlink" title="教程最后"></a>教程最后</h4><p>程序会自行按计划启动，不必操心。</p><p>但是github更新了防止薅羊毛的规则，如果仓库60天无任何变动，将会暂停Action，但是会发邮件通知，所以请留意邮箱，收到邮件请上来手动启动一下action。（我还没有收到过此邮件，但是据说邮件里会有启动链接，或者上来按两次星星按钮就行）</p><p><strong>P版（AutoApiP）用户请留意是否会触发此暂停规则，由于P版采取了新方案，是否能跳过github检测活跃呢？如果P版收到暂停邮件，最好在issues的这个帖子<a href="https://github.com/wangziyingwen/AutoApiP/issues/7">触发暂停统计</a>里留言</strong></p><h3 id="教程完"><a href="#教程完" class="headerlink" title="教程完"></a>教程完</h3>]]></content>
    
    
    <categories>
      
      <category>资源分享</category>
      
      <category>服务搭建</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>免费申请office E5开发者订阅</title>
    <link href="/2021/02/02/apply-for-office-e5-developer/"/>
    <url>/2021/02/02/apply-for-office-e5-developer/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>微软开发者计划E5是为开发人员提供的，是微软的官方活动，申请Office 365开发者计划可以获得为期3个月的免费Office365 E5。 而E5计划就包含了25个用于所有Office 365 应用的许可证。三个月到期后还可通过相关途径成功续期。</p><h2 id="申请账号"><a href="#申请账号" class="headerlink" title="申请账号"></a><strong>申请账号</strong></h2><p>1.访问申请链接 <a href="https://developer.microsoft.com/zh-cn/microsoft-365/dev-program">https://developer.microsoft.com/zh-cn/microsoft-365/dev-program</a></p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210202214745.png" alt="E5"></p><p>2.登录账号</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210202215108.png" alt="login"></p><p>3.注册Office 365 开发人员。下面两个勾选可以只勾选第一个，减少广告，点击下一步继续</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210202215325.png" alt="zhuce"></p><p>4.随便选，点击下一步，再点击保存</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210202215625.png" alt="1"></p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210202215747.png" alt="2"></p><p>5.之后的页面中会提示你没有订阅，点击设置E5订阅。在弹出的页面中输入一个你能记得住的用户名和域，然后记住你的”用户名@域.<a href="https://link.zhihu.com/?target=http://onmicrosoft.com">http://onmicrosoft.com</a>“，点继续。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210202215943.png" alt="4"></p><p>6.验证手机号，这一步会调用谷歌的验证系统，准备好上网工具</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210202220110.png" alt="5"></p><p>7.现在，我们已经申请好了E5订阅了，并一次性申请了25个用户许可证。如果你只是自己用，现在已经可以使用”用户名@域.<a href="https://link.zhihu.com/?target=http://onmicrosoft.com">http://onmicrosoft.com</a>“和之前设置的密码登录你电脑上的Office了。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210202221702.png" alt="6"></p><h2 id="分配账号与安装365"><a href="#分配账号与安装365" class="headerlink" title="分配账号与安装365"></a><strong>分配账号与安装365</strong></h2><p>之前说过E5订阅有25个用户许可证，我们可以点击<strong>转到订阅</strong>或者登录 <a href="https://link.zhihu.com/?target=https://www.office.com/?auth=2">https://www.office.com/?auth=2</a> 分配账号给自己的朋友</p><p>这里一定要加上 <strong>?auth=2</strong> ，否则会进入<strong>「个人版」</strong>office365的登录界面，无法使用这里的<strong>「组织账号」</strong>登录</p><p>点击<strong>安装office</strong>可以安装office365，默认会安装所有的软件。若有自定义的需求，可以使用office tool plus安装。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210202221003.png" alt="7"></p><p>点击左上角的应用图标，然后点击下方的<strong>管理</strong>可以分配账号，进入新页面点击用户——活跃用户——添加用户即可。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210202221114.png" alt="8"></p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210202221402.png" alt="9"></p><h2 id="设置5T网盘容量"><a href="#设置5T网盘容量" class="headerlink" title="设置5T网盘容量"></a><strong>设置5T网盘容量</strong></h2><p>默认onedrive容量是1T，但是可以通过设置更改为5T。 1.点击365主页的onedrive图标，若提示“我们目前还在 OneDrive 上设置文件”可以先跳过本步骤，先完成下面的操作。</p><p>2.打开 <a href="https://link.zhihu.com/?target=https://admin.onedrive.com/?v=StorageSettings">https://admin.onedrive.com/?v=StorageSettings</a> ，也可以在管理中心——所有管理中心——onedrive中找到，更改默认存储为5012GB。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210202221606.png"></p>]]></content>
    
    
    <categories>
      
      <category>资源分享</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>低价开通奈飞等服务的小技巧</title>
    <link href="/2021/02/02/netflix-spotify-apple/"/>
    <url>/2021/02/02/netflix-spotify-apple/</url>
    
    <content type="html"><![CDATA[<p>发现有很多人想开通Netflix等服务，但不知道哪里最便宜，这里我简单写了个教程，可供大家参考。</p><h1 id="Netflix"><a href="#Netflix" class="headerlink" title="Netflix"></a>Netflix</h1><p>区</p><p>Basic</p><p>Standard</p><p>Premium</p><p>美国</p><p>8.99USD</p><p>14.99USD</p><p>17.99USD</p><p>土耳其</p><p>17.99TRY</p><p>29.99TRY</p><p>41.99TRY</p><p>巴西</p><p>21.90BRL</p><p>32.90BRL</p><p>45.90BRL</p><p>阿根廷</p><p>199ARS</p><p>319ARS</p><p>449ARS</p><p>比较好的选择是在土耳其区、巴西区或者阿根廷区开通会员，由于土耳其区价格过低，导致开通的人过多，现在想要在土耳其去开通会员十分困难。本来阿根廷区一直是除土耳其区外最便宜的，但是去年九月的一次收税，使得阿根廷区和巴西区价格相差无几，因此现在一般选择巴西区或者阿根廷区。</p><p>需要巴西的VPS可以在AWS上选购，链接 <a href="https://sa-east-1.console.aws.amazon.com/ec2/v2/home?region=sa-east-1#Home">https://sa-east-1.console.aws.amazon.com/ec2/v2/home?region=sa-east-1#Home</a></p><p>开通Netflix还需要外币信用卡，这个各大银行均能办理。</p><p>手机号可以先购买Google voice，具体操作为先开通美区Netflix试用，绑定Google voice，然后等一个月试用到期后，再用巴西或者阿根廷节点续费Netflix。</p><h1 id="Amazon-Prime-Video"><a href="#Amazon-Prime-Video" class="headerlink" title="Amazon Prime Video"></a>Amazon Prime Video</h1><p>印度区比较便宜，以前可通过购买礼品卡的方式开通，单人一年仅需120RMB，但最近几个月来礼品卡无法购买后，开通印度区PV似乎成为了不可能，现在可以尝试开通俄罗斯区的PV。</p><h1 id="Spotify"><a href="#Spotify" class="headerlink" title="Spotify"></a>Spotify</h1><p>区</p><p>个人价格</p><p>家庭组价格</p><p>香港</p><p>58港币/51人民币</p><p>88港币/77.5人民币</p><p>日本</p><p>980日元/63人民币</p><p>1480日元/95人民币</p><p>美区</p><p>9.9美元/68人民币</p><p>14.9美元/102.5人民币</p><p>菲律宾</p><p>129菲律宾比索/17人民币</p><p>194菲律宾比索/26人民币</p><p>Spotify各区的价格与曲库均不相同，它的开通需要当地区的信用卡或者Paypal，这里的推荐是<strong>开通菲律宾区的Spotify</strong>，曲库与港区相差无几，季付价格确却是港区的一半不到。</p><h2 id="具体方法"><a href="#具体方法" class="headerlink" title="具体方法"></a>具体方法</h2><p>淘宝买菲律宾电话卡，香港电话卡，准备好护照，菲区节点。香港号注册Alipayhk， 淘宝找人充值，菲律宾号注册gcash，再用Alipayhk汇款给gcash，用gcash里面的虚拟信用卡付款Spotify。</p><h1 id="Disney"><a href="#Disney" class="headerlink" title="Disney+"></a>Disney+</h1><p>Disney+由于上线时间太短，能够使用的地区太少。现在美区$6.99/month or $69.99/year；Disney+ 新加坡将在2月23日开启服务，新加坡的价格为Start Streaming 23 February ,S$11.98 a month or S$119.98 a year。</p><h1 id="Apple"><a href="#Apple" class="headerlink" title="Apple"></a>Apple</h1><p>Apple于去年上线了Apple One订阅服务，具体的介绍：<a href="https://www.apple.com/apple-one/">https://www.apple.com/apple-one/</a></p><p>总的来说印度区价格最为便宜，目前可通过购买印度区礼品卡的方式开通；同时菲律宾区也是一个好选择，可以按照菲律宾区Spotify开通的方法来开通Apple One。</p>]]></content>
    
    
    <categories>
      
      <category>资源分享</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>利用反向代理和DNS智能解析加快网站访问速度</title>
    <link href="/2021/01/29/fan-xiang-dai-li-dns/"/>
    <url>/2021/01/29/fan-xiang-dai-li-dns/</url>
    
    <content type="html"><![CDATA[<p>自从上次绿云（GreenCloud）突然的系统故障导致我的博客数据取不出来后，我决定放弃用绿云建站，转而使用口碑更好、更加稳定的contabo，contabo有德国慕尼黑、纽伦堡、美国密苏里州3个机房，我选择的是他家的德国纽伦堡机房，因为服务器远在德国，国内直接访问速度十分不佳，丢包严重，因此我决定使用反向代理的方式来加快网站的访问速度。</p><h1 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h1><h2 id="反向代理简介"><a href="#反向代理简介" class="headerlink" title="反向代理简介"></a>反向代理简介</h2><p><strong>反向代理</strong>在电脑网络中是代理服务器的一种。服务器根据客户端的请求，从其关系的一组或多组后端服务器（如Web服务器）上获取资源，然后再将这些资源返回给客户端，客户端只会得知反向代理的IP地址，而不知道在代理服务器后面的服务器集群的存在。</p><p>这里有个通俗点的简介，关于正向代理与反向代理：<a href="https://www.notion.so/68dce6d0bc4f48089496e6e0b1081c32">https://www.notion.so/68dce6d0bc4f48089496e6e0b1081c32</a></p><h2 id="反向代理作用"><a href="#反向代理作用" class="headerlink" title="反向代理作用"></a>反向代理作用</h2><p>反向代理的主要作用为：</p><ul><li>  对客户端隐藏服务器（集群）的IP地址</li><li>  安全：作为应用层防火墙，为网站提供对基于Web的攻击行为（例如Dos/DDos）的防护，更容易排查恶意软件等</li><li>  为后端服务器（集群）统一提供加密和SSL加速（如SSL终端代理）</li><li>  负载均衡，若服务器集群中有负荷较高者，反向代理通过URL重写，根据连线请求从负荷较低者获取与所需相同的资源或备援</li><li>  对于静态内容及短时间内有大量访问请求的动态内容提供缓存服务</li><li>  对一些内容进行压缩，以节约带宽或为网络带宽不佳的网络提供服务</li><li>  减速上传</li><li>  为在私有网络下（如局域网）的服务器集群提供NAT穿透及外网发布服务</li><li>  提供HTTP访问认证</li><li>  突破互联网封锁（不常用，因为反向代理与客户端之间的连线不一定是加密连线，非加密连线仍有遭内容审查进而遭封禁的风险；此外面对针对域名的关键词过滤、DNS缓存污染/投毒攻击乃至深度数据包检测也无能为力）</li></ul><h2 id="常用反向代理软件"><a href="#常用反向代理软件" class="headerlink" title="常用反向代理软件"></a>常用反向代理软件</h2><ul><li>  Nginx、Tengine</li><li>  Apache HTTP Server</li><li>  Varnish cache</li><li>  Squid Cache</li><li>  Traffic Server</li><li>  HAProxy</li><li>  YXORP</li><li>  Polipo</li><li>  Privoxy</li><li>  IIS</li></ul><p>在这里我使用的是Nginx反向代理，通过宝塔面板实现，简单快捷，不需要自己去添加相应的代码，适合小白或入门用户。</p><h1 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h1><h2 id="条件简介"><a href="#条件简介" class="headerlink" title="条件简介"></a>条件简介</h2><p>被反代的服务器（后端）：一台contabo德国</p><p>用来反代的服务器（前端）：一台华为云香港，一台甲骨文（Oracle）韩国，一台Ovh新加坡</p><p>域名：<a href="ioli.cc">ioli.cc</a></p><p>所用技术：反向代理，DNSPod智能分线路解析</p><p>所用环境：系统均为Debian10，均安装宝塔面板</p><h2 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h2><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>腾讯的DNSPod上可以实现分线路智能解析，判断用户的上网线路是联通或电信或移动，再智能返回对应服务器的 IP。</p><p>华为云香港因为对联通友好，我便将联通线路解析到华为云香港的IP上；</p><p>甲骨文韩国因为是CN2GIA线路，对电信友好，我便将电信线路解析到华为云香港的IP上；</p><p>Ovh新加坡对移动友好，我便将移动线路解析到Ovh新加坡的IP上。</p><p>注意无需解析到源站IP上，不然就成了自己反代自己。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210129144414.png" alt="dns"></p><p>上图变为解析的结果，电信运营商用户访问将返回甲骨文的IP地址，联通运营商用户访问将返回华为云的IP地址，移动运营商用户访问将返回Ovh的IP地址，同时要记住<strong>无论是否添加地区或者运营商的线路，一定需要先添加好【默认】线路的解析</strong>。</p><h3 id="反向代理-1"><a href="#反向代理-1" class="headerlink" title="反向代理"></a>反向代理</h3><p>域名解析完成后，在用来反代的三台服务器上先安装好宝塔面板。</p><p>Debian：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -O install.sh http:<span class="hljs-regexp">//</span>download.bt.cn<span class="hljs-regexp">/install/i</span>nstall-ubuntu_6.<span class="hljs-number">0</span>.sh &amp;&amp; bash install.sh<br></code></pre></td></tr></table></figure><p>安装完成后，进入宝塔面板地址，会提示你安装Nginx，MySQL，PHP，phpMyAdmin，在这里用来反代的服务器只需要安装Nginx，其他的随意，被反代的则需要都安装。</p><p>然后在三台服务器的宝塔面板上添加网站</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210129145345.png" alt="wz"></p><p>PHP版本选择纯静态，数据库不用创建。</p><p>在SSL证书这添加证书，注意<strong>无论是反代服务器还是被反代的服务器，添加的域名所用的SSL证书必须相同，否则网站无法打开。</strong></p><p>例如，<a href="ioli.cc">ioli.cc</a>所用的证书为Buypass，因此在四台服务器的宝塔面板网站SSL证书处均应填入证书的内容以及密钥。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210129150254.png" alt="ssl"></p><p>接下来便是添加反向代理了，点击设置</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210129150636.png" alt="settings"></p><p>点击反向代理，添加反向代理</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210129150858.png" alt="fd"></p><p>代理名称随意，<strong>目标URL填入https://被反代的服务器IP，即后端服务器IP，</strong> <strong>发送域名填入绑定的域名</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210129151230.png" alt="ip"></p><p>我用了三台服务器反代，也就需要在三台服务器上进行以上的操作一共三次。</p><p>关于是否开启缓存，我觉得看个人意愿，不过我觉得不要开为好，浪费资源，一切让建站机自己去处理就好；如果开的话，注意缓存时间的填写。</p><p>完成以上操作后，还有最后一步，打开/etc/hosts，在空白处填入源站服务器IP 你的域名，注意要中间有空格，多台服务器反代的话需要在每一台服务器上完成此操作。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210129152121.png" alt="hosts"></p><p>使用宝塔面板可直接编辑；使用命令行输入</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>hosts<br></code></pre></td></tr></table></figure><p>再输入ip和域名即可。</p><p>完成以上步骤就大功告成了，可用以下一段话做个总结。</p><p>假如有三个服务器：ABC ，BC要反代A。 A为源站，A新建网站，域名是baidu.com。 BC只安装Nginx，新建网站，域名是baidu.com。 BC服务器添加反向代理（宝塔面板），目标URL填【https://源站IP】，发送域名baidu.com保存。 BC服务器打开 /etc/hosts 文件添加：A服务器ip baidu.com ，域名baidu.com解析到BC服务器ip。</p><p>补充下，<strong>源站指的是后端服务器，也就是实际建站的服务器，在反向代理的过程中，源站的设置就和普通建站一样，没有任何改变。</strong></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>除了反向代理外，还可以<a href="https://ioli.cc/98.html">CloudFlare自选节点IP教程，免费CDN加速VPS</a>，具体的速度快慢需要通过实际的测试去了解，我这里就不再多说。</p>]]></content>
    
    
    <categories>
      
      <category>建站知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hetzner拍卖机简单评测</title>
    <link href="/2021/01/29/hetzner/"/>
    <url>/2021/01/29/hetzner/</url>
    
    <content type="html"><![CDATA[<p>上个月买的Hetzner拍卖机刚好今天到期，趁着还没停机做个简单的评测。</p><h1 id="一-基本信息"><a href="#一-基本信息" class="headerlink" title="一.基本信息"></a>一.基本信息</h1><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210117174337.png" alt="hz"></p><h1 id="二-硬盘读写"><a href="#二-硬盘读写" class="headerlink" title="二.硬盘读写"></a>二.硬盘读写</h1><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210117174443.png" alt="hz"></p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210117174457.png" alt="hz"></p><h1 id="三-网络情况"><a href="#三-网络情况" class="headerlink" title="三.网络情况"></a>三.网络情况</h1><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210117175354.png"></p><h1 id="四-使用感受"><a href="#四-使用感受" class="headerlink" title="四.使用感受"></a>四.使用感受</h1><p>这款机是我拿来刷PT的，总体体验非常好，G口的上下行随时都能够跑满，不限流量，我这个月一共用了200T的流量，也没有发现限速的情况，对于需要抢上传的PT用户来说是非常合适的，性能也非常不错，同时下上百个种也没有出现卡顿的情况，CPU不会占用达到100%，唯一的缺点就是价格略高，月付23.53欧。在我看来这款比较适合想要快速刷数据的用户，佛系保种党选用大盘鸡即可。</p><p>顺便分享下我所用的PT下载脚本：<a href="https://ioli.cc/72.html">https://ioli.cc/72.html</a></p>]]></content>
    
    
    <categories>
      
      <category>VPS评测</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>用腾讯轻量搭建带WEB控制台的MC服务器</title>
    <link href="/2021/01/27/minecraft-build/"/>
    <url>/2021/01/27/minecraft-build/</url>
    
    <content type="html"><![CDATA[<p>众所周知mc多好玩，大家都喜爱，可是守护进程有点麻烦，screen经常会有些问题，所以不如搞个面板，顺便也解决守护进程问题 （能不用手就不用手），腾讯轻量大家应该都有，直接开始。</p><h1 id="一-安装宝塔"><a href="#一-安装宝塔" class="headerlink" title="一.安装宝塔"></a>一.安装宝塔</h1><p>选择好相应的系统后，用对应的脚本安装宝塔面板。</p><h2 id="Centos安装命令"><a href="#Centos安装命令" class="headerlink" title="Centos安装命令"></a>Centos安装命令</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">yum install -<span class="hljs-keyword">y</span> wget &amp;&amp; wget -O install.<span class="hljs-keyword">sh</span> http://download.bt.<span class="hljs-keyword">cn</span>/install/install_6.<span class="hljs-number">0</span>.<span class="hljs-keyword">sh</span> &amp;&amp; <span class="hljs-keyword">sh</span> install.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><h2 id="试验性Centos-Ubuntu-Debian安装命令独立运行环境（py3-7）-可能存在少量兼容性问题-不断优化中"><a href="#试验性Centos-Ubuntu-Debian安装命令独立运行环境（py3-7）-可能存在少量兼容性问题-不断优化中" class="headerlink" title="试验性Centos/Ubuntu/Debian安装命令独立运行环境（py3.7） 可能存在少量兼容性问题 不断优化中"></a>试验性Centos/Ubuntu/Debian安装命令独立运行环境（py3.7） 可能存在少量兼容性问题 不断优化中</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -sSO http:<span class="hljs-regexp">//</span>download.bt.cn<span class="hljs-regexp">/install/i</span>nstall_panel.sh &amp;&amp; bash install_panel.sh<br></code></pre></td></tr></table></figure><h2 id="Ubuntu-Deepin安装命令"><a href="#Ubuntu-Deepin安装命令" class="headerlink" title="Ubuntu/Deepin安装命令"></a>Ubuntu/Deepin安装命令</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -O install.sh http:<span class="hljs-regexp">//</span>download.bt.cn<span class="hljs-regexp">/install/i</span>nstall-ubuntu_6.<span class="hljs-number">0</span>.sh &amp;&amp; sudo bash install.sh<br></code></pre></td></tr></table></figure><h2 id="Debian安装命令"><a href="#Debian安装命令" class="headerlink" title="Debian安装命令"></a>Debian安装命令</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -O install.sh http:<span class="hljs-regexp">//</span>download.bt.cn<span class="hljs-regexp">/install/i</span>nstall-ubuntu_6.<span class="hljs-number">0</span>.sh &amp;&amp; bash install.sh<br></code></pre></td></tr></table></figure><h2 id="Fedora安装命令"><a href="#Fedora安装命令" class="headerlink" title="Fedora安装命令"></a>Fedora安装命令</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -O install.sh http:<span class="hljs-regexp">//</span>download.bt.cn<span class="hljs-regexp">/install/i</span>nstall_6.<span class="hljs-number">0</span>.sh &amp;&amp; bash install.sh<br></code></pre></td></tr></table></figure><h2 id="Linux面板7-5-1升级命令"><a href="#Linux面板7-5-1升级命令" class="headerlink" title="Linux面板7.5.1升级命令"></a>Linux面板7.5.1升级命令</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl http:<span class="hljs-regexp">//</span>download.bt.cn<span class="hljs-regexp">/install/u</span>pdate6.shbash<br></code></pre></td></tr></table></figure><h2 id="图简便"><a href="#图简便" class="headerlink" title="图简便"></a>图简便</h2><p>直接选用应用镜像</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210126221312.png" alt="宝塔"></p><h1 id="二-BDS"><a href="#二-BDS" class="headerlink" title="二.BDS"></a>二.BDS</h1><p>bds是mc官方搞的一个基岩版服务端，可以直接运行，分有win/linux</p><p>链接 <a href="https://www.minecraft.net/en-us/download/server/bedrock">https://www.minecraft.net/en-us/download/server/bedrock</a></p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210126221829.png" alt="2"></p><h1 id="三-面板"><a href="#三-面板" class="headerlink" title="三.面板"></a>三.面板</h1><p>选择GitHub上一位大佬的面板，使用的是nodejs</p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/LomotHo/bedrock-console">https://github.com/LomotHo/bedrock-console</a></p><h1 id="四-部署服务"><a href="#四-部署服务" class="headerlink" title="四.部署服务"></a>四.部署服务</h1><p>连接服务器，然后依次进行以下步骤</p><h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mkdir mc<br></code></pre></td></tr></table></figure><h3 id="进入文件夹"><a href="#进入文件夹" class="headerlink" title="进入文件夹"></a>进入文件夹</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> mc<br></code></pre></td></tr></table></figure><h3 id="下载面板"><a href="#下载面板" class="headerlink" title="下载面板"></a>下载面板</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/LomotHo/</span>bedrock-console.git &amp;&amp;cd bedrock-console<br></code></pre></td></tr></table></figure><h3 id="新建文件夹并进入文件夹"><a href="#新建文件夹并进入文件夹" class="headerlink" title="新建文件夹并进入文件夹"></a>新建文件夹并进入文件夹</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">mkdir</span> bedrock &amp;&amp;<span class="hljs-built_in">cd</span> bedrock<br></code></pre></td></tr></table></figure><h3 id="下载MC服务端"><a href="#下载MC服务端" class="headerlink" title="下载MC服务端"></a>下载MC服务端</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//mi</span>necraft.azureedge.net<span class="hljs-regexp">/bin-linux/</span>bedrock-server-<span class="hljs-number">1.16</span>.<span class="hljs-number">201.02</span>.zip<br></code></pre></td></tr></table></figure><h3 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">unzip</span> bedrock-server-<span class="hljs-number">1.16.201.02</span>.zip<br></code></pre></td></tr></table></figure><h3 id="切换到上级目录"><a href="#切换到上级目录" class="headerlink" title="切换到上级目录"></a>切换到上级目录</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">cd</span></span> ..<br></code></pre></td></tr></table></figure><h3 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h3><h4 id="Centos"><a href="#Centos" class="headerlink" title="Centos"></a>Centos</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> nodejs -y<br></code></pre></td></tr></table></figure><h4 id="Ubuntu-Debian"><a href="#Ubuntu-Debian" class="headerlink" title="Ubuntu/Debian"></a>Ubuntu/Debian</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-builtin-name">get</span> install nodejs -y<br></code></pre></td></tr></table></figure><h3 id="运行nodejs"><a href="#运行nodejs" class="headerlink" title="运行nodejs"></a>运行nodejs</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> vue<br></code></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-builtin-name">run</span> build<br></code></pre></td></tr></table></figure><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">cd</span></span> ..<br></code></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i<br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">app</span>.js<br></code></pre></td></tr></table></figure><h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210127234428.png" alt="firewall"></p><p>打开图上所示的端口</p><h1 id="五-访问"><a href="#五-访问" class="headerlink" title="五.访问"></a>五.访问</h1><p>在浏览器中输入 ip:3000 就能控制了</p><p>打开宝塔-软件商店-安装Supervisor管理器</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210127234649.png" alt="supervisor"></p><p>就可以自由玩了</p><h1 id="六-Docker方式部署-懒人必备"><a href="#六-Docker方式部署-懒人必备" class="headerlink" title="六.Docker方式部署(懒人必备)"></a>六.Docker方式部署(懒人必备)</h1><h2 id="项目地址-1"><a href="#项目地址-1" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/LomotHo/bedrock-console">https://github.com/LomotHo/bedrock-console</a></p><p>其中有docker版本，完成后既能有守护进程，也有面板。</p><h1 id="七-其他"><a href="#七-其他" class="headerlink" title="七.其他"></a>七.其他</h1><p>腾讯的docker加速器 <a href="https://mirror.ccs.tencentyun.com/">https://mirror.ccs.tencentyun.com</a>，配置在腾讯的服务器，内网速度很快。</p>]]></content>
    
    
    <categories>
      
      <category>服务搭建</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>(转载)网站使用CloudFlare自选节点IP教程，免费CDN加速VPS</title>
    <link href="/2021/01/26/cloudflare-cdn/"/>
    <url>/2021/01/26/cloudflare-cdn/</url>
    
    <content type="html"><![CDATA[<p>网站套CloudFlare自选ip节点教程！很多站长注册使用CloudFlare免费CDN加速网站全球访问速度，还带防御功能，隐藏服务器真实IP。但是CF自动分配的IP比较慢。所以我们利用CloudFlare Partner 和Dnspod来自定义节点优化加速效果。</p><h2 id="使用CFP，CNANE方式接入CF"><a href="#使用CFP，CNANE方式接入CF" class="headerlink" title="使用CFP，CNANE方式接入CF"></a>使用CFP，CNANE方式接入CF</h2><p>CFP是指Cloudflare Partner，第三方合作伙伴。如果在Cloudflare官网添加网站，必须把域名的NS地址改成CF官方的。使用CFP的话可以通过CNAME方式接入CF，然后自选IP。</p><p>先到Cloudflare.com注册一个账号。本文以笨牛网CFP面板为例，到笨牛网CFP面板： <a href="https://cdn.bnxb.com/">https://cdn.bnxb.com</a> 直接用CF账号登录，笨牛网是汉化的CFP设置面板，网站CDN加速其实是Cloudflare官方提供。</p><p>登录后，如下图：域名接入—添加域名：比如 主域名：pigji.com 子域名：<a href="http://www.pigji.com/">www.pigji.com</a><br><img src="https://cdn.jsdelivr.net/gh/couldbeloveu/newimg/cloudflare/bnxb2.png" alt="img"></p><p>然后点击菜单 ：域名列表，就可以看到刚刚添加的域名呢。<br><img src="https://cdn.jsdelivr.net/gh/couldbeloveu/newimg/cloudflare/bnxb3.png" alt="img"></p><p>点击域名进入下图所示界面，点击 解析设置，可以看到域名原本的A记录解析。强调：全部删除重新添加自己需要的A记录。回源地址就是你网站服务器主机的IP地址<br><img src="https://cdn.jsdelivr.net/gh/couldbeloveu/newimg/cloudflare/bnxb4.png" alt="img"><br>添加完成，页面下方会给出Cloudflare提供的CNAME记录值。</p><p>然后我们就需要到DNSPOD添加CNAME记录呢。</p><h2 id="DNSPOD解析准备"><a href="#DNSPOD解析准备" class="headerlink" title="DNSPOD解析准备"></a>DNSPOD解析准备</h2><p>不是强制用Dnspod.cn，只要可以分国内、国外线路解析域名的DNS服务商就行，比如 华为DNS，DNS.com等。本文以DNSPOD为例。</p><p>假如域名在国外注册，登录域名管理后台，修改域名NS地址为dnspod的NS地址，如下图：<br><img src="https://cdn.jsdelivr.net/gh/couldbeloveu/newimg/cloudflare/bnxbgains.png" alt="img"></p><p>然后回到DNSPOD添加你的域名就行，这样你的域名的解析权就转移到DNSPOD来了。<br>然后我们按CFP提供的值，添加CNAME记录，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/couldbeloveu/newimg/cloudflare/bnxb7.png" alt="img"></p><h2 id="回到CFP面板设置相关参数"><a href="#回到CFP面板设置相关参数" class="headerlink" title="回到CFP面板设置相关参数"></a>回到CFP面板设置相关参数</h2><p>回到笨牛CFP面板这边，点击：主要设置，开始设置CloudFlare的加速与防御功能，如下图：<br><img src="https://cdn.jsdelivr.net/gh/couldbeloveu/newimg/cloudflare/bnxb5.png" alt="img"><br>如果是静态网站可以全站缓存，如果是WP，DISCUZ就按上图我这样的来吧。</p><p>还有防火墙：IP黑名单、IP白名单，UA屏蔽、防CC等功能，自行探索。高级设置懂的就按需设置，不懂的默认就行。</p><p>然后去 ping.chinaz.com检测一下，看看自己域名的解析IP是不是变成Cloudflare的呢。<br>这样的好处就是你的真实IP隐藏起来了。</p><h2 id="最重要的-自选节点IP"><a href="#最重要的-自选节点IP" class="headerlink" title="最重要的 自选节点IP"></a>最重要的 自选节点IP</h2><p>一旦你成功套上cloudflare后，下一步你就可以利用DNSPOD分线路解析的功能开始自选IP。<br>默认线路是 CF的CNAME记录，不要修改。<br>然后我们添加境内线路，和移动线路的A记录<br>等于境内（电信联通）+移动，自定义IP，如下图<br><img src="https://cdn.jsdelivr.net/gh/couldbeloveu/newimg/cloudflare/bnxb6.png" alt="img"></p><p>哪些Cloudflare的节点IP适合国内用户，自己去寻找呢，下方有推荐部分IP， 也有提供CF的所有节点IP段。</p><h2 id="推荐节点IP，有可能失效"><a href="#推荐节点IP，有可能失效" class="headerlink" title="推荐节点IP，有可能失效"></a>推荐节点IP，有可能失效</h2><p><strong>电信推荐节点：洛杉矶 圣何塞</strong><br>104.16.160.1-104.16.160.254<br>104.19.150.1-104.19.150.254</p><p><strong>电信推荐节点 CF与百度合作</strong><br>162.159.208.4-162.159.208.103<br>162.159.209.4-162.159.209.103<br>162.159.210.4-162.159.210.103<br>162.159.211.4-162.159.211.103</p><p><strong>联通推荐节点</strong><br>联通不好找，随电信的IP吧<br>104.19.150.1-104.19.150.254</p><p><strong>移动推荐节点：走香港</strong><br>141.101.115.1 - 141.101.115.254<br>172.64.32.1 - 172.64.32.254<br>198.41.214.1 - 198.41.214.254<br>104.25.176.1 - 104.25.176.254<br>104.18.177.1 - 104.18.177.254</p><p><strong>其它推荐节点</strong><br>104.23.128.14<br>104.22.32.14<br>104.24.32.14<br>172.67.96.14<br>198.41.208.14</p><p>注意：移动部分地区，CF节点被运营商阻断，导致网站有时无法访问。如果出现移动线路无法访问，可把移动线路解析到： 1.0.0.1</p><h2 id="来自网友的测试cloudflare优秀IP"><a href="#来自网友的测试cloudflare优秀IP" class="headerlink" title="来自网友的测试cloudflare优秀IP"></a>来自网友的测试cloudflare优秀IP</h2><p>网友测试地点是长三角地区，时间为傍晚，不同地区和时间测试有差异。</p><h5 id="电信"><a href="#电信" class="headerlink" title="电信"></a>电信</h5><p>大多数都是走 LAX洛杉矶<br>已知的例外：<br>104.16.32.0 - 104.16.63.255 SJC<br>104.16.144.0 - 104.16.159.255 SJC<br>104.18.16.0 - 104.18.31.255 SJC<br>103.21.244.0/24 FRA 或 DUS<br>162.159.36.0/24 SJC<br>162.159.46.0/24 SJC<br>162.159.128.0 - 162.159.200.0 AMS 、FRA 、LHR<br>198.41.211.0/24 LHR</p><p>不同 IP 的下载速率差异较大，中位数为 150KB/s<br>顺便一提，测试中只有电信 4G 的 1.1.1.0/24 是不通的</p><h5 id="联通"><a href="#联通" class="headerlink" title="联通"></a>联通</h5><p>大多数可访问段来自 LAX洛杉矶</p><p>已知的例外：<br>104.16.32.0 - 104.16.63.255 SJC<br>104.17.0.0 - 104.17.15.255 SJC<br>104.19.144.0 - 104.19.159.255 SJC<br>104.20.0.0/16 SJC<br>104.22.0.0 - 104.22.63.255 SJC<br>104.22.64.0 - 104.22.79.255 FRA<br>104.23.96.0 - 104.23.143.255 SJC<br>104.24.0.0/16 MUC 、SJC 、LAX<br>104.26.0.0/16 SJC<br>104.27.0.0/16 MUC 、SJC 、SEA 、FRA<br>172.67.0.0/16 SJC 、FRA 、LAX<br>103.21.244.0/24 SJC<br>141.101.113.0/24 SJC<br>162.159.36.0/24 SJC<br>162.159.46.0/24 SJC<br>162.159.160.0/24 LHR<br>162.159.224.0 - 162.159.239.0 MUC</p><p>不同 IP 的下载速率差异较小，中位数为 250KB/s，SJC 、MUC 平均较快</p><h5 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h5><p>可访问段来自的地域比较零散</p><p>1.0.0.0/24 LAX<br>1.1.1.0/24 LAX</p><p>104.16.0.0/12 大多数为 LAX 、SJC 交替出现<br>在此基础上，还会参杂有：<br>104.16.0.0/16 HKG 、SEA<br>104.17.0.0/16 HKG 、SEA<br>104.18.0.0/16 FRA 、HKG 、SEA<br>104.19.0.0/16 HKG<br>104.20.0.0/16 SIN<br>104.24.0.0/16 SIN<br>104.26.0.0/16 SEA<br>104.31.0.0/16 SEA</p><p>172.64.0.0/13 大多数为 LAX 、SJC 交替出现<br>除了 172.64.64.0 - 172.64.79.0 为 HKG</p><p>103.21.244.0/24 SJC<br>141.101.64.0/18 SJC 、LAX 、HKG<br>162.158.0.0/15 SJC 、LAX<br>173.245.48.0/20 LAX<br>190.93.240.0/20 HKG<br>198.41.128.0/17 SJC 、LAX 、HKG</p><p>不同 IP 速率差异较大，中位数为 73KB/s，<br>SEA 平均较快，个别 HKG 速度很快</p><h2 id="CloudFlare官方公布的所有节点IP"><a href="#CloudFlare官方公布的所有节点IP" class="headerlink" title="CloudFlare官方公布的所有节点IP"></a>CloudFlare官方公布的所有节点IP</h2><p>官方节点更新地址：<br><a href="https://www.cloudflare.com/zh-cn/ips">https://www.cloudflare.com/zh-cn/ips</a></p><p>IPv4<br>173.245.48.0/20<br>103.21.244.0/22<br>103.22.200.0/22<br>103.31.4.0/22<br>141.101.64.0/18<br>108.162.192.0/18<br>190.93.240.0/20<br>188.114.96.0/20<br>197.234.240.0/22<br>198.41.128.0/17<br>162.158.0.0/15<br>104.16.0.0/12<br>172.64.0.0/13<br>131.0.72.0/22<br>Also available as a <a href="https://www.cloudflare.com/ips-v4">IPv4 text list</a>.</p><p>IPv6<br>2400:cb00::/32<br>2606:4700::/32<br>2803:f800::/32<br>2405:b500::/32<br>2405:8100::/32<br>2a06:98c0::/29<br>2c0f:f248::/32<br>Also available as a <a href="https://www.cloudflare.com/ips-v6">IPv6 text list</a>.</p><h2 id="其他第三方CFP站点"><a href="#其他第三方CFP站点" class="headerlink" title="其他第三方CFP站点"></a>其他第三方CFP站点</h2><p><a href="https://cdn.moeelf.comhttps//cf.tlo.xyz">https://cdn.moeelf.comhttps://cf.tlo.xyz</a></p><h2 id="部分垃圾域名无法使用CF的服务"><a href="#部分垃圾域名无法使用CF的服务" class="headerlink" title="部分垃圾域名无法使用CF的服务"></a>部分垃圾域名无法使用CF的服务</h2><p>部分免费域名被Cloudflare嫌弃，如 .ga, .gq, .ml, .tk 等垃圾后缀域名无法使用CF，被限制使用。<br>去Namesilo.com 买6位数字的.xyz域名特别便宜，com域名也才8刀多，使用优惠码 NEW2020 首单还能优惠1美元。</p><h2 id="套CloudFlare后获取用户真实IP地址"><a href="#套CloudFlare后获取用户真实IP地址" class="headerlink" title="套CloudFlare后获取用户真实IP地址"></a>套CloudFlare后获取用户真实IP地址</h2><p>适合宝塔面板 + Nginx，修正网站日志里面访客IP为CDN节点IP的问题。</p><p>宝塔面板后台—Nginx设置—配置修改<br>找到</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">include</span> proxy.<span class="hljs-keyword">conf</span>;<br></code></pre></td></tr></table></figure><p>在其上方添加：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">set_real_ip_from</span> <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>;<br><span class="hljs-attribute">real_ip_header</span> X-Forwarded-For;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/couldbeloveu/newimg/cloudflare/bnxbrealip1.png" alt="img"></p><p>然后记得重载Nginx配置就行，或者重启。</p><p>原文来自：<a href="https://www.pigji.com/598.html">https://www.pigji.com/598.html</a></p>]]></content>
    
    
    <categories>
      
      <category>服务搭建</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>测试 VPS 本地连接最大速度 iperf3</title>
    <link href="/2021/01/25/speed-test-iperf3/"/>
    <url>/2021/01/25/speed-test-iperf3/</url>
    
    <content type="html"><![CDATA[<p>大多 VPS 测速脚本使用 speedtest、fast.com 测速节点，很多时候不能真实反映本地连接速度，最直接方法还是从本地发起测试。有个 iperf3 工具可以从本地测试 VPS 可达的最大带宽速度，支持 TCP /UDP 多线程并发测速。</p><h1 id="获取安装-iperf3"><a href="#获取安装-iperf3" class="headerlink" title="获取安装 iperf3"></a>获取安装 iperf3</h1><h2 id="Centos"><a href="#Centos" class="headerlink" title="Centos"></a>Centos</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">yum</span> -y install iperf<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h2 id="Ubuntu-Debian"><a href="#Ubuntu-Debian" class="headerlink" title="Ubuntu/Debian"></a>Ubuntu/Debian</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-builtin-name">get</span> -y install iperf3<br></code></pre></td></tr></table></figure><p>VPS 和本地都要安装。CentOS 或 Ubuntu 系统可以直接在自带软件源里获得。其它 Linux 发行版、macOS 或 Windows 系统，可以从<a href="https://iperf.fr/iperf-download.php">这里下载</a>。</p><p>Windows 版本下载解压后，不是直接运行 .exe 文件，而是将解压文件（不包括文件夹）放入到 <strong><code>系统盘:\Windows\System32</code></strong> 文件夹下，之后以管理员身份运行“命令提示符”输入测速命令。</p><h1 id="iperf3-测速用法"><a href="#iperf3-测速用法" class="headerlink" title="iperf3 测速用法"></a>iperf3 测速用法</h1><p>先在 VPS 上运行 iperf3 进程。其中 <code>-s</code> 参数表示服务器端，<code>-p</code> 指定使用端口（默认端口 5201。别忘了<a href="https://www.hostarr.com/firewalld-tutorial/">防火墙放行端口</a>）。如果需要以守护进程后台运行，追加 <code>-D</code> 参数。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">iperf3</span> -s -p <span class="hljs-number">5201</span> <br></code></pre></td></tr></table></figure><p>然后在本机发起测速。其中 <code>-c</code> 参数表示客户端并指定测速服务器地址，<code>-p</code> 指定服务器端口，<code>-t</code> 指定测试时长（单位秒），<code>-P</code> 指定并发连接数（越高越能测试到速度极限），<code>-R</code> 表示下载测速（不加参数则测试上传速度）。如果要测试 UDP 连接，追加 <code>-u</code> 参数。<a href="http://software.es.net/iperf/invoking.html#iperf3-manual-page">点此查看完整参数</a>。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">iperf<span class="hljs-number">3</span> -<span class="hljs-keyword">c</span> <span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span> -p <span class="hljs-number">5201</span> -t <span class="hljs-number">60</span> -P <span class="hljs-number">10</span> -R<br></code></pre></td></tr></table></figure><p>运行结果如下图，[SUM] 行就是测试数据（以 receiver 为准），带宽测速平均每秒427Mbits。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210117183504.png"></p>]]></content>
    
    
    <categories>
      
      <category>服务搭建</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>利用腾讯轻量服务器搭建FRP服务</title>
    <link href="/2021/01/25/frp/"/>
    <url>/2021/01/25/frp/</url>
    
    <content type="html"><![CDATA[<p>在如今这个IPV4缺乏的年代，家庭宽带获取到公网IPV4相对比较困难，特别是移动用户，基本上就是默认不给公网IPV4，这时候，如果我们想要把内网的资源映射到公网上去，可能会需要用到内网穿透。而FRP就是提供这种服务的一种工具废话少说，现在开始进入正题。</p><h1 id="一-腾讯轻量服务器购买"><a href="#一-腾讯轻量服务器购买" class="headerlink" title="一.腾讯轻量服务器购买"></a>一.腾讯轻量服务器购买</h1><p>对于预算较低的用户，香港地区24的轻量还是非常推荐的，<a href="https://buy.cloud.tencent.com/lighthouse?region=5&blueprintType=PURE_OS&blueprintId=lhbp-8l0svqtk&bundleId=bundle_linux_sml1_1t">点此购买。</a></p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210122001444.png" alt="购买界面"></p><p>这边我们选择系统镜像，我们以centos8为例。</p><h1 id="二-开启端口"><a href="#二-开启端口" class="headerlink" title="二.开启端口"></a>二.开启端口</h1><p>在腾讯云防火墙开启相应端口（以映射web服务为例，开启80端口，默认已经开启）。</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210122001639.png" alt="端口"></p><h1 id="三-远程登录服务器，下载源码（以最新版为例"><a href="#三-远程登录服务器，下载源码（以最新版为例" class="headerlink" title="三.远程登录服务器，下载源码（以最新版为例)"></a>三.远程登录服务器，下载源码（以最新版为例)</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/fatedier/</span>frp<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v0.35.0/</span>frp_0.<span class="hljs-number">35.0</span>_linux_amd64.tar.gz<br></code></pre></td></tr></table></figure><h1 id="四-解压并编辑配置文件"><a href="#四-解压并编辑配置文件" class="headerlink" title="四.解压并编辑配置文件"></a>四.解压并编辑配置文件</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -zxvf frp_<span class="hljs-number">0</span>.<span class="hljs-number">35</span>.<span class="hljs-number">0</span>_linux_amd<span class="hljs-number">64</span>.tar.gz<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cd</span> frp_<span class="hljs-number">0</span>.<span class="hljs-number">35</span>.<span class="hljs-number">0</span>_linux_amd<span class="hljs-number">64</span><br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">vi</span> frps.ini<br></code></pre></td></tr></table></figure><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#修改frps.ini内容如下：</span><br>[common]<br>​<br><span class="hljs-meta"># frp server的工作端口，默认7000，可以更改</span><br>bind_port = <span class="hljs-number">7000</span><br>​<br><span class="hljs-meta"># http和https的端口定义</span><br>vhost_http_port = <span class="hljs-number">80</span><br>vhost_https_port = <span class="hljs-number">443</span><br>​<br><span class="hljs-meta"># 连接时需要的认证token，类似于密码，可选填</span><br><span class="hljs-meta">#token = 000000</span><br>​<br><span class="hljs-meta"># 子域名，可选填</span><br><span class="hljs-meta"># subdomain_host = frps.com</span><br>​<br><span class="hljs-meta"># 404 页面</span><br>custom_404_page = /root/frp_0<span class="hljs-number">.31</span><span class="hljs-number">.1</span>_linux_amd64/<span class="hljs-number">404.</span>html<br>​<br><span class="hljs-meta"># dashboard图形管理页面使用端口</span><br>dashboard_port = <span class="hljs-number">7500</span><br>​<br><span class="hljs-meta"># dashboard帐号</span><br>dashboard_user = admin<br><span class="hljs-meta"># dashboard登陆密码，可以自己修改，这里用admin</span><br>dashboard_pwd = admin<br></code></pre></td></tr></table></figure><p>并按照配置要求开放防火墙端口（此处为7000）。</p><h1 id="五-设置开机启动"><a href="#五-设置开机启动" class="headerlink" title="五.设置开机启动"></a>五.设置开机启动</h1><h2 id="添加systemd配置文件："><a href="#添加systemd配置文件：" class="headerlink" title="添加systemd配置文件："></a>添加systemd配置文件：</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/systemd/</span>system/frp.service<br></code></pre></td></tr></table></figure><p>文件内容如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[Unit]<span class="hljs-attribute">Description</span>=The nginx HTTP <span class="hljs-keyword">and</span> reverse<span class="hljs-built_in"> proxy </span><span class="hljs-attribute">serverAfter</span>=network.target remote-fs.target nss-lookup.target​[Service]<span class="hljs-attribute">Type</span>=simpleExecStart=/usr/local/frp/frps -c /usr/local/frp/frps.<span class="hljs-attribute">iniKillSignal</span>=SIGQUITTimeoutStopSec=5KillMode=processPrivateTmp=trueStandardOutput=syslogStandardError=inherit​[Install]<span class="hljs-attribute">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><p>ExecStart的内容请根据自己frp安装目录修改。</p><h2 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl daemon-reload</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">systemctl <span class="hljs-builtin-name">enable</span> frp<br></code></pre></td></tr></table></figure><h2 id="启动-frp"><a href="#启动-frp" class="headerlink" title="启动 frp"></a>启动 frp</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> frp<br></code></pre></td></tr></table></figure><h2 id="查看frp是否启动"><a href="#查看frp是否启动" class="headerlink" title="查看frp是否启动"></a>查看frp是否启动</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> aux  <span class="hljs-keyword">grep</span> frps<br></code></pre></td></tr></table></figure><h1 id="六-客户端配置"><a href="#六-客户端配置" class="headerlink" title="六.客户端配置"></a>六.客户端配置</h1><p>客户端下载地址：<a href="https://github.com/fatedier/frp/releases/download/v0.35.0/frp_0.35.0_windows_amd64.zip">https://github.com/fatedier/frp/releases/download/v0.35.0/frp_0.35.0_windows_amd64.zip</a></p><p>解压到自己喜欢的目录，进入该文件夹，可以看到很多文件名中带有”frps”的文件以及文件名中带有”frpc”的文件，分别对应frp的服务器端和客户端，我们正在配置的是客户端，因此文件名中带有”frps”的文件均无需保留，可以删除。</p><p>删除后应具有以下文件/文件夹：</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210122003451.png" alt="文件夹"></p><p>用记事本打开frpc.ini（电脑上有Notepad++的话用Notepad++编辑更好，因为这种配置文件会因为编码类型的改变而出现问题，Notepad++更改编码类型会很方便），编辑内容如下：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">[common]server_addr = x.x.x.x    # 填写自己的云服务器公网IP地址，有域名的读者也可以填写域名server_port = <span class="hljs-number">7000</span>       # 云服务器设置的端口为<span class="hljs-number">7000</span>，所以这里填<span class="hljs-number">7000</span># token = <span class="hljs-number">000000</span>         # 与frps.ini设置的token一致，没设置则删去​[test1]                  # []内可以自己起一个拉风的名字^_^type = tcp               # 传输协议，可以是tcp或者udplocal_ip = <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>     # 计算机网络中，<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>代表本地地址local_port = <span class="hljs-number">80</span>          # 需要映射出去的端口号，<span class="hljs-number">80</span>为http默认端口号，此端口号必须被本机放行remote_port = <span class="hljs-number">10000</span>      # 映射到云服务器上面的端口号，必须被云服务器的防火墙放行<br></code></pre></td></tr></table></figure><p>大功告成，可以运行了。在打开CMD或者Windows Terminal用cd命令进入frpc.ini所在目录，输入：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">frpc.exe -<span class="hljs-keyword">c</span> frpc.ini<br></code></pre></td></tr></table></figure><p>检查是否有相关进程正在运行。</p><h1 id="七-配置完成，尽情享用"><a href="#七-配置完成，尽情享用" class="headerlink" title="七.配置完成，尽情享用"></a>七.配置完成，尽情享用</h1>]]></content>
    
    
    <categories>
      
      <category>服务搭建</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>一键PT脚本安装qBittorrent+Deluge+rTorrent+Transmission</title>
    <link href="/2021/01/25/qbittorrent-deluge-rtorrent-transmission/"/>
    <url>/2021/01/25/qbittorrent-deluge-rtorrent-transmission/</url>
    
    <content type="html"><![CDATA[<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ol><li> 本脚本只支持 x86_64 (amd64) 架构，其他架构都不支持。ARM 用户建议使用 <a href="https://github.com/amefs/quickbox-arm">QuickBox ARM</a></li><li> 本脚本只在独服和 KVM 虚拟化的 VPS 下测试，OpenVZ、Xen 等其他虚拟化架构仍可以尝试使用，但不保证没问题</li><li> 本脚本目前支持 Debian 9/10, Ubuntu 16.04/18.04. <em>推荐使用 Debian 10 或 Ubuntu 18.04</em></li><li> 本文的使用说明中的图片是一两年前的，与当前脚本存在较大出入（但文字内容是及时更新的）</li><li> 建议重装完系统后使用此脚本，非全新安装的情况下（比如你先跑了个其他盒子脚本再跑这个）不确定因素太多容易翻车</li><li> 目前没有简单易用的卸载方法。如果你有卸载的需求，使用前请三思</li></ol><h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><p><a href="https://github.com/Aniverse/inexistence">https://github.com/Aniverse/inexistence</a></p><h1 id="一键脚本"><a href="#一键脚本" class="headerlink" title="一键脚本"></a>一键脚本</h1><h3 id="如果你是新手，对很多选项不了解，直接用这个（替换下账号密码部分）"><a href="#如果你是新手，对很多选项不了解，直接用这个（替换下账号密码部分）" class="headerlink" title="如果你是新手，对很多选项不了解，直接用这个（替换下账号密码部分）"></a>如果你是新手，对很多选项不了解，直接用这个（替换下账号密码部分）</h3><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">bash</span> &lt;<span class="hljs-comment">(wget</span> --<span class="hljs-comment">no</span><span class="hljs-literal">-</span><span class="hljs-comment">check</span><span class="hljs-literal">-</span><span class="hljs-comment">certificate</span> <span class="hljs-literal">-</span><span class="hljs-comment">qO</span><span class="hljs-literal">-</span> <span class="hljs-comment">https://github</span><span class="hljs-string">.</span><span class="hljs-comment">com/Aniverse/inexistence/raw/master/inexistence</span><span class="hljs-string">.</span><span class="hljs-comment">sh)</span> <span class="hljs-comment">\</span><br><span class="hljs-literal">-</span><span class="hljs-comment">y</span> --<span class="hljs-comment">tweaks</span> --<span class="hljs-comment">bbr</span> --<span class="hljs-comment">rclone</span> --<span class="hljs-comment">no</span><span class="hljs-literal">-</span><span class="hljs-comment">system</span><span class="hljs-literal">-</span><span class="hljs-comment">upgrade</span> --<span class="hljs-comment">flexget</span> --<span class="hljs-comment">tr</span><span class="hljs-literal">-</span><span class="hljs-comment">deb</span> --<span class="hljs-comment">filebrowser</span> <span class="hljs-comment">\</span><br>--<span class="hljs-comment">de</span> <span class="hljs-comment">1</span><span class="hljs-string">.</span><span class="hljs-comment">3</span><span class="hljs-string">.</span><span class="hljs-comment">15</span> --<span class="hljs-comment">rt</span> <span class="hljs-comment">0</span><span class="hljs-string">.</span><span class="hljs-comment">9</span><span class="hljs-string">.</span><span class="hljs-comment">8</span> --<span class="hljs-comment">qb</span> <span class="hljs-comment">4</span><span class="hljs-string">.</span><span class="hljs-comment">1</span><span class="hljs-string">.</span><span class="hljs-comment">9</span> <span class="hljs-literal">-</span><span class="hljs-comment">u</span> <span class="hljs-comment">这十二个字换成你的用户名</span> <span class="hljs-literal">-</span><span class="hljs-comment">p</span> <span class="hljs-comment">这十个字换成你的密码</span><br></code></pre></td></tr></table></figure><h3 id="如需自定义"><a href="#如需自定义" class="headerlink" title="如需自定义"></a>如需自定义</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">bash &lt;(wget --no-check-certificate -qO- https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/Aniverse/i</span>nexistence<span class="hljs-regexp">/raw/m</span>aster/inexistence.sh)<br></code></pre></td></tr></table></figure><h3 id="嫌太长，短命令"><a href="#嫌太长，短命令" class="headerlink" title="嫌太长，短命令"></a>嫌太长，短命令</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">bash &lt;(wget -qO- https:<span class="hljs-regexp">//gi</span>t.io/abcde)<br></code></pre></td></tr></table></figure><h1 id="安装指导"><a href="#安装指导" class="headerlink" title="安装指导"></a>安装指导</h1><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210119131234.png" alt="img">基本信息</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210119131726.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210119131834.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210119132018.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210119132055.png" alt="img"></p><p>之后耐心等待安装，安装时间视安装软件数量以及系统性能而定，最终会得到各个软件WebUI的访问地址，之后重启系统便可成功安装。</p><h1 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h1><p>需要进行相关操作时，输入</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">mingling</span><br></code></pre></td></tr></table></figure><p>即可</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210119132736.png" alt="img"></p><h2 id="输入1"><a href="#输入1" class="headerlink" title="输入1"></a>输入1</h2><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210119132840.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210119132928.png" alt="img"></p><h2 id="输入2"><a href="#输入2" class="headerlink" title="输入2"></a>输入2</h2><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210119133018.png" alt="img"></p><h2 id="输入7"><a href="#输入7" class="headerlink" title="输入7"></a>输入7</h2><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210119133223.png" alt="img"></p><p>可通过选项02安装魔改bbr，通过选项03配置IPv6</p><h2 id="输入6"><a href="#输入6" class="headerlink" title="输入6"></a>输入6</h2><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20210119133340.png" alt="img"></p><p>可观察各个软件的运行情况，以及通过相关命令管理。</p><h1 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h1><ol><li> <strong><em>是否升级系统</em></strong> 低于 <code>Ubuntu 18.04</code>、<code>Debian 10</code> 的 LTS 系统可以选择用脚本升级系统（Ubuntu 20.04 暂不支持） 一般来说整个升级过程应该是无交互的，应该不会碰到什么问你 Yes or No 的问题 升级完后会直接执行重启命令，重启完后你需要再次运行脚本来完成软件的安装</li><li> <strong><em>账号密码</em></strong> <strong><code>-u &lt;username&gt; -p &lt;password&gt;</code></strong> 你输入的账号密码会被用于各类软件以及 SSH 的登录验证 用户名需要以字母开头，长度 4-16 位；密码需要同时包含字母和数字，长度至少 8 位</li><li> <strong><em>是否更换软件源</em></strong> <strong>目前默认直接换源不再提问，如果不想换源，请在运行脚本的使用 <code>--no-source-change</code> 参数</strong> 这个选项决定是否替换 <code>/etc/apt/sources.list</code> 文件。 其实大多数情况下无需换源；但某些盒子默认的源可能有点问题，所以我干脆做成默认都换源了</li><li> <strong><em>线程数量</em></strong> <strong><code>--mt-single</code><strong>、</strong><code>--mt-double</code><strong>、</strong><code>--mt-half</code><strong>、</strong><code>--mt-max</code></strong> <strong>目前默认直接使用全部线程不再提问，如果不想使用全部线程，请在运行脚本的使用以上的参数来指定</strong> 编译时使用几个线程进行编译。一般来说用默认的选项，也就是全部线程都用于编译就行了 某些 VPS 可能限制下线程数量能避免编译过程中因为内存不足翻车</li><li> <strong><em>安装时是否创建 swap</em></strong> <strong><code>--swap</code><strong>，</strong><code>--no-swap</code></strong> <strong>目前默认对于内存小于 1926MB 的服务器直接启用 swap 不再询问，如不想使用 swap 请用 <code>--swap-no</code> 参数</strong> 一些内存不够大的 VPS 在编译安装时可能物理内存不足，使用 swap 可以解决这个问题 实测 1C1T 1GB 内存 的 Vultr VPS 安装 Flood 不开启 swap 的话会失败，开启就没问题了 目前对于物理内存小于 1926MB 的都默认启用 swap，如果内存大于这个值那么你根本就不会看到这个问题……</li><li> <strong><em>qBittorrent</em></strong> <strong><code>--qb 4.2.3 --qb-static</code><strong>、</strong><code>--qb 3.3.11</code><strong>、</strong><code>--qb no</code></strong> static 指静态编译版本，deb 指使用 efs 菊苣编译好的 deb 包来安装。这两种安装方法的最大特点是安装速度非常快 因为 static 和 deb 安装已经很快了，因此去除了从 repo 或 ppa 安装的选项</li><li> <strong><em>Deluge</em></strong> <strong><code>--de 1.3.15_skip_hash_check</code><strong>、</strong><code>--de 1.3.9</code><strong>、</strong><code>--de no</code></strong> 默认选项为从源码安装 1.3.15 2.0.3 目前运行在 Python 2.7 下，且仍然有一些 PT 站不支持 2.0.3，因此不推荐使用 此外还会安装一些实用的 Deluge 第三方插件：</li></ol><ul><li>  <code>AutoRemovePlus</code> 是自动删种插件，支持 WebUI 与 GtkUI</li><li>  <code>ltconfig</code> 是一个调整 <code>libtorrent-rasterbar</code> 参数的插件，在安装完后就启用了 <code>High Performance Seed</code> 模式</li><li>  <code>Stats</code>、<code>TotalTraffic</code>、<code>Pieces</code>、<code>LabelPlus</code>、<code>YaRSS2</code>、<code>NoFolder</code> 都只能在 GUI 下设置，WebUI 下无法显示</li><li>  <code>Stats</code> 和 <code>TotalTraffic</code>、<code>Pieces</code> 分别可以实现速度曲线和流量统计、区块统计</li><li>  <code>LabelPlus</code> 是加强版的标签管理，支持自动根据 Tracker 对种子限速，刷 Frds 可用</li><li>  <code>YaRSS2</code> 是用于 RSS 的插件 隐藏选项 21，是可以跳过校验、全磁盘预分配的 1.3.15 版本 <strong>使用修改版客户端、跳过校验 存在风险，后果自负</strong></li></ul><ol><li> <strong><em>rTorrent</em></strong> <strong><code>--rt 0.9.8</code><strong>、</strong><code>--rt 0.9.3 --enable-ipv6</code><strong>、</strong><code>--rt no</code></strong> 这部分是调用我修改的 <a href="https://github.com/Aniverse/rtinst">rtinst</a> 来安装的 注意，<code>Ubuntu 18.04</code> 和 <code>Debian 9/10</code> 因为 OpenSSL 的原因，只能使用 0.9.6 及以上的版本，更低版本无法直接安装</li></ol><ul><li>  安装 rTorrent，ruTorrent，nginx，ffmpeg，rar，h5ai 目录列表程序</li><li>  0.9.2-0.9.4 支持 IPv6 用的是打好补丁的版本，属于修改版客户端</li><li>  0.9.6 支持 IPv6 用的是 2018.01.30 的 feature-bind 分支，原生支持 IPv6</li><li>  设置了 Deluge、qBittorrent、Transmission、Flexget WebUI 的反代</li><li>  ruTorrent 版本为来自 master 分支的 3.9 版，此外还安装了如下的第三方插件和主题</li><li>  <code>club-QuickBox</code> <code>MaterialDesign</code> 第三方主题</li><li>  <code>AutoDL-Irssi</code> （原版 rtinst 自带）</li><li>  <code>Filemanager</code> 插件可以在 ruTorrent 上管理文件、右键创建压缩包、生成 mediainfo 和截图</li><li>  <code>ruTorrent Mobile</code> 插件可以优化 ruTorrent 在手机上的显示效果（不需要的话可以手动禁用此插件）</li><li>  <code>Fileshare</code> 插件创建有时限、可自定义密码的文件分享链接</li><li>  <code>GeoIP2</code> 插件，代替原先的 GeoIP 插件，精确度更好，支持 IPv6 地址识别</li></ul><ol><li> <strong>Flood</strong> <strong><code>--flood</code></strong> <strong>是否安装的问题已被移除，只能使用命令行参数安装</strong> Flood 是 rTorrent 的另一个 WebUI，界面更为美观，加载速度快，不过功能上不如 ruTorrent 第一次登陆时需要填写信息，端口号是 5000，挂载点是 127.0.0.1</li><li> <strong><em>Transmission</em></strong> <strong><code>--tr-deb</code><strong>、</strong><code>--tr 2.83</code><strong>、</strong><code>--tr no</code></strong> Transmission 默认选择从预先编译好的 deb 安装最新版 2.94（解决了文件打开数问题） 此外还会安装 <a href="https://github.com/ronggang/transmission-web-control">加强版的 WebUI</a>，更方便易用 <strong><em>隐藏和从 repo/ppa 安装的选项均已移除</em></strong></li><li> <strong><em>FlexGet</em></strong> <strong><code>--flexget</code><strong>、</strong><code>--no-flexget</code></strong> Flexget 是一个非常强大的自动化工具，功能非常多。大多数国内盒子用户主要用它来 RSS（它能做的事情远不止 RSS） 目前脚本里安装 Flexget 时版本会指定为 3.0.31，同时如果系统自带的 Python3 版本低于 3.6 还会升级 Python3 我启用了 daemon 模式和 WebUI，还预设了一些模板，仅供参考 注意：脚本里没有启用 schedules 或 crontab，需要的话自己设置</li><li> <strong><em>FileBrowser Enhanced</em></strong> <strong><code>--filebrowser</code><strong>、</strong><code>--no-filebrowser</code></strong> File Browser 提供了网页文件管理器的功能, 可以用于上传、删除、预览、重命名以及编辑盒子上的文件 脚本安装的是 <a href="https://hub.docker.com/r/80x86/filebrowser">荒野无灯的 Docker 版 FileBrowser Enhanced</a>，<a href="https://raw.githubusercontent.com/ttys3/filebrowser-enhanced/master/FBvsFBE.zh.png">功能更加强大</a> 这个增强版还可以在网页上右键获取文件的 mediainfo、制作种子、截图、解压等等，对 PT 来说也非常实用 还有一个在 <a href="http://ip:7576/">http://ip:7576</a> 网址、使用 root 运行、挂载 / 目录的 filebrowser，需要输入 <code>systemctl enable filebrowser-root --now</code> 手动启用</li><li> <strong><em>系统设置</em></strong> <strong><code>--tweaks</code><strong>、</strong><code>--no-tweaks</code></strong> 默认启用，具体操作如下：</li></ol><ul><li>  安装 <a href="https://github.com/vergoh/vnstat">vnstat</a> 2.6 以及 <a href="https://github.com/alexandermarston/vnstat-dashboard/">vnstat dashboard</a>，可以在网页上查看流量统计</li><li>  （注：vnstat dashboard 使用的前提是用脚本安装了 rTorrent，且在 Debian 8 下不可用）</li><li>  修改时区为 UTC+8</li><li>  语言编码设置为 en.UTF-8</li><li>  设置 <code>alias</code> 简化命令（私货夹带）</li><li>  修改 screenrc 设置</li><li>  将最大可用空间的硬盘分区的 Linux 保留空间调整到 1%（原先是 5%）</li></ul><ol><li> <strong><em>Remote Desktop</em></strong> <strong><code>--vnc</code><strong>、</strong><code>--x2go</code></strong> <strong>是否安装的问题已被移除，只能使用命令行参数安装</strong> 远程桌面可以完成一些 CLI 下做不了或者 CLI 实现起来很麻烦的操作，比如 BD-Remux，wine uTorrent 推荐使用 noVNC，网页上即可操作</li><li> <strong><em>wine / mono</em></strong> <strong><code>--wine</code>、<code>--mono</code></strong> <strong>是否安装的问题已被移除，只能使用命令行参数安装</strong> <code>wine</code> 可以实现在 Linux 上运行 Windows 程序，比如 DVDFab、uTorrent <code>mono</code> 是一个跨平台的 .NET 运行环境，BDinfoCLI、Jackett、Sonarr 等软件的运行都需要 mono</li><li> <strong><em>rclone</em></strong> <strong><code>--rclone</code></strong> <strong>是否安装的问题已被移除，只能使用命令行参数安装</strong> rclone 是一个强大的网盘同步工具。默认不安装。安装好后需要自己输入 rclone config 进行配置 此外这个选项还会安装 <a href="https://github.com/donwa/gclone">gclone</a></li><li> <strong><em>Some additional tools</em></strong> <strong><code>--tools</code></strong> <strong>是否安装的问题已被移除，只能使用命令行参数安装</strong> 安装下列软件：</li></ol><ul><li>  <code>mediainfo</code> 用最新版是因为某些站发种填信息时有这方面的要求，比如 HDBits</li><li>  <code>mkvtoolnix</code> 主要是用于做 BD-Remux</li><li>  <code>eac3to</code> 需要 wine 来运行，做 remux 时用得上</li><li>  <code>ffmpeg</code> 对于大多数盒子用户来说主要是拿来做视频截图用，安装的是静态编译版本</li></ul><ol><li> <strong><em>BBR</em></strong> <strong><code>--bbr</code><strong>、</strong><code>--no-bbr</code></strong> <strong>是否安装的问题已被移除，只能使用命令行参数安装</strong> （如果你想安装魔改版 BBR 或 锐速，请移步到 <a href="https://github.com/Aniverse/TrCtrlProToc0l">TrCtrlProToc0l</a> 脚本） 会检测你当前的内核版本，大于 4.9 是默认不安装新内核与 BBR，高于 4.9 是默认直接启用BBR（不安装新内核） 注意：更换内核有风险，可能会导致无法正常启动系统</li><li> <strong><em>libtorrent-rasterbar</em></strong> <strong><code>--lt RC_1_1</code><strong>、</strong><code>--lt RC_1_0</code><strong>、</strong><code>--lt system</code><strong>、</strong><code>--lt 1.1.12</code></strong> <strong>选择哪个版本的问题已被移除，默认使用 RC_1_1，只能使用命令行参数自行指定</strong> libtorrent-rasterbar 是 Deluge 和 qBittorrent 所使用的后端，除非 qBittorrent 使用静态编译版本，不然只要选择安装 Deluge 和 qBittorrent 中的任意一样，libtorrent 都是必装的。鉴于 lt 与 de/qb 兼容的情况比较复杂，现在脚本里直接统一使用 libtorrent RC_1_1（版本号 1.1.14）。如果你需要自定义版本号，请使用 <code>--lt &lt;version&gt;</code> 参数（自定义版本时，不保证脚本能正常工作）</li></ol><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>若安装Flexget失败可能是Python版本造成的，使用以下命令升级itertools后再重新安装Flexget即可</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pip</span> install more-itertools==<span class="hljs-number">5</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> sentry<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>The certificate of ‘raw.githubusercontent.com’ is not trusted的解决办法</title>
    <link href="/2020/12/11/55/"/>
    <url>/2020/12/11/55/</url>
    
    <content type="html"><![CDATA[<p>今天甲骨文选择Ubuntu16.04后，用萌咖的dd脚本dd成Debian9后，安装探针使用</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/CokeMine/</span>ServerStatus-Hotaru<span class="hljs-regexp">/master/</span>status.sh<br></code></pre></td></tr></table></figure><p>出现</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">ERROR: </span>The certificate of ‘raw.githubusercontent.com’ is not trusted. <br><span class="hljs-keyword">ERROR: </span>The certificate of ‘raw.githubusercontent.com’ hasn&#x27;t got a known issuer.<br></code></pre></td></tr></table></figure><p>解决方法是</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> install ca-certificates<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> install ssl-cert<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>建站知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>(已无法下载)赛博朋克2077学生车 简体中文版 世纪互联</title>
    <link href="/2020/12/11/54/"/>
    <url>/2020/12/11/54/</url>
    
    <content type="html"><![CDATA[<p><a href="https://pan.feiyubk.com/">https://pan.feiyubk.com/</a><br>推荐单线程下载</p>]]></content>
    
    
    <categories>
      
      <category>资源分享</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【开源】CF Worker KV 短链接/短网址程序</title>
    <link href="/2020/12/10/cf-worker-kv-short-url/"/>
    <url>/2020/12/10/cf-worker-kv-short-url/</url>
    
    <content type="html"><![CDATA[<p>很多时候网址过长不利于分享，将长网址转换短网址/短链接，缩短内容长度，会使得分享更加方便。 借助免费的Cloudflare Worker和前不久新添加的kv免费额度可以搭建属于我们自己的长网址转换短网址程序。</p><h2 id="一-项目开源地址"><a href="#一-项目开源地址" class="headerlink" title="一.项目开源地址"></a>一.项目开源地址</h2><p><a href="https://github.com/xyTom/Url-Shorten-Worker">https://github.com/xyTom/Url-Shorten-Worker</a></p><span id="more"></span><p>注意：KV有免费额度限制，每天只能写1000次</p><h2 id="二-搭建教程"><a href="#二-搭建教程" class="headerlink" title="二.搭建教程"></a>二.搭建教程</h2><h3 id="1-首先去https-workers-cloudflare-com-注册一个账号。"><a href="#1-首先去https-workers-cloudflare-com-注册一个账号。" class="headerlink" title="1.首先去https://workers.cloudflare.com/ 注册一个账号。"></a>1.首先去<a href="https://workers.cloudflare.com/">https://workers.cloudflare.com/</a> 注册一个账号。</h3><h3 id="2-去Workers-KV中创建一个命名空间。"><a href="#2-去Workers-KV中创建一个命名空间。" class="headerlink" title="2.去Workers KV中创建一个命名空间。"></a>2.去Workers KV中创建一个命名空间。</h3><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20201205232805.png"></p><h3 id="3-去Worker的Settings选选项卡中绑定KV-Namespace，其中Variable-name填写LINKS-KV-namespace填写你刚刚创建的命名空间"><a href="#3-去Worker的Settings选选项卡中绑定KV-Namespace，其中Variable-name填写LINKS-KV-namespace填写你刚刚创建的命名空间" class="headerlink" title="3.去Worker的Settings选选项卡中绑定KV Namespace，其中Variable name填写LINKS, KV namespace填写你刚刚创建的命名空间"></a>3.去Worker的Settings选选项卡中绑定KV Namespace，其中Variable name填写LINKS, KV namespace填写你刚刚创建的命名空间</h3><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20201205232536.png"> <img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/20201205232704.png"></p><h3 id="4-复制本项目中的index-js的代码到Cloudlare-Worker，点击Save-and-Deploy。"><a href="#4-复制本项目中的index-js的代码到Cloudlare-Worker，点击Save-and-Deploy。" class="headerlink" title="4.复制本项目中的index.js的代码到Cloudlare Worker，点击Save and Deploy。"></a>4.复制本项目中的<code>index.js</code>的代码到Cloudlare Worker，点击Save and Deploy。</h3>]]></content>
    
    
    <categories>
      
      <category>服务搭建</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>3W多张COSPLAY图片，随机api</title>
    <link href="/2020/12/10/51/"/>
    <url>/2020/12/10/51/</url>
    
    <content type="html"><![CDATA[<p>源码：<a href="https://github.com/Suxiaoqinx/acgimgurl">https://github.com/Suxiaoqinx/acgimgurl</a> 接口：<a href="https://api.ixxcc.com/cosplay.php?return=img">https://api.ixxcc.com/cosplay.php?return=img</a> 太大了就不放压缩包了(怕把服务器搞挂），大佬们直接爬下来吧 链接：<a href="https://dl.ixxcc.com/">https://dl.ixxcc.com</a></p>]]></content>
    
    
    <categories>
      
      <category>资源分享</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>(萌咖) 一键DD脚本CentOS/Debian/Ubuntu</title>
    <link href="/2020/12/10/50/"/>
    <url>/2020/12/10/50/</url>
    
    <content type="html"><![CDATA[<h1 id="一-一键DD-Linux系统的用途"><a href="#一-一键DD-Linux系统的用途" class="headerlink" title="一.一键DD Linux系统的用途"></a>一.一键DD Linux系统的用途</h1><p>基本所有的VPS服务器商家，都会提供免费的Linux系统供安装，比如CentOS、Debian、Ubuntu等。那为什么还要使用一键DD脚本重装/更换系统呢？</p><p>商家提供的系统版本有限，可能没有自己需要的版本。<br>商家的系统安装有自己不想要的服务，比如国内的阿里云盾（安骑士）。<br>商家的系统无法安装特定软件，比如很挑内核的锐速。<br>以上几种情况，一键DD脚本就可以为服务器更换一个纯净的系统，帮你解决问题。</p><span id="more"></span><p>所需环境<br>以网络流传较广的Vicer一键DD为例，其所需环境为：</p><p>架构：KVM/XEN，不支持OpenVZ。</p><p>系统：Debian/Ubuntu/CentOS</p><h1 id="二-一键DD脚本使用教程"><a href="#二-一键DD脚本使用教程" class="headerlink" title="二.一键DD脚本使用教程"></a>二.一键DD脚本使用教程</h1><p>注意事项：</p><p>Vicer脚本目前不支持重装为CentOS 7系统，支持CentOS 6.9以下版本。<br>重装的系统源自官方发行版。<br>安装过程全自动进行，无需VNC操作，无需进入救援模式。<br>系统安装完成后的默认用户名为root，默认密码为:MoeClub.org<br>DD脚本示例：</p><p>由于脚本命令中需要写明目标系统版本，所以根据需求不同，最终的运行命令也各不相同。</p><p>下面提供几个使用范例，可以直接复制使用，也可以将命令中的系统版本替换为其它版本。</p><p>重装为CentOS 6.9：<br>以下命令中的 -c 后面为CentOS版本号，-v 后面为64位/32位，可根据需求进行替换。</p><h1 id="CentOS-6-9-64位："><a href="#CentOS-6-9-64位：" class="headerlink" title="CentOS 6.9 64位："></a>CentOS 6.9 64位：</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> &lt;(wget --no-check-certificate -qO- &#x27;https://moeclub.org/attachment/LinuxShell/InstallNET.sh&#x27;) -c <span class="hljs-number">6</span>.<span class="hljs-number">9</span> -v <span class="hljs-number">64</span> -a<br></code></pre></td></tr></table></figure><h1 id="CentOS-6-9-32位："><a href="#CentOS-6-9-32位：" class="headerlink" title="CentOS 6.9 32位："></a>CentOS 6.9 32位：</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> &lt;(wget --no-check-certificate -qO- &#x27;https://moeclub.org/attachment/LinuxShell/InstallNET.sh&#x27;) -c <span class="hljs-number">6</span>.<span class="hljs-number">9</span> -v <span class="hljs-number">32</span> -a<br></code></pre></td></tr></table></figure><p>重装为Debian：<br>以下命令中的 -d 后面为Debian版本号，-v 后面为64位/32位，可根据需求进行替换。</p><h1 id="Debian-8-64位："><a href="#Debian-8-64位：" class="headerlink" title="Debian 8 64位："></a>Debian 8 64位：</h1><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">bash &lt;(<span class="hljs-name">wget</span> --no-check-certificate -qO- &#x27;https<span class="hljs-symbol">://moeclub</span>.org/attachment/LinuxShell/InstallNET.sh&#x27;) -d <span class="hljs-number">8</span> -v <span class="hljs-number">64</span> -a<br></code></pre></td></tr></table></figure><h1 id="Debian-9-64位："><a href="#Debian-9-64位：" class="headerlink" title="Debian 9 64位："></a>Debian 9 64位：</h1><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">bash &lt;(<span class="hljs-name">wget</span> --no-check-certificate -qO- &#x27;https<span class="hljs-symbol">://moeclub</span>.org/attachment/LinuxShell/InstallNET.sh&#x27;) -d <span class="hljs-number">9</span> -v <span class="hljs-number">64</span> -a<br></code></pre></td></tr></table></figure><p>重装为Ubuntu：<br>以下命令中的 -u 后面为Ubuntu版本号，-v 后面为64位/32位，可根据需求进行替换。</p><h1 id="Ubuntu-12-04-64位："><a href="#Ubuntu-12-04-64位：" class="headerlink" title="Ubuntu 12.04 64位："></a>Ubuntu 12.04 64位：</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> &lt;(wget --no-check-certificate -qO- &#x27;https://moeclub.org/attachment/LinuxShell/InstallNET.sh&#x27;) -u <span class="hljs-number">12</span>.<span class="hljs-number">04</span> -v <span class="hljs-number">64</span> -a<br></code></pre></td></tr></table></figure><h1 id="Ubuntu-14-04-64位："><a href="#Ubuntu-14-04-64位：" class="headerlink" title="Ubuntu 14.04 64位："></a>Ubuntu 14.04 64位：</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> &lt;(wget --no-check-certificate -qO- &#x27;https://moeclub.org/attachment/LinuxShell/InstallNET.sh&#x27;) -u <span class="hljs-number">14</span>.<span class="hljs-number">04</span> -v <span class="hljs-number">64</span> -a<br></code></pre></td></tr></table></figure><h1 id="Ubuntu-16-04-64位："><a href="#Ubuntu-16-04-64位：" class="headerlink" title="Ubuntu 16.04 64位："></a>Ubuntu 16.04 64位：</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> &lt;(wget --no-check-certificate -qO- &#x27;https://moeclub.org/attachment/LinuxShell/InstallNET.sh&#x27;) -u <span class="hljs-number">16</span>.<span class="hljs-number">04</span> -v <span class="hljs-number">64</span> -a<br></code></pre></td></tr></table></figure><h1 id="Ubuntu-18-04-64位："><a href="#Ubuntu-18-04-64位：" class="headerlink" title="Ubuntu 18.04 64位："></a>Ubuntu 18.04 64位：</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> &lt;(wget --no-check-certificate -qO- &#x27;https://moeclub.org/attachment/LinuxShell/InstallNET.sh&#x27;) -u <span class="hljs-number">18</span>.<span class="hljs-number">04</span> -v <span class="hljs-number">64</span> -a<br></code></pre></td></tr></table></figure><h1 id="三-关于系统重装过程"><a href="#三-关于系统重装过程" class="headerlink" title="三.关于系统重装过程"></a>三.关于系统重装过程</h1><p>运行包含正确系统版本号的脚本后，新系统的安装会自动进行，无需人工干预。</p><p>可能的三种情况：</p><p>正常情况下10分钟左右就可以安装成功了，期间可以在VNC中观察安装过程：</p><p>如果安装CentOS 7版本，会出现下图提示，表示不支持：</p><p>如果输入了其它不支持或不存在的系统版本，则会出现下图提示，中止安装：</p><p>重装系统后更改root密码<br>耐心等待系统安装成功后，出于安全考虑，建议立即更改默认密码。</p><p>具体方法：</p><p>1.使用Putty以上文提供的默认密码登录，输入以下命令：passwd root</p><p>2.接下来会分两次要求输入新的密码，可以手动输入，也可以在其它位置复制一个密码，然后在Putty界面右键点击即可粘贴上去。</p><p>注意：输入新密码时并不会直接显示出来，光标也不会移动，这是正常的。</p><p>3.再次登录系统时，记得使用新的root密码。</p><p>默认密码：</p><p>MoeClub.org</p>]]></content>
    
    
    <categories>
      
      <category>脚本合集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ServerStatus-Hotaru探针安装时可能出现的问题及解决办法</title>
    <link href="/2020/12/07/49/"/>
    <url>/2020/12/07/49/</url>
    
    <content type="html"><![CDATA[<h1 id="一-Caddy解压失败或压缩文件错误"><a href="#一-Caddy解压失败或压缩文件错误" class="headerlink" title="一.Caddy解压失败或压缩文件错误"></a>一.Caddy解压失败或压缩文件错误</h1><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bash </span>status.<span class="hljs-keyword">sh </span>s<br></code></pre></td></tr></table></figure><p>在服务端运行以上代码时，若直接选择由脚本自动配置HTTP服务，最终会出现这样的错误：Caddy解压失败。<br>这是由于Caddy官方没法安装V1版本了所导致的，这时一个比较好的解决办法应该是在vps上安装宝塔面板，在宝塔面板内绑定好域名并在设置-网站目录里将网站目录改为usr/local/ServerStatus/web，当然你也可以手动安装Nginx。</p><span id="more"></span><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bash </span>status.<span class="hljs-keyword">sh </span>s<br></code></pre></td></tr></table></figure><p>此时再通过以上代码安装服务端便可成功启动。</p><h1 id="二-server-status启动失败"><a href="#二-server-status启动失败" class="headerlink" title="二.server status启动失败"></a>二.server status启动失败</h1><p>一般情况下，如果你前面的设置都没有出现问题，却在最后启动server status时失败，如果你的服务器是Ubuntu/Debian系统，这时需检查你是否启用root权限，若没有请进入root用户；如果你的服务器是CentOS系统，建议更换系统重新安装。</p><h1 id="三-ServerStatus的完整安装脚本"><a href="#三-ServerStatus的完整安装脚本" class="headerlink" title="三.ServerStatus的完整安装脚本"></a>三.ServerStatus的完整安装脚本</h1><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>若服务器在国外</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/CokeMine/</span>ServerStatus-Hotaru<span class="hljs-regexp">/master/</span>status.sh<br>bash status.sh s<br></code></pre></td></tr></table></figure><p>若服务器在国内</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -N --no-check-certificate http:<span class="hljs-regexp">//</span>southcat.net<span class="hljs-regexp">/bash/</span>status.sh &amp;&amp; chmod +x status.sh<br>bash status.sh c<br></code></pre></td></tr></table></figure><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>若服务器在国外</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/CokeMine/</span>ServerStatus-Hotaru<span class="hljs-regexp">/master/</span>status.sh<br>bash status.sh s<br></code></pre></td></tr></table></figure><p>若服务器在国内</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -N --no-check-certificate http:<span class="hljs-regexp">//</span>southcat.net<span class="hljs-regexp">/bash/</span>status.sh &amp;&amp; chmod +x status.sh<br>bash status.sh c<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>脚本合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DJJ</title>
    <link href="/2020/12/05/48/"/>
    <url>/2020/12/05/48/</url>
    
    <content type="html"><![CDATA[<p>下载<br><a href="http://sukebei.nyaa.si/">sukebei.nyaa.si</a></p><p>在线<br><a href="https://avbebe.com/">https://avbebe.com</a></p><p><a href="https://file.btu.pp.ua/?instagram">ins，weibo，pixiv图片</a></p>]]></content>
    
    
    <categories>
      
      <category>资源分享</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>(转载)宝塔面板搭建YOURLS(yourls)-私人短链接地址服务</title>
    <link href="/2020/12/03/46/"/>
    <url>/2020/12/03/46/</url>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>其实很早之前我就发现了<a href="https://github.com/YOURLS/YOURLS">YOURLS</a>，遗憾的是由于英文的干扰，迫使我很难有行动下去的动力。这阵子有点时间，遂就随手搭建了一下。 官方文档：<a href="https://yourls.org/"></a><a href="https://yourls.org/">https://yourls.org</a></p><h2 id="1-1什么是YOURLS？"><a href="#1-1什么是YOURLS？" class="headerlink" title="1.1什么是YOURLS？"></a>1.1什么是YOURLS？</h2><p><strong>YOURLS</strong> stands for <strong>Your Own URL Shortener</strong>. It is a small set of PHP scripts that will allow you to run your own URL shortening service (a la TinyURL or Bitly).</p><span id="more"></span><p>Running your own URL shortener is fun, geeky and useful: you own your data and don’t depend on third-party services. It’s also a great way to add branding to your short URLs, instead of using the same public URL shortener everyone uses. 大概意思就是说<strong>YOURLS</strong>，这个基于PHP开发的短链接服务，适用于私有，且不依赖第三方公共短链接生成。你只需要有一定的耐心和一个短域名，就可以感受到短链接生成的乐趣。</p><h2 id="1-2特点"><a href="#1-2特点" class="headerlink" title="1.2特点"></a>1.2特点</h2><ul><li>  免费而且开源</li><li>  使用具有两面性：私有的（仅自己使用）或者生成公共的（每个人都可以创建短链接，适用于Intranet）</li><li>  顺序排列(从1到n)或自定义URL关键字</li><li>  十分方便的类书签模式记录，可轻松缩短和共享链接</li><li>  出色的统计信息：历史点击报告，引荐来源跟踪，访问者地理位置</li><li>  整洁的Ajaxed界面</li><li>  出色的插件架构，可轻松实现新功能</li><li>  支持开发人员API</li><li>  全面的jsonp支持</li><li>  安装十分友好</li><li>  示例文件可创建您自己的公共界面等</li></ul><h1 id="2-安装-这里以Ubuntu20-04为例"><a href="#2-安装-这里以Ubuntu20-04为例" class="headerlink" title="2.安装(这里以Ubuntu20.04为例)"></a>2.安装(这里以Ubuntu20.04为例)</h1><p>环境说明：</p><ol><li> 至少<strong>PHP 5.6</strong> <strong>如果要使用api 还需要有curl拓展</strong>，推荐7.2-7.3</li><li> 至少<strong>MYSQL 5</strong>，推荐5.6</li></ol><h2 id="2-1宝塔面板安装"><a href="#2-1宝塔面板安装" class="headerlink" title="2.1宝塔面板安装"></a>2.1宝塔面板安装</h2><p>Ubuntu脚本安装:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -O install.sh http:<span class="hljs-regexp">//</span>download.bt.cn<span class="hljs-regexp">/install/i</span>nstall-ubuntu_6.<span class="hljs-number">0</span>.sh &amp;&amp; sudo bash install.sh<br></code></pre></td></tr></table></figure><p>然后登录宝塔面板，默认安装稍微改一下，按照上面的环境来！！！这里不多说。</p><h2 id="2-2新建站点"><a href="#2-2新建站点" class="headerlink" title="2.2新建站点"></a>2.2新建站点</h2><p>主要就是填写你的<strong>域名</strong>，再设置添加一个<strong>mysql数据库</strong> <img src="https://pages.jkfff.com/images/2020/12/02/yourls.png" alt="建立网站" title="建立网站"></p><h2 id="2-3伪静态"><a href="#2-3伪静态" class="headerlink" title="2.3伪静态"></a>2.3伪静态</h2><p>这一步重写路由，就是Rewrites（我这里是<strong>nginx</strong>）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">location / &#123;<br>    try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span><span class="hljs-regexp">/ /y</span>ourls-loader.php<span class="hljs-variable">$is_args</span><span class="hljs-variable">$args</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://pages.jkfff.com/images/2020/12/02/yourlsa1f2cff56f488aa5.png" alt="nginx" title="nginx"> <strong>倘若是 apache</strong> (1)配置里开启 mod_rewrite 模块 (2)创建 .htaccess 文件（这里注意分安装路径）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#.htaccess 文件内容，如果是根目录下  http://yoursite/ </span><br><span class="hljs-comment"># BEGIN YOURLS</span><br><span class="hljs-section">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteEngine</span></span> <span class="hljs-literal">On</span><br><span class="hljs-attribute">RewriteBase</span> /<br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">%&#123;REQUEST_FILENAME&#125;</span> !-f<br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">%&#123;REQUEST_FILENAME&#125;</span> !-d<br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteRule</span></span> ^.*$ /yourls-loader.php<span class="hljs-meta"> [L]</span><br><span class="hljs-section">&lt;/IfModule&gt;</span><br><span class="hljs-comment"># END YOURLS</span><br><br><span class="hljs-comment">#如果是二级目录下 http://yoursite/somedir/</span><br><span class="hljs-comment"># BEGIN YOURLS</span><br><span class="hljs-section">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteEngine</span></span> <span class="hljs-literal">On</span><br><span class="hljs-attribute">RewriteBase</span> /somedir/<br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">%&#123;REQUEST_FILENAME&#125;</span> !-f<br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">%&#123;REQUEST_FILENAME&#125;</span> !-d<br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteRule</span></span> ^.*$ /somedir/yourls-loader.php<span class="hljs-meta"> [L]</span><br><span class="hljs-section">&lt;/IfModule&gt;</span><br><span class="hljs-comment"># END YOURLS</span><br></code></pre></td></tr></table></figure><h2 id="2-4安装YOURLS"><a href="#2-4安装YOURLS" class="headerlink" title="2.4安装YOURLS"></a>2.4安装YOURLS</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd 你创建的根目录地址 如：<span class="hljs-regexp">/www/</span>wwwroot/XXX<br>wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/YOURLS/</span>YOURLS<span class="hljs-regexp">/archive/</span><span class="hljs-number">1.7</span>.<span class="hljs-number">9</span><br>tar -xvf YOURLS-<span class="hljs-number">1.7</span>.<span class="hljs-number">9</span>.tar.gz<br></code></pre></td></tr></table></figure><p>或者直接下载上传，解压。 下载地址：<a href="https://github.com/YOURLS/YOURLS/releases"></a><a href="https://github.com/YOURLS/YOURLS/releases">https://github.com/YOURLS/YOURLS/releases</a></p><h3 id="2-4-1将user目录下的config-sample-php-重命名-为-config-php"><a href="#2-4-1将user目录下的config-sample-php-重命名-为-config-php" class="headerlink" title="2.4.1将user目录下的config-sample.php 重命名 为 config.php"></a>2.4.1将user目录下的config-sample.php 重命名 为 config.php</h3><h3 id="2-4-2修改config-php里面的配置参数"><a href="#2-4-2修改config-php里面的配置参数" class="headerlink" title="2.4.2修改config.php里面的配置参数"></a>2.4.2修改config.php里面的配置参数</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">define( <span class="hljs-string">&#x27;YOURLS_DB_USER&#x27;</span>, <span class="hljs-string">&#x27;数据库用户名&#x27;</span> );<br>define( <span class="hljs-string">&#x27;YOURLS_DB_PASS&#x27;</span>, <span class="hljs-string">&#x27;数据库密码&#x27;</span> );<br>define( <span class="hljs-string">&#x27;YOURLS_DB_NAME&#x27;</span>, <span class="hljs-string">&#x27;数据库名字&#x27;</span> );<br>define( <span class="hljs-string">&#x27;YOURLS_SITE&#x27;</span>, <span class="hljs-string">&#x27;http://&#x27;</span> ); <span class="hljs-regexp">//</span>你自己服务器的域名 用最短的，短地址也是基于这个生成。<br>define( <span class="hljs-string">&#x27;YOURLS_COOKIEKEY&#x27;</span>, <span class="hljs-string">&#x27;A2C7&amp;H~r80pTps&#123;nIfI8VFpTxnfF3c)j@J#&#123;nDUh&#x27;</span> );<span class="hljs-regexp">//</span>加密cookie 去 http:<span class="hljs-regexp">//y</span>ourls.org/cookie 获取<br><span class="hljs-variable">$yourls_user_passwords</span> = array(<br>    <span class="hljs-string">&#x27;admin&#x27;</span> =&gt; <span class="hljs-string">&#x27;123456&#x27;</span> <span class="hljs-regexp">/* Password encrypted by YOURLS */</span> ,  <span class="hljs-regexp">//</span>用户名=&gt;密码  可填多个  登录成功后这里的明文密码会被加密，这里默认是没有的，我们为了安全加上一个，如我这里是用户名是admin，密码是<span class="hljs-number">123456</span><br>    );<br></code></pre></td></tr></table></figure><h1 id="3-访问"><a href="#3-访问" class="headerlink" title="3.访问"></a>3.访问</h1><p>浏览器 输入 <a href="http://域名/admin">http://域名/admin</a>，然后选择安装即可安装成功。 <img src="https://pages.jkfff.com/images/2020/12/02/Snipaste_2020-04-15_10-04-18.png" alt="安装成功界面" title="安装成功界面"> <img src="https://pages.jkfff.com/images/2020/12/02/yourls10edb7fccf6078c3.png" alt="登录界面" title="登录界面"> <img src="https://pages.jkfff.com/images/2020/12/02/yourls984924f9967af13c.png" alt="后台" title="后台"></p><h1 id="4-最后"><a href="#4-最后" class="headerlink" title="4.最后"></a>4.最后</h1><p>你可能遇到一些问题: 4.1如果安装报错，或者不跳转，那有可能是你的php 或者 mysql 版本过低 4.2.短链接后面从1开始，很不爽，可以推荐用时间戳来生成 只需要修改 includes/functions.php 272行左右 将 $id = yourls_get_next_decimal(); 改为 $id = time(); <img src="https://pages.jkfff.com/images/2020/12/02/Snipaste_2020-04-15_10-21-50.png" alt="https://pages.jkfff.com/images/2020/12/02/Snipaste_2020-04-15_10-21-50.png" title="https://pages.jkfff.com/images/2020/12/02/Snipaste_2020-04-15_10-21-50.png"></p><h2 id="4-3-一些YOURLS的拓展"><a href="#4-3-一些YOURLS的拓展" class="headerlink" title="4.3.一些YOURLS的拓展"></a>4.3.一些YOURLS的拓展</h2><p><a href="https://github.com/YOURLS/awesome-yourls#plugins"></a><a href="https://github.com/YOURLS/awesome-yourls#plugins">https://github.com/YOURLS/awesome-yourls#plugins</a> 多的吓人！！！从0-9到A-Z排列. 4.4.api接口生成 可以参考 <a href="https://yourls.org/#API"></a><a href="https://yourls.org/#API">https://yourls.org/#API</a> 请求地址：<a href="http://域名//yourls-api.php">http://域名//yourls-api.php</a> 参数：username(用户名)、password（密码）、format（格式 json）、url（长地址）、action（功能，shorturl） 4.5.查看统计某个链接的点击情况 可以在生成的每个短链接后面加上一个 + 如：<a href="http://你的域名/j7fk2+">http://你的域名/j7fk2+</a> 进行访问 本文转自<a href="https://www.gitiu.com/article/bt-yourls/"></a><a href="https://www.gitiu.com/article/bt-yourls/">https://www.gitiu.com/article/bt-yourls/</a></p>]]></content>
    
    
    <categories>
      
      <category>服务搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle甲骨文dd系统教程</title>
    <link href="/2020/12/02/45/"/>
    <url>/2020/12/02/45/</url>
    
    <content type="html"><![CDATA[<h1 id="前提：初始化版本是Canonical-Ubuntu-16-04"><a href="#前提：初始化版本是Canonical-Ubuntu-16-04" class="headerlink" title="前提：初始化版本是Canonical Ubuntu 16.04"></a>前提：初始化版本是Canonical Ubuntu 16.04</h1><span id="more"></span><h2 id="把下面脚本扔进CLOUD-INIT即可，除了系统，其他不更改"><a href="#把下面脚本扔进CLOUD-INIT即可，除了系统，其他不更改" class="headerlink" title="把下面脚本扔进CLOUD-INIT即可，除了系统，其他不更改"></a>把下面脚本扔进CLOUD-INIT即可，除了系统，其他不更改</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> root:Abc123456 sudo chpasswd root<br>sudo sed -i <span class="hljs-string">&#x27;s/^#\?PermitRootLogin.*/PermitRootLogin yes/g&#x27;</span> /etc/ssh/sshd_config;<br>sudo sed -i <span class="hljs-string">&#x27;s/^#\?PasswordAuthentication.*/PasswordAuthentication yes/g&#x27;</span> /etc/ssh/sshd_config;<br>sudo service sshd restart<br></code></pre></td></tr></table></figure><h2 id="dd时间大概15分钟左右-直接用root账号登录-不用密钥。初始账号root-密码MoeClub-org"><a href="#dd时间大概15分钟左右-直接用root账号登录-不用密钥。初始账号root-密码MoeClub-org" class="headerlink" title="dd时间大概15分钟左右 直接用root账号登录 不用密钥。初始账号root 密码MoeClub.org"></a>dd时间大概15分钟左右 直接用root账号登录 不用密钥。初始账号root 密码MoeClub.org</h2><h3 id="centOS-6-9-64bit"><a href="#centOS-6-9-64bit" class="headerlink" title="centOS 6.9 64bit"></a>centOS 6.9 64bit</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> &lt;(wget --no-check-certificate -qO- &#x27;https://moeclub.org/attachment/LinuxShell/InstallNET.sh&#x27;) -c <span class="hljs-number">6</span>.<span class="hljs-number">9</span> -v <span class="hljs-number">64</span> -a<br></code></pre></td></tr></table></figure><h3 id="debian-10-64bit（推荐）"><a href="#debian-10-64bit（推荐）" class="headerlink" title="debian 10 64bit（推荐）"></a>debian 10 64bit（推荐）</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">bash &lt;(<span class="hljs-name">wget</span> --no-check-certificate -qO- &#x27;https<span class="hljs-symbol">://moeclub</span>.org/attachment/LinuxShell/InstallNET.sh&#x27;) -d <span class="hljs-number">10</span> -v <span class="hljs-number">64</span> -a<br></code></pre></td></tr></table></figure><h3 id="Ubuntu-16-04-64bit"><a href="#Ubuntu-16-04-64bit" class="headerlink" title="Ubuntu 16.04 64bit"></a>Ubuntu 16.04 64bit</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> &lt;(wget --no-check-certificate -qO- &#x27;https://moeclub.org/attachment/LinuxShell/InstallNET.sh&#x27;) -u <span class="hljs-number">16</span>.<span class="hljs-number">04</span> -v <span class="hljs-number">64</span> -a<br></code></pre></td></tr></table></figure><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">wget --no-check-certificate -qO InstallNET<span class="hljs-selector-class">.sh</span> <span class="hljs-string">&#x27;https://tutu.bid/bash/InstallNET.sh&#x27;</span> &amp;&amp; bash InstallNET<span class="hljs-selector-class">.sh</span> -<span class="hljs-selector-tag">dd</span> <span class="hljs-string">&#x27;http://tutu.bid/os/dd/Oracle-Win7-X64%5BAdministrator-www.nat.ee%5D.gz&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>默认用户名：administrator 密码：<a href="http://www.nat.ee/">www.nat.ee</a></strong></p><h2 id="看不了全球最大教育网站，更改DNS即可"><a href="#看不了全球最大教育网站，更改DNS即可" class="headerlink" title="看不了全球最大教育网站，更改DNS即可"></a>看不了全球最大教育网站，更改DNS即可</h2><h3 id="debian"><a href="#debian" class="headerlink" title="debian"></a>debian</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">apt-get install resolvconf<br>vim <span class="hljs-regexp">/etc/</span>resolvconf<span class="hljs-regexp">/resolv.conf.d/</span>head<br></code></pre></td></tr></table></figure><p>再加入</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nameserver</span> <span class="hljs-number">1.1.1.1</span><br>nameserver <span class="hljs-number">8.8.8.8</span><br></code></pre></td></tr></table></figure><p>最后 reboot即可</p>]]></content>
    
    
    <categories>
      
      <category>脚本合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用VPS测试脚本整理</title>
    <link href="/2020/12/02/44/"/>
    <url>/2020/12/02/44/</url>
    
    <content type="html"><![CDATA[<h1 id="非开心版测速脚本-较准确"><a href="#非开心版测速脚本-较准确" class="headerlink" title="非开心版测速脚本(较准确)"></a>非开心版测速脚本(较准确)</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget --no-check-certificate https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/zzycwmx/</span>CDN<span class="hljs-regexp">/master/</span>superbench2.sh &amp;&amp; bash superbench2.sh<br></code></pre></td></tr></table></figure><h1 id="检测VPS的CPU、内存、负载、IO读写、机房带宽等"><a href="#检测VPS的CPU、内存、负载、IO读写、机房带宽等" class="headerlink" title="检测VPS的CPU、内存、负载、IO读写、机房带宽等"></a>检测VPS的CPU、内存、负载、IO读写、机房带宽等</h1><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">wget -qO- <span class="hljs-keyword">bench.sh </span> <span class="hljs-keyword">bash</span><br></code></pre></td></tr></table></figure><h1 id="三网测速脚本"><a href="#三网测速脚本" class="headerlink" title="三网测速脚本"></a>三网测速脚本</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">bash &lt;(curl -Lso- https:<span class="hljs-regexp">//gi</span>t.io/superspeed)<br></code></pre></td></tr></table></figure><h1 id="路由测试脚本"><a href="#路由测试脚本" class="headerlink" title="路由测试脚本"></a>路由测试脚本</h1><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">bash</span> &lt;(curl -<span class="hljs-built_in">sL</span> mcnb.top/besttcp.sh)<br></code></pre></td></tr></table></figure><h1 id="全面测试"><a href="#全面测试" class="headerlink" title="全面测试"></a>全面测试</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -qO- http:<span class="hljs-regexp">//i</span>lemonra.<span class="hljs-keyword">in</span>/LemonBenchIntl  bash -s full<br></code></pre></td></tr></table></figure><h1 id="独立服务器I-O等性能测试脚本"><a href="#独立服务器I-O等性能测试脚本" class="headerlink" title="独立服务器I/O等性能测试脚本"></a>独立服务器I/O等性能测试脚本</h1><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">bash &lt;<span class="hljs-comment">(wget -qO- git.io/ceshi)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>脚本合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VPS测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用IPV6访问Google避免Google人机验证</title>
    <link href="/2020/11/30/43/"/>
    <url>/2020/11/30/43/</url>
    
    <content type="html"><![CDATA[<h2 id="一-首先修改-etc-sysctl-conf-，加入下面三行内容"><a href="#一-首先修改-etc-sysctl-conf-，加入下面三行内容" class="headerlink" title="一.首先修改 /etc/sysctl.conf ，加入下面三行内容"></a>一.首先修改 /etc/sysctl.conf ，加入下面三行内容</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">net<span class="hljs-selector-class">.ipv6</span><span class="hljs-selector-class">.conf</span><span class="hljs-selector-class">.all</span><span class="hljs-selector-class">.disable_ipv6</span> = <span class="hljs-number">0</span><br>net<span class="hljs-selector-class">.ipv6</span><span class="hljs-selector-class">.conf</span><span class="hljs-selector-class">.default</span><span class="hljs-selector-class">.disable_ipv6</span> = <span class="hljs-number">0</span><br>net<span class="hljs-selector-class">.ipv6</span><span class="hljs-selector-class">.conf</span><span class="hljs-selector-class">.lo</span><span class="hljs-selector-class">.disable_ipv6</span> = <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><span id="more"></span><h2 id="二-保存使设置生效，启用IPv6"><a href="#二-保存使设置生效，启用IPv6" class="headerlink" title="二.保存使设置生效，启用IPv6"></a>二.保存使设置生效，启用IPv6</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">sysctl -<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure><h3 id="三-注册账号"><a href="#三-注册账号" class="headerlink" title="三.注册账号"></a>三.注册账号</h3><p>到 <a href="https://www.tunnelbroker.net/">https://www.tunnelbroker.net/</a> 注册一个账户，然后登陆，点击左侧的 Create Regular Tunnel 。IPv4 Endpoint (Your side)填VPS的公网 IP 地址，Available Tunnel Servers 选一个隧道接入服务器，尽量选择距离自己vps最近的接入点。比如阿里云香港对应选择香港，新加坡就选新加坡，会有助于降低延迟</p><h2 id="四-编辑文件"><a href="#四-编辑文件" class="headerlink" title="四.编辑文件"></a>四.编辑文件</h2><p>编辑 /etc/network/interfaces，把获取到的信息粘贴进去，要注意的是local的地方要改成VPS的内网ip。</p><h2 id="五-重启网络即可生效"><a href="#五-重启网络即可生效" class="headerlink" title="五.重启网络即可生效"></a>五.重启网络即可生效</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d/networking restart<br></code></pre></td></tr></table></figure><h2 id="六-测试一下"><a href="#六-测试一下" class="headerlink" title="六.测试一下"></a>六.测试一下</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ping6</span> ipv<span class="hljs-number">6</span>.google.com<br></code></pre></td></tr></table></figure><h2 id="七-编辑-etc-hosts（非必要）"><a href="#七-编辑-etc-hosts（非必要）" class="headerlink" title="七.编辑/etc/hosts（非必要）"></a>七.编辑/etc/hosts（非必要）</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2607</span>:f<span class="hljs-number">8</span>b<span class="hljs-number">0</span>:<span class="hljs-number">4005</span>:<span class="hljs-number">801</span>::<span class="hljs-number">200</span>e  google.com<br><span class="hljs-attribute">2607</span>:f<span class="hljs-number">8</span>b<span class="hljs-number">0</span>:<span class="hljs-number">4005</span>:<span class="hljs-number">801</span>::<span class="hljs-number">200</span>e  www.google.com<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用V2RAY搭建脚本</title>
    <link href="/2020/11/29/42/"/>
    <url>/2020/11/29/42/</url>
    
    <content type="html"><![CDATA[<h1 id="一-简单，无需其他要求"><a href="#一-简单，无需其他要求" class="headerlink" title="一.简单，无需其他要求"></a>一.简单，无需其他要求</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">bash &lt;(curl -s -L https:<span class="hljs-regexp">//gi</span>t.io/v2ray.sh)<br></code></pre></td></tr></table></figure><span id="more"></span><h1 id="二-复杂，添加适当伪装（需自备域名）"><a href="#二-复杂，添加适当伪装（需自备域名）" class="headerlink" title="二.复杂，添加适当伪装（需自备域名）"></a>二.复杂，添加适当伪装（需自备域名）</h1><h2 id="个人常用"><a href="#个人常用" class="headerlink" title="个人常用"></a>个人常用</h2><p>1.</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">curl</span> -O https://raw.githubusercontent.com/atrandys/v<span class="hljs-number">2</span>ray-ws-tls/master/v<span class="hljs-number">2</span>ray_ws_tls<span class="hljs-number">1</span>.<span class="hljs-number">3</span>.sh &amp;&amp; chmod +x v<span class="hljs-number">2</span>ray_ws_tls<span class="hljs-number">1</span>.<span class="hljs-number">3</span>.sh<br></code></pre></td></tr></table></figure><p>2.打开/root文件夹，修改v2ray_ws_tls1.3.sh配置文件，将wget <a href="https://github.com/atrandys/v2ray-ws-tls/raw/master/web.zip">https://github.com/atrandys/v2ray-ws-tls/raw/master/web.zip</a> &gt;/dev/null 2&gt;&amp;1替换为wget <a href="https://github.com/454414308/v2ray-ws-tls/raw/master/web.zip">https://github.com/454414308/v2ray-ws-tls/raw/master/web.zip</a> &gt;/dev/null 2&gt;&amp;1</p><p>3.</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./v2ray_ws_tls1.3.sh</span><br></code></pre></td></tr></table></figure><p>并选择数字1，安装V2RAY</p><h2 id="Wulabing一键脚本"><a href="#Wulabing一键脚本" class="headerlink" title="Wulabing一键脚本"></a>Wulabing一键脚本</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">bash &lt;(curl -L -s https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/wulabing/</span>V2Ray_ws-tls_bash_onekey<span class="hljs-regexp">/master/i</span>nstall.sh)  tee v2ray_ins.log<br></code></pre></td></tr></table></figure><h2 id="V2-UI面板-最近常用，支持多种协议）"><a href="#V2-UI面板-最近常用，支持多种协议）" class="headerlink" title="V2-UI面板(最近常用，支持多种协议）"></a>V2-UI面板(最近常用，支持多种协议）</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">bash &lt;(curl -Ls https:<span class="hljs-regexp">//</span>blog.sprov.xyz/v2-ui.sh)<br></code></pre></td></tr></table></figure><p>安装完成后，打开<a href="http://你的ip/">http://你的ip</a>:65432,输入用户名和密码，初始均为admin，进去后自行添加账号，并及时修改用户名和密码。</p>]]></content>
    
    
    <categories>
      
      <category>脚本合集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>搭建VPS网页端测速</title>
    <link href="/2020/11/29/41/"/>
    <url>/2020/11/29/41/</url>
    
    <content type="html"><![CDATA[<h1 id="使用docker安装"><a href="#使用docker安装" class="headerlink" title="使用docker安装"></a>使用docker安装</h1><span id="more"></span><h2 id="先安装docker，若已安装可跳过"><a href="#先安装docker，若已安装可跳过" class="headerlink" title="先安装docker，若已安装可跳过"></a>先安装docker，若已安装可跳过</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">curl -sSL http<span class="hljs-variable">s:</span>//<span class="hljs-built_in">get</span>.docker.<span class="hljs-keyword">com</span>/  <span class="hljs-keyword">sh</span><br>systemctl start docker<br>systemctl enable docker<br></code></pre></td></tr></table></figure><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull badapple<span class="hljs-number">9</span>/speedtest-x<br></code></pre></td></tr></table></figure><h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -d -p <span class="hljs-number">9001</span>:<span class="hljs-number">80</span> -it badapple<span class="hljs-number">9</span>/speedtest-x<br></code></pre></td></tr></table></figure><h2 id="打开网页"><a href="#打开网页" class="headerlink" title="打开网页"></a>打开网页</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">你的<span class="hljs-built_in">IP</span>：<span class="hljs-number">9001</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>脚本合集</category>
      
      <category>服务搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VPS测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CDN内容分发网络以及一些知名网络服务提供商</title>
    <link href="/2020/11/26/40/"/>
    <url>/2020/11/26/40/</url>
    
    <content type="html"><![CDATA[<h1 id="CDN简介"><a href="#CDN简介" class="headerlink" title="CDN简介"></a>CDN简介</h1><p>内容分发网络（英语：Content Delivery Network或Content Distribution Network，缩写：CDN）是指一种透过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、视频、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。内容分发网络的总承载量可以比单一骨干最大的带宽还要大。这使得内容分发网络可以承载的用户数量比起传统单一服务器多。也就是说，若把有100Gbps处理能力的服务器放在只有10Gbps带宽的资料中心，则亦只能发挥出10Gbps的承载量。但如果放到十个有10Gbps的地点，整个系统的承载量就可以到10*10Gbps。同时，将服务器放到不同地点，可以减少互连的流量，进而降低带宽成本。</p><p>简而言之，CDN就是一种网络加速服务</p><span id="more"></span><h1 id="知名网络服务提供商"><a href="#知名网络服务提供商" class="headerlink" title="知名网络服务提供商"></a>知名网络服务提供商</h1><h3 id="Amazon-Web-Services"><a href="#Amazon-Web-Services" class="headerlink" title="Amazon Web Services"></a>Amazon Web Services</h3><p>亚马逊云市场份额占据全球首位，与其他云服务商相比呈碾压性地位。其中亚马逊所提供的网络加速服务有Amazon CloudFront,Amazon CloudFront是由亚马逊网络服务系统提供基础服务的一个内容分发网络（CDN）。其在欧洲、亚洲、北美、澳洲、南美、美国多个主要大城市多地拥有自己的数据中心，共107个网络边际服务点提供服务, CloudFront 能提高可缓存内容（如图像和视频）和动态内容（如 API 加速和动态站点交付）的性能；除Amazon CloudFront之外亚马逊还提供AWS Global Accelerator，简称AGA，AWS Global Accelerator 是一种服务，可以提高本地或全球用户获得的应用程序的可用性和性能。它提供静态 IP 地址，充当在单个或多个 AWS 区域中的应用程序终端节点（例如， Application Load Balancers、网络负载均衡器或 Amazon EC2 实例）的固定入口点。AWS Global Accelerator 使用 AWS 全球网络优化用户访问应用程序的路径，将流量性能提高多达 60%。AWS Global Accelerator 持续地监控应用程序终端节点的运行状况，并在 30 秒内将流量重定向到运行正常的终端节点。</p><h3 id="Cloudflare"><a href="#Cloudflare" class="headerlink" title="Cloudflare"></a>Cloudflare</h3><p>Cloudflare是一间总部位于旧金山的美国跨国IT企业,以向客户提供基于反向代理的内容分发网络（Content Delivery Network, CDN）及分布式域名解析服务（Distributed Domain Name Server）为主要业务。利用Cloudflare全球Anycast网络，Cloudflare可以帮助受保护站点抵御包拒绝服务攻击等网络攻击，确保该网站长期在线，同时提升网站的性能、加载速度以改善访客体验。</p><p>尤其是域名解析服务，我自己所有的域名都是在Cloudflare上完成的解析，因为我的服务器大多在国外，我还使用Cloudflare代理来加快网络访问速度，国内许多人在使用国外服务器建站时也有许多都使用了Cloudflare代理，除此之外，Cloudflare所提供的抗DDOS攻击也为许多网站提供了保护，许多人不必再去高价购买高防服务器。</p><p>可以说Cloudflare为我们提供了许多便利。</p><h4 id="Anycast"><a href="#Anycast" class="headerlink" title="Anycast"></a>Anycast</h4><p>Anycast中文叫任播，是一种网络定址和路由的策略，使得资料可以根据路由拓扑来决定送到“最近”或“最好”的目的地，任播是与单播（unicast）、广播（broadcast）和多播（multicast）不同的方式。在单播中，在网络地址和网络节点之间存在一一对应的关系。在广播和多播中，在网络地址和网络节点之间存在一对多的关系：每一个发送地址对应一群接收可以复制信息的节点。在任播中，在网络地址和网络节点之间存在一对多的关系：每一个地址对应一群接收节点，但在任何给定时间，只有其中之一可以接收到发送端来的信息。</p><p>在互联网中，通常使用边界网关协议（BGP）来实现任播。</p><p>在过去，任播适合无连线协议通常创建在用户数据报协议（UDP）多于连线导向协议（如会记录状态的传输控制协议（TCP））。然而，也有很多情况是传输控制协议（TCP）使用任播的，包含运载网络如Prolexic使用传输控制协议任播。</p><p>因此，任播通常用于提供高可靠性和负载平衡。</p><h3 id="Azure"><a href="#Azure" class="headerlink" title="Azure"></a>Azure</h3><p>Microsoft Azure 是微软的公用云端服务 (Public Cloud Service) 平台，是微软在线服务 (Microsoft Online Services) 的一部分，自 2008 年开始发展，2010年2月份正式推出，目前全球有54座资料中心以及44个CDN跳跃点 (POP)，并且于2015年时被 Gartner 列为云计算的领先者。Azure依靠微软在全球架设的54个资料中心，以及44个 CDN 跳跃点 ，以提供全球用户所需的资源，减少用户加载时间、节省带宽并加快响应速度。</p><h3 id="Google-Cloud-Platform"><a href="#Google-Cloud-Platform" class="headerlink" title="Google Cloud Platform"></a>Google Cloud Platform</h3><p>Google云端平台（英语：Google Cloud Platform，简称为GCP）是一系列由Google提供的云计算服务，在运行Google搜索和YouTube的服务器上提供基础设施服务、平台服务及无服务器计算环境。除了提供管理工具外，Google云端平台还提供了一系列模块化云服务，包括：云计算、数据存储、数据分析及机器学习等。</p><p>GCP注册后会提供300美金的额度来供用户试用，吸引了大量的用户来尝试它的服务，得益于Google在全球各地架设的服务器，我们可以用其来进行许多操作，是一项非常适合开发人员的服务。</p><h3 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h3><p>阿里云在全球云服务厂商中市场份额排名第三，仅次于AWS和Azure，因为博主只试用过阿里云的服务，在这里就不多做评价。</p><h3 id="腾讯云"><a href="#腾讯云" class="headerlink" title="腾讯云"></a>腾讯云</h3><p>腾讯云作为云服务商中的后起之秀，近年来提供的服务越来越受到用户的青睐，不少阿里云的用户转而去使用腾讯云，同时腾讯云常常针对用户会有许多优惠。2020年7月腾讯云轻量应用型服务器新增中国香港、新加坡地域，吸引了大量的用户，其中也包括我，我个人的博客也是放在腾讯云的服务器上。</p><p>腾讯云还比较知名的就是它的AIA，腾讯云 AIA 是一个覆盖全球的动态加速网络，可以大幅提升业务的公网访问体验。不同于其他应用层加速服务，AIA 能实现 IP 传输的质量优化和多入口就近接入，减少网络传输的抖动、丢包，最终提升云上应用的服务质量，扩大服务范围，精简后端部署。购买 Anycast 弹性公网 IP （EIP）后，即可通过该 IP 使用 AIA 服务，该 EIP 会同时在多个地域发布，流量从最优入口进入，然后通过腾讯云的内网到达IP绑定的资源，实现跨地域加速。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以我个人经验来看，如果想入门的话可以先从腾讯云、阿里云的学生机开始使用，学生机普遍价格便宜，适合新手折腾。同时GCP300刀也是一项非常值得尝试的服务，3个月的免费使用可以让你学会许多服务器相关的知识，还可以在服务器上跑项目，提高自己的水平。至于像AWS的AGA和腾讯云的AIA这些服务因为价格的原因主要是面对公司而非个人使用，当然土豪随意。</p>]]></content>
    
    
    <categories>
      
      <category>资源分享</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Buyvm购买及体验</title>
    <link href="/2020/11/26/39/"/>
    <url>/2020/11/26/39/</url>
    
    <content type="html"><![CDATA[<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">我是第一次购买Buyvm的服务，购买过程中碰到了许多问题，最终得以一一解决，在这里也分享下我自己的体验。<br></code></pre></td></tr></table></figure><h2 id="Buyvm购买"><a href="#Buyvm购买" class="headerlink" title="Buyvm购买"></a>Buyvm购买</h2><span id="more"></span><h3 id="Buyvm介绍"><a href="#Buyvm介绍" class="headerlink" title="Buyvm介绍"></a>Buyvm介绍</h3><p>​ Buyvm的官网是：<a href="http://www.buyvm.net/">www.buyvm.net</a>, 数据中心有美国的拉斯维加斯（LV）、纽约（NY）和卢森堡（LU），第一次注册时注意使用真实信息注册，地址等和所在地IP一致；Paypal账号邮箱和注册邮箱一致。否则可能风控进入人工审核。注意邮件（很重要）。</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">因为Las Vegas拉斯维加斯机房和<span class="hljs-keyword">New</span> York纽约机房可挂载<span class="hljs-keyword">Block</span> Storage Slabs也就是储存硬盘，纽约机房对国内速度延迟都不如拉斯维加斯，因此最终我选择购买LV的机器（我一开始购买的是NY的机房，后来经过测试发现速度延迟确实不如LV，因此我立即发了工单请求更换机房，客服也在上班后为我处理了请求，这一点还是非常不错的）。<br></code></pre></td></tr></table></figure><p>NY机房：<a href="https://my.frantech.ca/cart.php?gid=38"></a><a href="https://my.frantech.ca/cart.php?gid=38">https://my.frantech.ca/cart.php?gid=38</a><br>LA机房：<a href="https://my.frantech.ca/cart.php?gid=37"></a><a href="https://my.frantech.ca/cart.php?gid=37">https://my.frantech.ca/cart.php?gid=37</a></p><p>​ 购买普通的KVM VPS后再挂载硬盘是一项非常经济的选择（注意：购买的VPS一定要和硬盘在同一个区域，否则无法挂载），Block Storage Slab,每256GB存储1.25美元/月，最高10TB存储盘，再搭配每月2美元的VPS，就可成功变成大盘鸡，配合1G端口，无限流量，离线存储，PT，onedrive，google drive，下载中转都很香。</p><p>LV机房 <a href="https://my.frantech.ca/cart.php?gid=42"></a><a href="https://my.frantech.ca/cart.php?gid=42">https://my.frantech.ca/cart.php?gid=42</a><br>NY机房 <a href="https://my.frantech.ca/cart.php?gid=45"></a><a href="https://my.frantech.ca/cart.php?gid=45">https://my.frantech.ca/cart.php?gid=45</a></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">除此之外他家的卢森堡机房因为抗DMCA的原因很适合跑<span class="hljs-keyword">BT</span>、PT下载，不过遗憾的是卢森堡机房是无法挂载硬盘的。<br></code></pre></td></tr></table></figure><h3 id="Buyvm付款及后续操作"><a href="#Buyvm付款及后续操作" class="headerlink" title="Buyvm付款及后续操作"></a>Buyvm付款及后续操作</h3><p>​ 在进行付款时如果选择支付宝建议选择使用加拿大元支付，这样可以更优惠。</p><p>​ 支付完成后，点击Client Area进入客户专区，在Services-My services中可以看到你所购买的服务，我自己购买的是1C512M10G硬盘无限流量月付2$的拉斯维加斯的机器，再挂载月付1.25$256G储存的硬盘。因为是第一次购买，我按照以往的经验就先去ping了一下我的ip发现没有ping通，然后再去Xshell上连接我的服务器发现也无法连上，我以为是服务器的问题，于是去发了工单要求更换服务器。可没过多久，当我发现自己有几封未读邮件并查阅相关资料后我才发现原来是我还没有设定Stallion的密码也没有安装服务器的系统，我这才通过邮件里的链接进入Stallion设置了密码并安装了Ubuntu系统。</p><p>​ 安装系统时点击Reinstall并选择你要安装的系统和设定你服务器的登录密码，安装完成后点击右上角的Grateful Restart即可完成整个过程，到这为止我才总算解决了所有问题，不得不说这是一个非常需要注意的事项，账号注册时要设置一个密码、进入真正的控制台也需要设置一个密码</p><h2 id="Buyvm硬盘挂载教程"><a href="#Buyvm硬盘挂载教程" class="headerlink" title="Buyvm硬盘挂载教程"></a>Buyvm硬盘挂载教程</h2><p>​ 第一步，购买后，到<a href="https://manage.buyvm.net/">https://manage.buyvm.net</a> 登录面板Stallion找到Storage Volumes，查看你购买的存储盘，后面有个齿轮，点击进入设置，选择：“Attach to Virtual Server”，确认挂载到的你的某个VPS上。<br>第二步，通过ssh连接到linux服务器来挂载硬盘：先用</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">fdisk -l</span><br></code></pre></td></tr></table></figure><p>可以看前面后台分配存储盘到VPS下成功没。如果显示有两个盘就好。<br>查看硬盘列表:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ls <span class="hljs-regexp">/dev/</span>disk<span class="hljs-regexp">/by-id/</span><br></code></pre></td></tr></table></figure><p>然后会显示硬盘列表：ata-QEMU_DVD-ROM_QM00004 scsi-0BUYVM_SLAB_VOLUME-3816</p><p>其中后面的（scsi-0BUYVM_SLAB_VOLUME-3816）就是你的存储盘，结尾数字每个人不一样，注意后面要改你自己的。<br>格式化硬盘:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkfs.ext4 -F <span class="hljs-regexp">/dev/</span>disk<span class="hljs-regexp">/by-id/</span>scsi-<span class="hljs-number">0</span>BUYVM_SLAB_VOLUME-<span class="hljs-number">3816</span><br></code></pre></td></tr></table></figure><p>创建挂载目录：（新建文件夹名home，不要重复）</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mkdir -p /home<br></code></pre></td></tr></table></figure><p>挂载硬盘到home目录：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mount -o discard,defaults <span class="hljs-regexp">/dev/</span>disk<span class="hljs-regexp">/by-id/</span>scsi-<span class="hljs-number">0</span>BUYVM_SLAB_VOLUME-<span class="hljs-number">3816</span> /home<br></code></pre></td></tr></table></figure><p>查看挂载结果：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">df -<span class="hljs-selector-tag">a</span>/df -h<br></code></pre></td></tr></table></figure><p>设置开机后自动挂载:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">echo ‘<span class="hljs-regexp">/dev/</span>disk<span class="hljs-regexp">/by-id/</span>scsi-<span class="hljs-number">0</span>BUYVM_SLAB_VOLUME-<span class="hljs-number">3816</span> <span class="hljs-regexp">/home  ext4 defaults,nofail,discard 0 0′  tee -a /</span>etc/fstab<br></code></pre></td></tr></table></figure><p>再重启VPS便可成功使用了。</p>]]></content>
    
    
    <categories>
      
      <category>VPS评测</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux系统下，一键安装Centos6-7、Debian7-10、Ubuntu14-18、Windows等</title>
    <link href="/2020/11/26/38/"/>
    <url>/2020/11/26/38/</url>
    
    <content type="html"><![CDATA[<h2 id="一-dd-Ubuntu系统"><a href="#一-dd-Ubuntu系统" class="headerlink" title="一.dd Ubuntu系统"></a>一.dd Ubuntu系统</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -N --no-check-certificate https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/veip007/</span>dd<span class="hljs-regexp">/master/</span>dd-od.sh &amp;&amp; chmod +x dd-od.sh &amp;&amp; ./dd-od.sh<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -N --no-check-certificate https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/veip007/</span>dd<span class="hljs-regexp">/master/</span>dd-gd.sh &amp;&amp; chmod +x dd-gd.sh &amp;&amp; ./dd-gd.sh<br></code></pre></td></tr></table></figure><p>（镜像文件位置不同）<br>Ubuntu 14.04x64 用户名：root 密码：MoeClub.org<br>Ubuntu 16.04x64 用户名：root 密码：MoeClub.org<br>Ubuntu 18.04x64 用户名：root 密码：MoeClub.org</p><p>dd Ubuntu 18.04</p><p>系统自动断开连接后20分钟后再连接<br>视性能差异时间或长或短</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">wget --no-check-certificate -qO <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InstallNET</span>.</span></span>sh &#x27;https:<span class="hljs-comment">//raw.githubusercontent.com/leitbogioro/WedTools/master/Linux_reinstall/InstallNET.sh&#x27; &amp;&amp; chmod a+x InstallNET.sh</span><br>bash <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InstallNET</span>.</span></span>sh -u <span class="hljs-number">18.04</span> -v <span class="hljs-number">64</span> -a -p yourpassword<br></code></pre></td></tr></table></figure><p>初始root密码 yourpassword</p><span id="more"></span><h2 id="二-dd-Debian-系统"><a href="#二-dd-Debian-系统" class="headerlink" title="二.dd Debian 系统"></a>二.dd Debian 系统</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -N --no-check-certificate https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/veip007/</span>dd<span class="hljs-regexp">/master/</span>dd-od.sh &amp;&amp; chmod +x dd-od.sh &amp;&amp; ./dd-od.sh<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -N --no-check-certificate https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/veip007/</span>dd<span class="hljs-regexp">/master/</span>dd-gd.sh &amp;&amp; chmod +x dd-gd.sh &amp;&amp; ./dd-gd.sh<br></code></pre></td></tr></table></figure><p>（镜像文件位置不同）<br>Debian 7 x32 用户名：root 密码：MoeClub.org<br>Debian 8 x64 用户名：root 密码：MoeClub.org<br>Debian 9 x64 用户名：root 密码：MoeClub.org<br>Debian 10 x64 用户名：root 密码：cxthhhhh.com</p><p>dd Debian 10</p><p>系统自动断开连接后10分钟后再连接<br>视性能差异时间或长或短</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">bash &lt;(<span class="hljs-name">wget</span> --no-check-certificate -qO- &#x27;https<span class="hljs-symbol">://moeclub</span>.org/attachment/LinuxShell/InstallNET.sh&#x27;) -d <span class="hljs-number">10</span> -v <span class="hljs-number">64</span> -a -p yourpassword<br></code></pre></td></tr></table></figure><p>初始root密码 yourpassword</p><h2 id="三-dd-Centos系统"><a href="#三-dd-Centos系统" class="headerlink" title="三.dd Centos系统"></a>三.dd Centos系统</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -N --no-check-certificate https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/veip007/</span>dd<span class="hljs-regexp">/master/</span>dd-od.sh &amp;&amp; chmod +x dd-od.sh &amp;&amp; ./dd-od.sh<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -N --no-check-certificate https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/veip007/</span>dd<span class="hljs-regexp">/master/</span>dd-gd.sh &amp;&amp; chmod +x dd-gd.sh &amp;&amp; ./dd-gd.sh<br></code></pre></td></tr></table></figure><p>（镜像文件位置不同）<br>CentOS 6 (阿里云镜像) 用户名：root 密码：MoeClub.org<br>CentOS 6 用户名：root 密码：MoeClub.org<br>CentOS 7 (DD) 用户名：root 密码：Pwd@CentOS<br>CentOS 8 用户名：root 密码：cxthhhhh.com 推荐512M以上使用</p><p>dd Centos 7</p><p>系统自动断开连接后20分钟后再连接<br>视性能差异时间或长或短</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">wget --<span class="hljs-keyword">no</span>-check-certificate http<span class="hljs-variable">s:</span>//<span class="hljs-keyword">shell</span>.p1e.<span class="hljs-keyword">cn</span>/reinstall/Network-Reinstall-System-Modify.<span class="hljs-keyword">sh</span> &amp;&amp; chmod <span class="hljs-keyword">a</span>+<span class="hljs-keyword">x</span> Network-Reinstall-System-Modify.<span class="hljs-keyword">sh</span><br>bash Network-Reinstall-System-Modify.<span class="hljs-keyword">sh</span> -CentOS_7<br></code></pre></td></tr></table></figure><p>初始root密码 cxthhhhh.com</p><h2 id="四-dd-win系统（注意：将Linuxdd成win系统时要先检查服务商的TOS，以免机器被封）"><a href="#四-dd-win系统（注意：将Linuxdd成win系统时要先检查服务商的TOS，以免机器被封）" class="headerlink" title="四.dd win系统（注意：将Linuxdd成win系统时要先检查服务商的TOS，以免机器被封）"></a>四.dd win系统（注意：将Linuxdd成win系统时要先检查服务商的TOS，以免机器被封）</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -N --no-check-certificate https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/veip007/</span>dd<span class="hljs-regexp">/master/</span>dd-od.sh &amp;&amp; chmod +x dd-od.sh &amp;&amp; ./dd-od.sh<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -N --no-check-certificate https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/veip007/</span>dd<span class="hljs-regexp">/master/</span>dd-gd.sh &amp;&amp; chmod +x dd-gd.sh &amp;&amp; ./dd-gd.sh<br></code></pre></td></tr></table></figure><p>（镜像文件位置不同）<br>萌咖Win7x64 用户名:Administrator 密码：Vicer<br>Win2019 By:MeowLove 密码：cxthhhhh.com<br>Win2016 By:MeowLove 密码：cxthhhhh.com<br>Win2012 R2 By:MeowLove 密码：cxthhhhh.com<br>Win2008 R2 By:MeowLove 密码：cxthhhhh.com<br>Windows 7 Vienna By:MeowLove 密码：cxthhhhh.com<br>Windows 2003 Vienna By:MeowLove 密码：cxthhhhh.com<br>Win7x32 By:不知道作者了 用户名:Administrator 密码：Windows7x86-Chinese<br>Win-2003x32 By:老司机 用户名:Administrator 密码：WinSrv2003x86-Chinese<br>Win2008x64 By:老司机 用户名:Administrator 密码：WinSrv2008x64-Chinese<br>Win2012R2x64 By:老司机 用户名:Administrator 密码：WinSrv2012r2</p>]]></content>
    
    
    <categories>
      
      <category>脚本合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ION20.19刀洛杉矶机器评测</title>
    <link href="/2020/11/21/35/"/>
    <url>/2020/11/21/35/</url>
    
    <content type="html"><![CDATA[<p>今天论坛有人出ION20.19刀洛杉矶年付款，临近黑五手有点痒就收了这款，在这里做个简单的评测。</p><h1 id="一-基本信息"><a href="#一-基本信息" class="headerlink" title="一.基本信息"></a>一.基本信息</h1><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/image-20201120231949131.png"></p><h1 id="二-硬盘及流媒体测试"><a href="#二-硬盘及流媒体测试" class="headerlink" title="二.硬盘及流媒体测试"></a>二.硬盘及流媒体测试</h1><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/image-20201120235005420.png"></p><h1 id="三-网络测试"><a href="#三-网络测试" class="headerlink" title="三.网络测试"></a>三.网络测试</h1><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/image-20201120235121951.png"></p><h1 id="四-路由测试"><a href="#四-路由测试" class="headerlink" title="四.路由测试"></a>四.路由测试</h1><h2 id="北京联通"><a href="#北京联通" class="headerlink" title="北京联通"></a>北京联通</h2><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/image-20201120235226334.png"></p><h2 id="上海电信"><a href="#上海电信" class="headerlink" title="上海电信"></a>上海电信</h2><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/image-20201120235300860.png"></p><h2 id="广州移动"><a href="#广州移动" class="headerlink" title="广州移动"></a>广州移动</h2><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/image-20201120235328987.png"></p><p>去程方面电信走CN2GIA线路，联通直连到美国，移动绕日本到美国。</p><h1 id="五-实际体验"><a href="#五-实际体验" class="headerlink" title="五.实际体验"></a>五.实际体验</h1><p>由于今天刚收到机器，使用时间还不是太长，但根据我的测速，我发现这款机器网速不太稳定，高的时候上传下载均可达到200MBps，但在晚高峰时速度会慢许多，延迟能稳定在220ms左右，同时油管单线程速度并不快，这也是我比较困惑的一点。</p><p>以下为晚上11点20分的测速</p><p><img src="https://cdn.jsdelivr.net/gh/a08332424/blog/article/image-20201121000653458.png"></p>]]></content>
    
    
    <categories>
      
      <category>VPS评测</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Gcore老伯力与新伯力对比</title>
    <link href="/2020/11/21/27/"/>
    <url>/2020/11/21/27/</url>
    
    <content type="html"><![CDATA[<p>前端时间入手了新伯力，延迟比较低，速度从早到晚都能跑满，于是又去论坛溢价收了个老伯力，体验同样很好，在这里做个简单的对比，方便做出比较。</p><h1 id="一-基本信息"><a href="#一-基本信息" class="headerlink" title="一.基本信息"></a>一.基本信息</h1><p>新伯力<img src="https://stuhost.codes/usr/uploads/2020/11/3133640235.png" alt="11201.png" title="11201.png"></p><p>老伯力<img src="https://stuhost.codes/usr/uploads/2020/11/3668768946.png" alt="11202.png" title="11202.png"></p><span id="more"></span><h1 id="二-硬盘及流媒体测试"><a href="#二-硬盘及流媒体测试" class="headerlink" title="二.硬盘及流媒体测试"></a>二.硬盘及流媒体测试</h1><p>新伯力<img src="https://stuhost.codes/usr/uploads/2020/11/1978913662.png" alt="11203.png" title="11203.png"></p><p>老伯力<img src="https://stuhost.codes/usr/uploads/2020/11/452027590.png" alt="11204.png" title="11204.png"></p><h1 id="三-网络测试"><a href="#三-网络测试" class="headerlink" title="三.网络测试"></a>三.网络测试</h1><p>新老伯力最大的区别就在于新伯力带宽为100MBps，流量为500G且为双向；而老伯力带宽为500MBps，流量为1000G且为单向。</p><p>新伯力<img src="https://stuhost.codes/usr/uploads/2020/11/54190069.png" alt="11205.png" title="11205.png"></p><p>老伯力<img src="https://stuhost.codes/usr/uploads/2020/11/3662142740.png" alt="11206.png" title="11206.png"><br>从我本地ping新伯力以及老伯力，延迟均在120ms以内，并且十分稳定。</p><h1 id="四-路由测试"><a href="#四-路由测试" class="headerlink" title="四.路由测试"></a>四.路由测试</h1><p>以下为回程</p><h2 id="北京联通"><a href="#北京联通" class="headerlink" title="北京联通"></a>北京联通</h2><p>新伯力<img src="https://stuhost.codes/usr/uploads/2020/11/1698056008.png" alt="11207.png" title="11207.png"></p><p>老伯力<img src="https://stuhost.codes/usr/uploads/2020/11/619869301.png" alt="11208.png" title="11208.png"></p><h2 id="上海电信"><a href="#上海电信" class="headerlink" title="上海电信"></a>上海电信</h2><p>新伯力<img src="https://stuhost.codes/usr/uploads/2020/11/3582929845.png" alt="11209.png" title="11209.png"></p><p>老伯力<img src="https://stuhost.codes/usr/uploads/2020/11/1995824299.png" alt="11210.png" title="11210.png"></p><h2 id="广州移动"><a href="#广州移动" class="headerlink" title="广州移动"></a>广州移动</h2><p>新伯力<img src="https://stuhost.codes/usr/uploads/2020/11/1796086247.png" alt="11211.png" title="11211.png"></p><p>老伯力<img src="https://stuhost.codes/usr/uploads/2020/11/1854510922.png" alt="11212.png" title="11212.png"></p><h1 id="五-实际体验"><a href="#五-实际体验" class="headerlink" title="五.实际体验"></a>五.实际体验</h1><p>新伯力<img src="https://stuhost.codes/usr/uploads/2020/11/1624013513.png" alt="11213.png" title="11213.png"><br>老伯力<img src="https://stuhost.codes/usr/uploads/2020/11/3691062370.png" alt="11214.png" title="11214.png"><br>以上为晚上11点20的测速，可见实际速率差别并不大，油管4K并不是难事，所以对于买不到老伯力的人来说，如果流量需求不大，新伯力是完全可以用的，两者价格相同都为88卢布，只是老伯力要从其他人手里买。当然对于毛子机器来说，最适合的还是联通用户，移动用户还是尽量选择其他地区的服务器比较好。<br>最后附上新伯力的购买链接：<a href="https://gcorelabs.com/ru/hosting/vds/">点击这里，选择中文翻译为哈巴罗夫斯克即可或俄语为Хабаровск</a></p>]]></content>
    
    
    <categories>
      
      <category>VPS评测</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Racknerd双十一优惠机器评测</title>
    <link href="/2020/11/09/3/"/>
    <url>/2020/11/09/3/</url>
    
    <content type="html"><![CDATA[<p>早就听说RN是灵车，但这次双十一做活动，最便宜的10刀一年，纠结了许久，而且一直收到邮件，最终还是上了RN的车，下面我就来测试一下圣何塞一年9.98刀机器各方面的性能。</p><h1 id="一-基本信息"><a href="#一-基本信息" class="headerlink" title="一.基本信息"></a>一.基本信息</h1><p><img src="https://stuhost.codes/usr/uploads/2020/11/3284392260.png" alt="1.png" title="1.png"> <img src="https://stuhost.codes/usr/uploads/2020/11/2446696905.png" alt="2.png" title="2.png"></p><span id="more"></span><h1 id="二-硬盘以及流媒体测试"><a href="#二-硬盘以及流媒体测试" class="headerlink" title="二.硬盘以及流媒体测试"></a>二.硬盘以及流媒体测试</h1><p><img src="https://stuhost.codes/usr/uploads/2020/11/2419654114.png" alt="3.png" title="3.png"></p><h1 id="三-网络测试"><a href="#三-网络测试" class="headerlink" title="三.网络测试"></a>三.网络测试</h1><p>我分到的IP前两段是107.173，ping值与官方给出的测试IP相差无几，具体信息为 <img src="https://stuhost.codes/usr/uploads/2020/11/1593972360.png" alt="4.png" title="4.png"> 以下为网络测速 <img src="https://stuhost.codes/usr/uploads/2020/11/103092029.png" alt="5.png" title="5.png"></p><h1 id="四-路由测速"><a href="#四-路由测速" class="headerlink" title="四.路由测速"></a>四.路由测速</h1><p>电信直连<img src="https://stuhost.codes/usr/uploads/2020/11/3310107910.png" alt="6.png" title="6.png"> 联通直连<img src="https://stuhost.codes/usr/uploads/2020/11/2707146919.png" alt="7.png" title="7.png"> 移动直连<img src="https://stuhost.codes/usr/uploads/2020/11/2550069752.png" alt="8.png" title="8.png"></p><h1 id="五-总体感受"><a href="#五-总体感受" class="headerlink" title="五.总体感受"></a>五.总体感受</h1><p>作为10刀一年的机器，跑出这样的速度是比较令人满意的，不过我还是建议移动电信用户谨慎上车，晚高峰可能不太稳定。下面给出本次所有优惠。</p><h2 id="双11-套餐1"><a href="#双11-套餐1" class="headerlink" title="双11 - 套餐1"></a>双11 - 套餐1</h2><p>1 GB DDR4内存 1 个Intel Xeon核心 17 GB SSD快速读写存储 3000 GB流量 1Gbps带宽 1个IPv4 活动价： $9.98/年 或 $19.46/两年 可选机房：圣何塞，西雅图，芝加哥，达拉斯，亚特兰大，阿什本，新泽西，纽约 购买链接：<a href="https://my.racknerd.com/cart.php?a=add&pid=343">https://my.racknerd.com/cart.php?a=add&amp;pid=343</a></p><hr><h2 id="双11-套餐2"><a href="#双11-套餐2" class="headerlink" title="双11 - 套餐2"></a>双11 - 套餐2</h2><p>2 GB DDR4内存 2 个Intel Xeon核心 35 GB SSD快速读写存储 5000 GB流量 1Gbps带宽 1个IPv4 活动价： $15.58/年 或 $30.66/两年 可选机房：圣何塞，西雅图，芝加哥，达拉斯，亚特兰大，阿什本，新泽西，纽约 购买链接：<a href="https://my.racknerd.com/cart.php?a=add&pid=344">https://my.racknerd.com/cart.php?a=add&amp;pid=344</a></p><hr><h2 id="双11-套餐3"><a href="#双11-套餐3" class="headerlink" title="双11 - 套餐3"></a>双11 - 套餐3</h2><p>3 GB DDR4内存 3 个Intel Xeon核心 55 GB SSD快速读写存储 8000 GB流量 1Gbps带宽 1个IPv4 活动价： $27.98/年 或 $55.46/两年 可选机房：洛杉矶(DC-02)，圣何塞，西雅图，芝加哥，达拉斯，亚特兰大，阿什本，新泽西，纽约 购买链接：<a href="https://my.racknerd.com/cart.php?a=add&pid=345">https://my.racknerd.com/cart.php?a=add&amp;pid=345</a></p><hr><h2 id="双11-套餐4"><a href="#双11-套餐4" class="headerlink" title="双11 - 套餐4"></a>双11 - 套餐4</h2><p>4 GB DDR4内存 3 个Intel Xeon核心 80 GB SSD快速读写存储 9000 GB流量 1Gbps带宽 1个IPv4 活动价： $35.98/年 或 $71.46/两年 可选机房：洛杉矶(DC-02)，圣何塞，西雅图，芝加哥，达拉斯，亚特兰大，阿什本，新泽西，纽约 购买链接：<a href="https://my.racknerd.com/cart.php?a=add&pid=347">https://my.racknerd.com/cart.php?a=add&amp;pid=347</a></p><hr><h2 id="双11-套餐5-仅限Windows"><a href="#双11-套餐5-仅限Windows" class="headerlink" title="双11 - 套餐5 (仅限Windows)"></a>双11 - 套餐5 (仅限Windows)</h2><p>3 GB DDR4内存 2 个AMD Ryzen核心 (相当于4个英特尔核心) 35 GB NVMe SSD 闪速存储硬盘 3000 GB流量 1Gbps带宽 1个IPv4 活动价： $78.88/年 或 $157.26/两年 可选机房：洛杉矶(DC-02) 购买链接：<a href="https://my.racknerd.com/cart.php?a=add&pid=346">https://my.racknerd.com/cart.php?a=add&amp;pid=346</a></p>]]></content>
    
    
    <categories>
      
      <category>VPS评测</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
